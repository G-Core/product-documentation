"openapi": "3.1.0"
"info": {"title": "Gcore OpenAPI â€“ DDoS Protection API", "description": "This OpenAPI is an aggregated OpenAPI specification that unifies all Gcore products into a single file. It covers Cloud, CDN, DNS, WAAP, DDoS Protection, Object Storage, Streaming, and FastEdge services.", "version": "2025-09-22T14:46:55.476624+00:00"}
"servers": ["url": "https://api.gcore.com"]
paths:
  "/security/notifier/v1/event_logs":
    "get": {"tags": ["Event Logs"], "summary": "Event Logs Clients View", "operationId": "event_logs_clients_view_api_v1_event_logs_get", "parameters": [{"name": "date_from", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "string"], "default": "2024-01-23", "title": "Date From"}}, {"name": "date_to", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "string"], "default": "2025-01-23", "title": "Date To"}}, {"name": "alert_type", "in": "query", "required": false, "schema": {"anyOf": ["$ref": "#/components/schemas/AlertType", "type": "null"], "title": "Alert Type"}}, {"name": "targeted_ip_addresses", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "title": "Targeted Ip Addresses"}}, {"name": "ordering", "in": "query", "required": false, "schema": {"enum": ["attack_start_time", "-attack_start_time", "attack_power_bps", "-attack_power_bps", "attack_power_pps", "-attack_power_pps", "number_of_ip_involved_in_attack", "-number_of_ip_involved_in_attack", "alert_type", "-alert_type"], "type": "string", "default": "attack_start_time", "title": "Ordering"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 500, "minimum": 1, "default": 10, "title": "Limit", "x-stainless-skip": ["terraform"]}}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 0, "default": 0, "title": "Offset"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LimitOffsetPage_TypeVar_Customized_EventLogClientsOutSchema_"}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.security.events.list()\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/security\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Security.Events.List(context.TODO(), security.EventListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/security/sifter/v2/protected_addresses/announces":
    "get": {"tags": ["BGP announces"], "summary": "Get BGP announces", "description": "Get BGP announces filtered by parameters. Shows announces in active profiles, meaning that to get a non-empty response, the client must have at least one active profile.", "operationId": "get_announces_v2_protected_addresses_announces_get", "parameters": [{"name": "site", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "minLength": 1, "maxLength": 100}, "type": "null"], "title": "Site"}}, {"name": "origin", "in": "query", "required": false, "schema": {"anyOf": ["$ref": "#/components/schemas/Origin", "type": "null"], "title": "Origin"}}, {"name": "announced", "in": "query", "required": false, "schema": {"anyOf": ["type": "boolean", "type": "null"], "title": "Announced"}}, {"name": "client_id", "in": "query", "required": false, "schema": {"anyOf": ["type": "integer", "type": "null"], "title": "Client Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/ClientAnnounces"}, "title": "Response Get Announces V2 Protected Addresses Announces Get", "type": "array"}}}}, "401": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Request"}}}, "description": "Unauthorized"}, "403": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Request"}}}, "description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient_announces = client.security.bgp_announces.list()\nprint(client_announces)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/security\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  clientAnnounces, err := client.Security.BgpAnnounces.List(context.TODO(), security.BgpAnnounceListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", clientAnnounces)\n}\n"}]}
    "post": {"tags": ["BGP announces"], "summary": "Change BGP announces", "description": "Change BGP announces (it can be enabled or disabled, but not created or updated). Can be applied to already existing announces in active profiles, meaning that the client must have at least one active profile.", "operationId": "change_announces_v2_protected_addresses_announces_post", "parameters": [{"name": "client_id", "in": "query", "required": false, "schema": {"anyOf": ["type": "integer", "type": "null"], "title": "Client Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnounceIn"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Change Announces V2 Protected Addresses Announces Post"}}}}, "401": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Request"}}}, "description": "Unauthorized"}, "403": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Request"}}}, "description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nresponse = client.security.bgp_announces.toggle(\n    announce=\"192.9.9.1/32\",\n    enabled=True,\n)\nprint(response)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/security\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  response, err := client.Security.BgpAnnounces.Toggle(context.TODO(), security.BgpAnnounceToggleParams{\n    Announce: \"192.9.9.1/32\",\n    Enabled: true,\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", response)\n}\n"}]}
  "/security/iaas/profile-templates":
    "get": {"tags": ["Security Templates"], "operationId": "profile_templates_list", "description": "Get list of profile templates. Profile template is used as a template to create profile. Client receives only common and created for him profile templates.", "summary": "Get profile templates", "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ClientProfileTemplate"}}}}, "description": ""}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient_profile_templates = client.security.profile_templates.list()\nprint(client_profile_templates)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  clientProfileTemplates, err := client.Security.ProfileTemplates.List(context.TODO())\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", clientProfileTemplates)\n}\n"}]}
  "/security/iaas/v2/profiles":
    "get": {"tags": ["Profiles"], "operationId": "v2_profiles_list", "description": "Get list of protection profiles. Client receives only profiles created by him", "summary": "Get profiles", "parameters": [{"in": "query", "name": "exclude_empty_address", "schema": {"type": "boolean"}}, {"in": "query", "name": "include_deleted", "schema": {"type": "boolean"}}, {"in": "query", "name": "ip_address", "schema": {"type": "string"}}, {"in": "query", "name": "site", "schema": {"type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}}, "description": ""}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient_profiles = client.security.profiles.list()\nprint(client_profiles)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/security\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  clientProfiles, err := client.Security.Profiles.List(context.TODO(), security.ProfileListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", clientProfiles)\n}\n"}]}
    "post": {"tags": ["Profiles"], "operationId": "v2_profiles_create", "description": "Create protection profile. Protection is enabled at the same time as profile is created", "summary": "Create profile", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}}, "required": true}, "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}, "description": ""}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient_profile = client.security.profiles.create(\n    fields=[{\n        \"base_field\": 1\n    }],\n    profile_template=1,\n)\nprint(client_profile.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/security\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  clientProfile, err := client.Security.Profiles.New(context.TODO(), security.ProfileNewParams{\n    Fields: []security.ProfileNewParamsField{security.ProfileNewParamsField{\n      BaseField: 1,\n    }},\n    ProfileTemplate: 1,\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", clientProfile.ID)\n}\n"}]}
  "/security/iaas/v2/profiles/{id}":
    "get": {"tags": ["Profiles"], "operationId": "v2_profiles_retrieve", "description": "Get profile by id", "summary": "Get profile", "parameters": [{"in": "path", "name": "id", "schema": {"type": "integer"}, "required": true}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}, "description": ""}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Profile not found"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient_profile = client.security.profiles.get(\n    0,\n)\nprint(client_profile.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  clientProfile, err := client.Security.Profiles.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", clientProfile.ID)\n}\n"}]}
    "put": {"tags": ["Profiles"], "operationId": "v2_profiles_update", "description": "Update profile. Protection policies are updated at the same time as profile updated", "summary": "Update profile", "parameters": [{"in": "path", "name": "id", "schema": {"type": "integer"}, "required": true}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientUpdateProfileTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ClientUpdateProfileTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ClientUpdateProfileTemplate"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}, "description": ""}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Profile not found"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient_profile = client.security.profiles.replace(\n    id=0,\n    fields=[{\n        \"base_field\": 1\n    }],\n    profile_template=1,\n)\nprint(client_profile.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/security\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  clientProfile, err := client.Security.Profiles.Replace(\n    context.TODO(),\n    0,\n    security.ProfileReplaceParams{\n      Fields: []security.ProfileReplaceParamsField{security.ProfileReplaceParamsField{\n        BaseField: 1,\n      }},\n      ProfileTemplate: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", clientProfile.ID)\n}\n"}]}
    "delete": {"tags": ["Profiles"], "operationId": "v2_profiles_destroy", "description": "Delete protection profile. Protection is disabled at the same time as profile is deleted", "summary": "Delete profile", "parameters": [{"in": "path", "name": "id", "schema": {"type": "integer"}, "required": true}], "responses": {"204": {"description": "No response body"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Profile not found"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.security.profiles.delete(\n    0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Security.Profiles.Delete(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/security/iaas/v2/profiles/{id}/recreate":
    "put": {"tags": ["Profiles"], "operationId": "v2_profiles_recreate_update", "description": "Recreate profile with another profile template (for other cases use detail API)", "summary": "Recreate profile", "parameters": [{"in": "path", "name": "id", "schema": {"type": "integer"}, "required": true}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientUpdateProfileTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ClientUpdateProfileTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ClientUpdateProfileTemplate"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}, "description": ""}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Profile not found"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient_profile = client.security.profiles.recreate(\n    id=0,\n    fields=[{\n        \"base_field\": 1\n    }],\n    profile_template=1,\n)\nprint(client_profile.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/security\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  clientProfile, err := client.Security.Profiles.Recreate(\n    context.TODO(),\n    0,\n    security.ProfileRecreateParams{\n      Fields: []security.ProfileRecreateParamsField{security.ProfileRecreateParamsField{\n        BaseField: 1,\n      }},\n      ProfileTemplate: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", clientProfile.ID)\n}\n"}]}
    "patch": {"deprecated": true, "tags": ["Profiles"], "operationId": "v2_profiles_recreate_partial_update", "description": "Recreate profile with another profile template (for other cases use detail API)", "summary": "Recreate profile", "parameters": [{"in": "path", "name": "id", "schema": {"type": "integer"}, "required": true}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatchedClientUpdateProfileTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PatchedClientUpdateProfileTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PatchedClientUpdateProfileTemplate"}}}}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}, "description": ""}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Profile not found"}}}
  "/security/iaas/v2/profiles/{id}/update-and-activate":
    "put": {"deprecated": true, "tags": ["Profiles"], "operationId": "v2_profiles_update_and_activate_update", "description": "Update profile and activate protection. Protection policies are updated at the same time as profile updated", "summary": "Update profile and activate protection", "parameters": [{"in": "path", "name": "id", "schema": {"type": "integer"}, "required": true}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}, "description": ""}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Profile not found"}}}
    "patch": {"deprecated": true, "tags": ["Profiles"], "operationId": "v2_profiles_update_and_activate_partial_update", "description": "Update profile and activate protection. Protection policies are updated at the same time as profile updated", "summary": "Update profile and activate protection", "parameters": [{"in": "path", "name": "id", "schema": {"type": "integer"}, "required": true}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatchedClientProfile"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PatchedClientProfile"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PatchedClientProfile"}}}}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}, "description": ""}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Profile not found"}}}
  "/security/iaas/v2/profiles/create-and-activate":
    "post": {"deprecated": true, "tags": ["Profiles"], "operationId": "v2_profiles_create_and_activate_create", "description": "Create protection profile and activate protection. Protection policies are activated at the same time as profile created", "summary": "Create profile and activate", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ClientProfile"}}}, "required": true}, "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientProfileReadV2"}}}, "description": ""}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Profile not found"}}}
tags:
- {"name": "Event Logs", "x-displayName": "Event Logs"}
- {"name": "BGP announces", "x-displayName": "BGP announces"}
- {"name": "Security Templates", "x-displayName": "Security Templates"}
- {"name": "Profiles", "x-displayName": "Profiles"}
x-tagGroups:
- {"name": "DDoS Protection API", "tags": ["Event Logs", "BGP announces", "Security Templates", "Profiles"]}
security: ["APIKey": []]
components:
  schemas:
    Request: {"properties": {}, "type": "object", "title": "Request"}
    LimitOffsetPage_TypeVar_Customized_EventLogClientsOutSchema_: {"properties": {"results": {"items": {"$ref": "#/components/schemas/EventLogClientsOutSchema"}, "type": "array", "title": "Results"}, "count": {"anyOf": [{"type": "integer", "minimum": 0}, "type": "null"], "title": "Count"}, "limit": {"anyOf": [{"type": "integer", "minimum": 1}, "type": "null"], "title": "Limit"}, "offset": {"anyOf": [{"type": "integer", "minimum": 0}, "type": "null"], "title": "Offset"}}, "type": "object", "required": ["results", "count", "limit", "offset"], "title": "LimitOffsetPage[TypeVar]Customized[EventLogClientsOutSchema]"}
    Origin: {"type": "string", "enum": ["STATIC", "DYNAMIC"], "title": "Origin"}
    AnnounceIn: {"properties": {"announce": {"examples": ["192.9.9.1/32"], "format": "ipv4network", "title": "Announce", "type": "string"}, "enabled": {"examples": [true], "title": "Enabled", "type": "boolean"}}, "required": ["announce", "enabled"], "title": "AnnounceIn", "type": "object"}
    ClientProfileTemplate: {"type": "object", "properties": {"id": {"type": "integer", "readOnly": true}, "name": {"type": "string", "maxLength": 100}, "description": {"type": "string"}, "fields": {"type": "array", "items": {"$ref": "#/components/schemas/ClientProfileTemplateField"}, "readOnly": true}, "base_template": {"type": "integer", "nullable": true}, "version": {"type": "string", "format": "uuid", "readOnly": true}, "created": {"type": "string", "format": "date-time", "readOnly": true}, "template_sifter": {"type": "string", "nullable": true}}, "required": ["created", "fields", "id", "name", "version"]}
    ClientProfile: {"type": "object", "properties": {"id": {"type": "integer", "readOnly": true}, "profile_template": {"type": "integer", "examples": [1, 2]}, "ip_address": {"type": "string", "examples": ["123.43.2.10", "123.65.9.5"], "nullable": true, "maxLength": 50}, "fields": {"type": "array", "items": {"$ref": "#/components/schemas/ClientProfileField"}, "writeOnly": true}, "site": {"type": "string", "examples": ["ED", "DC3"]}}, "required": ["fields", "id", "profile_template"]}
    ClientAnnounces: {"properties": {"announced": {"examples": [["192.9.9.1/32", "203.0.113.1/32"]], "items": {"format": "ipv4network", "type": "string"}, "title": "Announced", "type": "array"}, "client_id": {"examples": [128120], "minimum": 0, "title": "Client Id", "type": "integer"}, "not_announced": {"examples": [["122.2.2.1/32", "120.0.113.2/32"]], "items": {"format": "ipv4network", "type": "string"}, "title": "Not Announced", "type": "array"}}, "required": ["client_id", "announced", "not_announced"], "title": "ClientAnnounces", "type": "object"}
    AlertType: {"type": "string", "enum": ["ddos_alert", "rtbh_alert"], "title": "AlertType"}
    PatchedClientProfile: {"type": "object", "properties": {"id": {"type": "integer", "readOnly": true}, "profile_template": {"type": "integer", "examples": [1, 2]}, "ip_address": {"type": "string", "nullable": true, "maxLength": 50}, "fields": {"type": "array", "items": {"$ref": "#/components/schemas/ClientProfileField"}, "writeOnly": true}, "site": {"type": "string", "examples": ["ED", "DC3"]}}}
    HTTPValidationError: {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}
    ClientUpdateProfileTemplate: {"type": "object", "properties": {"id": {"type": "integer", "readOnly": true}, "profile_template": {"type": "integer", "examples": [1, 2]}, "ip_address": {"type": "string", "nullable": true, "maxLength": 50}, "fields": {"type": "array", "items": {"$ref": "#/components/schemas/ClientProfileField"}, "writeOnly": true}, "site": {"type": "string", "examples": ["ED", "DC3"]}}, "required": ["fields", "id", "profile_template"]}
    EventLogClientsOutSchema: {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "alert_type": {"anyOf": ["$ref": "#/components/schemas/AlertType", "type": "null"]}, "client_id": {"anyOf": ["type": "integer", "type": "null"], "title": "Client Id"}, "notification_type": {"anyOf": ["type": "string", "type": "null"], "title": "Notification Type"}, "attack_start_time": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "title": "Attack Start Time"}, "attack_power_bps": {"anyOf": ["type": "number", "type": "null"], "title": "Attack Power Bps"}, "attack_power_pps": {"anyOf": ["type": "number", "type": "null"], "title": "Attack Power Pps"}, "number_of_ip_involved_in_attack": {"anyOf": ["type": "integer", "type": "null"], "title": "Number Of Ip Involved In Attack"}, "targeted_ip_addresses": {"anyOf": ["type": "string", "type": "null"], "title": "Targeted Ip Addresses"}}, "type": "object", "required": ["id"], "title": "EventLogClientsOutSchema"}
    ClientProfileReadV2: {"type": "object", "properties": {"id": {"type": "integer", "readOnly": true}, "profile_template": {"$ref": "#/components/schemas/ClientProfileTemplate"}, "ip_address": {"type": "string", "examples": ["10.32.5.12", "195.23.43.64"], "nullable": true, "maxLength": 50}, "fields": {"type": "array", "items": {"$ref": "#/components/schemas/ClientProfileField"}, "readOnly": true}, "site": {"type": "string", "examples": ["ED", "DC3"]}, "options": {"allOf": ["$ref": "#/components/schemas/ProfileV1Options"], "readOnly": true}, "protocols": {"type": "array", "items": {"type": "object", "additionalProperties": {}}, "readOnly": true}, "status": {"type": "object", "additionalProperties": {}, "readOnly": true}, "plan": {"type": "string", "readOnly": true}}, "required": ["fields", "id", "options", "plan", "profile_template", "protocols", "site", "status"]}
    PatchedClientUpdateProfileTemplate: {"type": "object", "properties": {"id": {"type": "integer", "readOnly": true}, "profile_template": {"type": "integer", "examples": [1, 2]}, "ip_address": {"type": "string", "nullable": true, "maxLength": 50}, "fields": {"type": "array", "items": {"$ref": "#/components/schemas/ClientProfileField"}, "writeOnly": true}, "site": {"type": "string", "examples": ["ED", "DC3"]}}}
    ClientProfileTemplateField: {"type": "object", "properties": {"id": {"type": "integer", "readOnly": true}, "name": {"type": "string", "maxLength": 30}, "description": {"type": "string", "maxLength": 255}, "field_type": {"nullable": true, "anyOf": ["$ref": "#/components/schemas/FieldTypeEnum", "$ref": "#/components/schemas/NullEnum"]}, "required": {"type": "boolean"}, "default": {"type": "string", "nullable": true, "maxLength": 100}, "validation_schema": {"type": "object", "additionalProperties": {}}}, "required": ["id", "name"]}
    NullEnum: {"enum": [null]}
    ProfileV1Options: {"type": "object", "properties": {"bgp": {"type": "boolean"}, "active": {"type": "boolean"}, "price": {"type": "string", "format": "decimal", "pattern": "^-?\\d{0,6}(?:\\.\\d{0,2})?$", "readOnly": true}}, "required": ["active", "bgp", "price"]}
    ValidationError: {"properties": {"loc": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}
    ClientProfileField: {"type": "object", "properties": {"id": {"type": "integer", "readOnly": true}, "name": {"type": "string", "readOnly": true}, "description": {"type": "string", "readOnly": true}, "field_type": {"type": "string", "readOnly": true}, "required": {"type": "boolean", "readOnly": true}, "default": {"type": "string", "readOnly": true}, "field_value": {"field_value": {"additionalProperties": {}, "nullable": true, "examples": [[12, 54, 43], "key": "value", "value"]}}, "base_field": {"type": "integer", "examples": [1, 2]}, "validation_schema": {"type": "object", "additionalProperties": {}, "readOnly": true}}, "required": ["base_field", "default", "description", "field_type", "id", "name", "required", "validation_schema"]}
    FieldTypeEnum: {"enum": ["int", "bool", "str"], "type": "string", "description": "\\* `int` - Int\n\\* `bool` - Bool\n\\* `str` - Str"}
  securitySchemes:
    APIKey:
      description: "API key for authentication. Make sure to include the word `apikey`, followed by a single space and then your token.\nExample: `apikey 1234$abcdef`"
      type: apiKey
      in: header
      name: Authorization
