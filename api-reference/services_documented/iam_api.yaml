"openapi": "3.1.0"
"info": {"title": "Gcore OpenAPI – IAM API", "description": "This OpenAPI is an aggregated OpenAPI specification that unifies all Gcore products into a single file. It covers Cloud, CDN, DNS, WAAP, DDoS Protection, Object Storage, Streaming, and FastEdge services.", "version": "2025-10-04T08:09:11.351929+00:00"}
"servers": ["url": "https://api.gcore.com"]
paths:
  "/iam/auth/jwt/login":
    "post": {"tags": ["Account"], "summary": "Login", "description": "Log in to get access to your account and services. If you have more than one account, you will be logged\nin the first account. To select an account make an\n[additional request](GET /auth/jwt/clients/{clientId}/login) after successful log in.\n\n[Sign up](https://auth.gcore.com/login/signup) This method is available only for users who log in by email.\nUse [API Tokens](GET /clients/{clientId}/tokens) to get access to your services if use social networks (Google, GitHub) to log in.\n\n**Permission**\n\nIn addition to authentication, the API checks if the role of the user is authorized to perform the requested action.\n\n**Token Expiration**\n\nThe access token will expire in an hour, the refresh token — in 24 hours.", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "required": ["password", "username"], "properties": {"username": {"type": "string", "description": "User's email address."}, "password": {"type": "string", "description": "User's password."}, "one_time_password": {"type": "string", "description": "User's authenticator passcode in case of enabled 2fa."}}, "example": {"username": "you@yourcompany.com", "password": "yourpassword", "one_time_password": "authenticator passcode"}}}}}, "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "required": ["refresh", "access"], "properties": {"refresh": {"type": "string", "description": "Use this token to refresh the access token via\n[`/auth/jwt/refresh`](POST /auth/jwt/refresh) method.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYwMTcwNzA5MiwianRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQiLCJ1c2VyX2lkIjo1LCJ1c2VyX3R5cGUiOiJjb21tb24iLCJ1c2VyX2dyb3VwcyI6WyJBZG1pbmlzdHJhdG9ycyJdLCJjbGllbnRfaWQiOjIsImVtYWlsIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJ1c2VybmFtZSI6InRlc3R1c2VyQGV4YW1wbGUuY29tIiwic3NvX2VudGl0eSI6bnVsbCwiaXNfYWRtaW4iOmZhbHNlLCJjbGllbnRfbmFtZSI6IlRlc3QgQ29tcGFueSIsImV4Y2hhbmdlYWJsZSI6dHJ1ZX0.C-RuHDWLpu1bd0_SoZgbkqSqA65egSBigKikeEKXkdK-PRVx4ZUIMdkJd-L4ebeydDHgeq3AwXbDBSqPuXZMTKTFKe1HTvpLycTNkTKa-dp9nTq0VwfUlf3G7QajEJA1UiQ7IhSDZJK5NBkEzs_-PFtPOQjeE2u2AbKKJ_SK3hNi1BVU3uVjfWsMVwGDkVnPIa0aLtYDTYd2QKN5InBGh06XITFD_P_IETfwhw7yG4PvLWGejGQO9jJx1ViFYCQi-O8vLR9-mjwaD8Ngc5O8v3mnzRkkxeWoukSW1p8eWiGf7QaLg-zSI6pNFO3_LO-ILHcJ394GJzW2rSpaAgvxwRHDIulDxJtAbqyxykLgnDSHUZbKq8mgQqkeshbmQ-BUT_nkYj1LcQisNTGp4QsDRdi095QQIXLntJiGC59BxpZQ5y3j67AZHG9qiVuHQSlHBaQKBAFdA_d7CRqV7TzsT4p3cHVXF_VccBM06pItkYYY5Xj0bQPU6qWf26bONnYh1FHOlaejw2mGc_FsPpi0soGUh-1v_Qs6C4N086VJ5uYSHw_M3MNcGBjAahnUdrKNX_8gmbTDwYNw7h1ELPYfBAFeQJrdTOOQPfUHzkt9g67DHdxRDHMQxz933Wxmfl_5fiHWoWE82n5ZA110BZB9JQoP7Tqtg4qIZoE1M6Knh14"}, "access": {"type": "string", "description": "Use this token to access API.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjAxNjI0MjkyLCJqdGkiOiI0Mjk1ZjZhMjI4ZTE0MmE3YjA1ZmIxYjE5MjlhZjZlYyIsInVzZXJfaWQiOjUsInVzZXJfdHlwZSI6ImNvbW1vbiIsInVzZXJfZ3JvdXBzIjpbIkFkbWluaXN0cmF0b3JzIl0sImNsaWVudF9pZCI6MiwiZW1haWwiOiJ0ZXN0dXNlckBleGFtcGxlLmNvbSIsInVzZXJuYW1lIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJzc29fZW50aXR5IjpudWxsLCJpc19hZG1pbiI6ZmFsc2UsImNsaWVudF9uYW1lIjoiVGVzdCBDb21wYW55IiwiZXhjaGFuZ2VhYmxlIjp0cnVlLCJyanRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQifQ.aJjVE3_mC8fimclIPggD0ynh0EIwO8kCEffhFN4CxbaDBGz4R2Xn2mJQqhsRB2YoDCx_oH3uLii6aM_6OQtc2DbIElfN1KHoQmzzEjxKKXlgTOF_gsq9dVwQ9hajeOsQu5ly1rMk41WW1LrQ6Nkb_v6LC8g57Ah4h2pGot44h87BDsG6uUyMFVV3ZTJjkVNWJxceljFeDPO5rhx-ujtkX5iYwAeVh6HAq3I4Sw7OO5LZHF9pnhNBJVRNu8HlBNyk5UVB7uyStc9vjAnjGJyqc4yWL3QVTz7BMtvXX19W6sypl_YQiYzz5dsOiL4dzsI5RERBVt9DtOytSqDNigF_WTVUn0VsmXEK1oDGb8I2AWuAmiKYxizKY2JEOHoUz7B1L87fiPg5fNlv3QDrFJhuy1M6A-72jL1-N4tCGhUCQubvZEv90JshAhc6A5W88ghtjS_W80xt63gpvK81vE9b3coutIBnh-yvzEwTvudm3YKTnRrNBxRT01tdiJVEKoJ1poST0BxzxtGAvW_JgASTcOqQcFR6-Rr5smDSOki_mKVqODbRgcAj7CeNOvrwDZqC2XlQkTLvlo6msNvyVQH8vugRzPsbZK7F3pCvOEB5ub2WY6a1ui7lm-mAVyAs1VbzCHEnLu5GiXmyNE-mlNXQlAS1xz5P751rANnwODJJFz0"}}}}}}, "400": {"description": "Login failed.", "content": {
            "application/json": {"schema": {"anyOf": ["allOf": [{"title": "Validation error", "type": "object", "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "additionalProperties": {"type": "array", "description": "Error list for specific field.", "items": {"type": "string", "description": "Error description"}}}}}, "example": {"errors": {"password": ["This field is required"]}}], {"title": "Invalid request JSON schema", "type": "object", "properties": {"message": {"type": "string", "description": "This message describes error if json schema from your request is invalid.", "example": "JSON parse error - Expecting ',' delimiter: line 3 column 33 (char 77)\n"}}}, {"title": "No active account found", "type": "object", "properties": {"errors": {"type": "object", "properties": {"errors": {"type": "array", "items": {"type": "string", "enum": ["No active account found with the given credentials."]}}}, "description": "Username or password is incorrect. Check you username and password and try again."}}}]}}}}}, "security": []}
  "/iam/auth/jwt/refresh":
    "post": {"tags": ["Account"], "summary": "Refresh token", "description": "Use this request to refresh your access token.\n\nIf your refresh token is invalid, expired or blacklisted you should\n[authenticate](POST /auth/jwt/login) to obtain valid refresh token and try again.\n\n**Token Expiration**\n\nThe access token will expire in an hour, the refresh token — in 24 hours.", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "required": ["refresh"], "properties": {"refresh": {"type": "string", "description": "Use this token to refresh the access token via\n[`/auth/jwt/refresh`](POST /auth/jwt/refresh) method.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYwMTcwNzA5MiwianRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQiLCJ1c2VyX2lkIjo1LCJ1c2VyX3R5cGUiOiJjb21tb24iLCJ1c2VyX2dyb3VwcyI6WyJBZG1pbmlzdHJhdG9ycyJdLCJjbGllbnRfaWQiOjIsImVtYWlsIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJ1c2VybmFtZSI6InRlc3R1c2VyQGV4YW1wbGUuY29tIiwic3NvX2VudGl0eSI6bnVsbCwiaXNfYWRtaW4iOmZhbHNlLCJjbGllbnRfbmFtZSI6IlRlc3QgQ29tcGFueSIsImV4Y2hhbmdlYWJsZSI6dHJ1ZX0.C-RuHDWLpu1bd0_SoZgbkqSqA65egSBigKikeEKXkdK-PRVx4ZUIMdkJd-L4ebeydDHgeq3AwXbDBSqPuXZMTKTFKe1HTvpLycTNkTKa-dp9nTq0VwfUlf3G7QajEJA1UiQ7IhSDZJK5NBkEzs_-PFtPOQjeE2u2AbKKJ_SK3hNi1BVU3uVjfWsMVwGDkVnPIa0aLtYDTYd2QKN5InBGh06XITFD_P_IETfwhw7yG4PvLWGejGQO9jJx1ViFYCQi-O8vLR9-mjwaD8Ngc5O8v3mnzRkkxeWoukSW1p8eWiGf7QaLg-zSI6pNFO3_LO-ILHcJ394GJzW2rSpaAgvxwRHDIulDxJtAbqyxykLgnDSHUZbKq8mgQqkeshbmQ-BUT_nkYj1LcQisNTGp4QsDRdi095QQIXLntJiGC59BxpZQ5y3j67AZHG9qiVuHQSlHBaQKBAFdA_d7CRqV7TzsT4p3cHVXF_VccBM06pItkYYY5Xj0bQPU6qWf26bONnYh1FHOlaejw2mGc_FsPpi0soGUh-1v_Qs6C4N086VJ5uYSHw_M3MNcGBjAahnUdrKNX_8gmbTDwYNw7h1ELPYfBAFeQJrdTOOQPfUHzkt9g67DHdxRDHMQxz933Wxmfl_5fiHWoWE82n5ZA110BZB9JQoP7Tqtg4qIZoE1M6Knh14"}}}}}}, "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "required": ["refresh", "access"], "properties": {"refresh": {"type": "string", "description": "Use this token to refresh the access token via\n[`/auth/jwt/refresh`](POST /auth/jwt/refresh) method.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYwMTcwNzA5MiwianRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQiLCJ1c2VyX2lkIjo1LCJ1c2VyX3R5cGUiOiJjb21tb24iLCJ1c2VyX2dyb3VwcyI6WyJBZG1pbmlzdHJhdG9ycyJdLCJjbGllbnRfaWQiOjIsImVtYWlsIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJ1c2VybmFtZSI6InRlc3R1c2VyQGV4YW1wbGUuY29tIiwic3NvX2VudGl0eSI6bnVsbCwiaXNfYWRtaW4iOmZhbHNlLCJjbGllbnRfbmFtZSI6IlRlc3QgQ29tcGFueSIsImV4Y2hhbmdlYWJsZSI6dHJ1ZX0.C-RuHDWLpu1bd0_SoZgbkqSqA65egSBigKikeEKXkdK-PRVx4ZUIMdkJd-L4ebeydDHgeq3AwXbDBSqPuXZMTKTFKe1HTvpLycTNkTKa-dp9nTq0VwfUlf3G7QajEJA1UiQ7IhSDZJK5NBkEzs_-PFtPOQjeE2u2AbKKJ_SK3hNi1BVU3uVjfWsMVwGDkVnPIa0aLtYDTYd2QKN5InBGh06XITFD_P_IETfwhw7yG4PvLWGejGQO9jJx1ViFYCQi-O8vLR9-mjwaD8Ngc5O8v3mnzRkkxeWoukSW1p8eWiGf7QaLg-zSI6pNFO3_LO-ILHcJ394GJzW2rSpaAgvxwRHDIulDxJtAbqyxykLgnDSHUZbKq8mgQqkeshbmQ-BUT_nkYj1LcQisNTGp4QsDRdi095QQIXLntJiGC59BxpZQ5y3j67AZHG9qiVuHQSlHBaQKBAFdA_d7CRqV7TzsT4p3cHVXF_VccBM06pItkYYY5Xj0bQPU6qWf26bONnYh1FHOlaejw2mGc_FsPpi0soGUh-1v_Qs6C4N086VJ5uYSHw_M3MNcGBjAahnUdrKNX_8gmbTDwYNw7h1ELPYfBAFeQJrdTOOQPfUHzkt9g67DHdxRDHMQxz933Wxmfl_5fiHWoWE82n5ZA110BZB9JQoP7Tqtg4qIZoE1M6Knh14"}, "access": {"type": "string", "description": "Use this token to access API.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjAxNjI0MjkyLCJqdGkiOiI0Mjk1ZjZhMjI4ZTE0MmE3YjA1ZmIxYjE5MjlhZjZlYyIsInVzZXJfaWQiOjUsInVzZXJfdHlwZSI6ImNvbW1vbiIsInVzZXJfZ3JvdXBzIjpbIkFkbWluaXN0cmF0b3JzIl0sImNsaWVudF9pZCI6MiwiZW1haWwiOiJ0ZXN0dXNlckBleGFtcGxlLmNvbSIsInVzZXJuYW1lIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJzc29fZW50aXR5IjpudWxsLCJpc19hZG1pbiI6ZmFsc2UsImNsaWVudF9uYW1lIjoiVGVzdCBDb21wYW55IiwiZXhjaGFuZ2VhYmxlIjp0cnVlLCJyanRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQifQ.aJjVE3_mC8fimclIPggD0ynh0EIwO8kCEffhFN4CxbaDBGz4R2Xn2mJQqhsRB2YoDCx_oH3uLii6aM_6OQtc2DbIElfN1KHoQmzzEjxKKXlgTOF_gsq9dVwQ9hajeOsQu5ly1rMk41WW1LrQ6Nkb_v6LC8g57Ah4h2pGot44h87BDsG6uUyMFVV3ZTJjkVNWJxceljFeDPO5rhx-ujtkX5iYwAeVh6HAq3I4Sw7OO5LZHF9pnhNBJVRNu8HlBNyk5UVB7uyStc9vjAnjGJyqc4yWL3QVTz7BMtvXX19W6sypl_YQiYzz5dsOiL4dzsI5RERBVt9DtOytSqDNigF_WTVUn0VsmXEK1oDGb8I2AWuAmiKYxizKY2JEOHoUz7B1L87fiPg5fNlv3QDrFJhuy1M6A-72jL1-N4tCGhUCQubvZEv90JshAhc6A5W88ghtjS_W80xt63gpvK81vE9b3coutIBnh-yvzEwTvudm3YKTnRrNBxRT01tdiJVEKoJ1poST0BxzxtGAvW_JgASTcOqQcFR6-Rr5smDSOki_mKVqODbRgcAj7CeNOvrwDZqC2XlQkTLvlo6msNvyVQH8vugRzPsbZK7F3pCvOEB5ub2WY6a1ui7lm-mAVyAs1VbzCHEnLu5GiXmyNE-mlNXQlAS1xz5P751rANnwODJJFz0"}}}}}},
        "400": {"description": "Token refreshing failed.", "content": {"application/json": {"schema": {"anyOf": ["allOf": [{"title": "Validation error", "type": "object", "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "additionalProperties": {"type": "array", "description": "Error list for specific field.", "items": {"type": "string", "description": "Error description"}}}}}, "example": {"errors": {"refresh": ["This field is required."]}}]]}}}}, "401": {"description": "Refresh token is invalid, expired or blacklisted.\nRefresh token is blacklisted if it was already used for refreshing token."}}, "security": []}
  "/iam/auth/jwt/clients/{clientId}/login":
    "get": {"tags": ["Account"], "parameters": [{"name": "clientId", "in": "path", "required": true, "description": "Account ID.", "schema": {"type": "integer"}}], "summary": "Select Account", "description": "Select an account which you want to get access to.", "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "required": ["refresh", "access"], "properties": {"refresh": {"type": "string", "description": "Use this token to refresh the access token via\n[`/auth/jwt/refresh`](POST /auth/jwt/refresh) method.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYwMTcwNzA5MiwianRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQiLCJ1c2VyX2lkIjo1LCJ1c2VyX3R5cGUiOiJjb21tb24iLCJ1c2VyX2dyb3VwcyI6WyJBZG1pbmlzdHJhdG9ycyJdLCJjbGllbnRfaWQiOjIsImVtYWlsIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJ1c2VybmFtZSI6InRlc3R1c2VyQGV4YW1wbGUuY29tIiwic3NvX2VudGl0eSI6bnVsbCwiaXNfYWRtaW4iOmZhbHNlLCJjbGllbnRfbmFtZSI6IlRlc3QgQ29tcGFueSIsImV4Y2hhbmdlYWJsZSI6dHJ1ZX0.C-RuHDWLpu1bd0_SoZgbkqSqA65egSBigKikeEKXkdK-PRVx4ZUIMdkJd-L4ebeydDHgeq3AwXbDBSqPuXZMTKTFKe1HTvpLycTNkTKa-dp9nTq0VwfUlf3G7QajEJA1UiQ7IhSDZJK5NBkEzs_-PFtPOQjeE2u2AbKKJ_SK3hNi1BVU3uVjfWsMVwGDkVnPIa0aLtYDTYd2QKN5InBGh06XITFD_P_IETfwhw7yG4PvLWGejGQO9jJx1ViFYCQi-O8vLR9-mjwaD8Ngc5O8v3mnzRkkxeWoukSW1p8eWiGf7QaLg-zSI6pNFO3_LO-ILHcJ394GJzW2rSpaAgvxwRHDIulDxJtAbqyxykLgnDSHUZbKq8mgQqkeshbmQ-BUT_nkYj1LcQisNTGp4QsDRdi095QQIXLntJiGC59BxpZQ5y3j67AZHG9qiVuHQSlHBaQKBAFdA_d7CRqV7TzsT4p3cHVXF_VccBM06pItkYYY5Xj0bQPU6qWf26bONnYh1FHOlaejw2mGc_FsPpi0soGUh-1v_Qs6C4N086VJ5uYSHw_M3MNcGBjAahnUdrKNX_8gmbTDwYNw7h1ELPYfBAFeQJrdTOOQPfUHzkt9g67DHdxRDHMQxz933Wxmfl_5fiHWoWE82n5ZA110BZB9JQoP7Tqtg4qIZoE1M6Knh14"}, "access": {"type": "string", "description": "Use this token to access API.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjAxNjI0MjkyLCJqdGkiOiI0Mjk1ZjZhMjI4ZTE0MmE3YjA1ZmIxYjE5MjlhZjZlYyIsInVzZXJfaWQiOjUsInVzZXJfdHlwZSI6ImNvbW1vbiIsInVzZXJfZ3JvdXBzIjpbIkFkbWluaXN0cmF0b3JzIl0sImNsaWVudF9pZCI6MiwiZW1haWwiOiJ0ZXN0dXNlckBleGFtcGxlLmNvbSIsInVzZXJuYW1lIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJzc29fZW50aXR5IjpudWxsLCJpc19hZG1pbiI6ZmFsc2UsImNsaWVudF9uYW1lIjoiVGVzdCBDb21wYW55IiwiZXhjaGFuZ2VhYmxlIjp0cnVlLCJyanRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQifQ.aJjVE3_mC8fimclIPggD0ynh0EIwO8kCEffhFN4CxbaDBGz4R2Xn2mJQqhsRB2YoDCx_oH3uLii6aM_6OQtc2DbIElfN1KHoQmzzEjxKKXlgTOF_gsq9dVwQ9hajeOsQu5ly1rMk41WW1LrQ6Nkb_v6LC8g57Ah4h2pGot44h87BDsG6uUyMFVV3ZTJjkVNWJxceljFeDPO5rhx-ujtkX5iYwAeVh6HAq3I4Sw7OO5LZHF9pnhNBJVRNu8HlBNyk5UVB7uyStc9vjAnjGJyqc4yWL3QVTz7BMtvXX19W6sypl_YQiYzz5dsOiL4dzsI5RERBVt9DtOytSqDNigF_WTVUn0VsmXEK1oDGb8I2AWuAmiKYxizKY2JEOHoUz7B1L87fiPg5fNlv3QDrFJhuy1M6A-72jL1-N4tCGhUCQubvZEv90JshAhc6A5W88ghtjS_W80xt63gpvK81vE9b3coutIBnh-yvzEwTvudm3YKTnRrNBxRT01tdiJVEKoJ1poST0BxzxtGAvW_JgASTcOqQcFR6-Rr5smDSOki_mKVqODbRgcAj7CeNOvrwDZqC2XlQkTLvlo6msNvyVQH8vugRzPsbZK7F3pCvOEB5ub2WY6a1ui7lm-mAVyAs1VbzCHEnLu5GiXmyNE-mlNXQlAS1xz5P751rANnwODJJFz0"}}}}}}, "401": {"description": "Authentication credentials were not provided or given token not valid for any token type."}, "403": {"description": "You do not have permission to perform this action."}, "404": {"description": "Account not found."}}}
  "/iam/clients/create":
    "post": {"tags": ["Account"], "summary": "Create Account", "description": "Create an additional account for the current user.", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "required": ["company"], "properties": {"id": {"type": "integer", "description": "The ID of the created account.", "readOnly": true}, "company": {"type": "string", "description": "The company name."}}}}}}, "responses": {"201": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "required": ["company"], "properties": {"id": {"type": "integer", "description": "The ID of the created account.", "readOnly": true}, "company": {"type": "string", "description": "The company name."}}}}}}, "400": {"description": "Account creation failed.", "content": {"application/json": {"schema": {"anyOf": ["allOf": [{"title": "Validation error", "type": "object", "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "additionalProperties": {"type": "array", "description": "Error list for specific field.", "items": {"type": "string", "description": "Error description"}}}}}, "example": {"errors": {"company": ["Company with this name already exists"]}}]]}}}}, "401": {"description": "Authentication credentials were not provided or given token not valid for any token type."}, "403": {"description": "You do not have permission to perform this action."}}}
  "/iam/clients/me":
    "get": {"tags": ["Account"], "summary": "Account Details", "description": "Get information about your profile, users and other account details.", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"type": "object", "required": ["id", "email", "name", "status", "companyName", "deleted", "is_test", "has_active_admin", "currentUser", "capabilities", "serviceStatuses", "paidFeatures", "freeFeatures", "entryBaseDomain", "bill_type"], "properties": {"id": {"type": "integer", "description": "The account ID."}, "users": {"type": "array", "description": "List of account users.", "items": {"type": "object", "properties": {"id": {"type": "integer", "description": "User's ID.", "readOnly": true}, "email": {"type": "string", "format": "email", "description": "User's email address."}, "name": {"type": "string", "description": "User's name.", "nullable": true}, "lang": {"type": "string", "description": "User's language.\n\nDefines language of the control panel and email messages.", "enum": ["de", "en", "ru", "zh", "az"]}, "phone": {"type": "string", "description": "User's phone.", "nullable": true}, "company": {"type": "string", "description": "User's company."}, "reseller": {"type": "integer", "description": "Services provider ID.", "readOnly": true}, "client": {"type": "number", "description": "User's account ID.", "readOnly": true}, "deleted": {"type": "boolean", "description": "Deletion flag. If `true` then user was deleted.", "readOnly": true}, "groups": {"type": "array", "description": "User's group in the current account.\n\nIAM supports 5 groups:\n\n - Users\n- Administrators\n- Engineers\n- Purge and Prefetch only (API)\n- Purge and Prefetch only (API+Web)", "items": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}, "activated": {"type": "boolean", "description": "Email confirmation:\n- `true` – user confirmed the email;\n- `false` – user did not confirm the email.", "readOnly": true}, "sso_auth": {"type": "boolean", "description": "SSO authentication flag. If `true` then user can login via SAML SSO.", "readOnly": true}, "two_fa": {"type": "boolean", "description": "Two-step verification:\n- `true` – user enabled two-step verification;\n- `false` – user disabled two-step verification.", "readOnly": true}, "auth_types": {"type": "array", "items": {"type": "string", "description": "Auth types.", "enum": ["password", "sso", "github", "google-oauth2"]}, "description": "System field. List of auth types available for the account."}}}}, "email": {"type": "string", "format": "email", "description": "The account email."}, "phone": {"type": "string", "description": "Phone of a user who registered the requested account.", "nullable": true}, "name": {"type": "string", "description": "Name of a user who registered the requested account.", "nullable": true}, "status": {"type": "string", "description": "Status of the account.", "enum": ["new", "trial", "trialend", "active", "integration", "paused", "preparation", "ready"]}, "companyName": {"type": "string", "description": "The company name."}, "website": {"type": "string", "description": "The company website."}, "currentUser": {"type": "integer", "description": "ID of the current user."}, "capabilities": {"type": "array", "items": {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}, "description": "System field. List of services available for the account."}, "serviceStatuses": {"type": "object", "description": "An object of arrays which contains information about all services available for the requested account.", "properties": {"CDN": {"type": "object", "properties": {"status": {
                            "type": "string", "description": "Status of the service.", "enum": ["new", "trial", "trialend", "active", "paused", "activating", "deleted"]}, "enabled": {"type": "boolean", "description": "`true` - service is available in the Control Panel."}}}, "CLOUD": {"type": "object", "properties": {"status": {"type": "string", "description": "Status of the service.", "enum": ["new", "trial", "trialend", "active", "paused", "activating", "deleted"]}, "enabled": {"type": "boolean", "description": "`true` - service is available in the Control Panel."}}}, "DDOS": {"type": "object", "properties": {"status": {"type": "string", "description": "Status of the service.", "enum": ["new", "trial", "trialend", "active", "paused", "activating", "deleted"]}, "enabled": {"type": "boolean", "description": "`true` - service is available in the Control Panel."}}}, "DNS": {"type": "object", "properties": {"status": {"type": "string", "description": "Status of the service.", "enum": ["new", "trial", "trialend", "active", "paused", "activating", "deleted"]}, "enabled": {"type": "boolean", "description": "`true` - service is available in the Control Panel."}}}, "STORAGE": {"type": "object", "properties": {"status": {"type": "string", "description": "Status of the service.", "enum": ["new", "trial", "trialend", "active", "paused", "activating", "deleted"]}, "enabled": {"type": "boolean", "description": "`true` - service is available in the Control Panel."}}}, "STREAMING": {"type": "object", "properties": {"status": {"type": "string", "description": "Status of the service.", "enum": ["new", "trial", "trialend", "active", "paused", "activating", "deleted"]}, "enabled": {"type": "boolean", "description": "`true` - service is available in the Control Panel."}}}}}, "paidFeatures": {"type": "object", "description": "An object of arrays which contains information about paid features available for the requested account.", "properties": {"CDN": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "paid_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "CLOUD": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "paid_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "DDOS": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "paid_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "DNS": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature
                                ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "paid_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "STORAGE": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "paid_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "STREAMING": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "paid_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}}, "example": {"CDN": [{"feature_id": 1, "name": "paid feature name", "service": "CDN"}], "STREAMING": [{"feature_id": 2, "name": "another paid feature name", "service": "STREAMING"}]}}, "freeFeatures": {"type": "object", "description": "An object of arrays which contains information about free features available for the requested account.", "properties": {"CDN": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "free_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "CLOUD": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "free_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "DDOS": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC
                                3339 format)."}, "free_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "DNS": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "free_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "STORAGE": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "free_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}, "STREAMING": {"type": "array", "items": {"type": "object", "description": "Feature object.", "properties": {"feature_id": {"type": "integer", "description": "Feature ID."}, "service": {"allOf": ["description": "Name of a service which the feature belongs to.", {"type": "string", "description": "Service's name.", "enum": ["CDN", "STORAGE", "STREAMING", "DNS", "DDOS", "CLOUD"]}]}, "name": {"type": "string", "description": "Name of the feature."}, "create_date": {"type": "string", "description": "Date and time when the feature was activated (ISO 8086/RFC 3339 format)."}, "free_feature_id": {"type": "integer", "description": "Internal feature activation ID."}}}}}, "example": {"CDN": [{"feature_id": 1, "name": "free feature name", "service": "CDN"}], "STREAMING": [{"feature_id": 2, "name": "another free feature name", "service": "STREAMING"}]}}, "entryBaseDomain": {"type": "string", "nullable": true, "description": "System field. Control panel domain."}, "signup_process": {"type": "string", "nullable": true, "description": "System field. Type of the account registration process.", "enum": ["sign_up_full", "sign_up_simple"]}, "deleted": {"type": "boolean", "description": "The field shows the status of the account:\n- `true` – the account has been deleted\n- `false` – the account is not deleted", "readOnly": true}, "bill_type": {"type": "string", "description": "System field. Billing type of the account."}, "custom_id": {"type": "string", "nullable": true, "description": "The account custom ID."}, "country_code": {"type": "string", "description": "System field. The company country (ISO 3166-1 alpha-2 format)."}, "is_test": {"type": "boolean", "description": "System field:\n- `true` — a test account;\n- `false` — a production account."}, "has_active_admin": {"type": "boolean", "description": "System field."}}}}}}, "401": {"description": "Authentication credentials were not provided or given token not valid for any token type."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\naccount_overview = client.iam.get_account_overview()\nprint(account_overview.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  accountOverview, err := client.Iam.GetAccountOverview(context.TODO())\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", accountOverview.ID)\n}\n"}]}
  "/iam/auth/password/forgot":
    "post": {"tags": ["Account"], "summary": "Password Recovery", "description": "Recover your password in case you forgot it.\n\nYour password recovery link will be sent to your email. If you didn't receive an email, ensure that you have\nan account associated with a specified email, then check the spam folder.\n\nIf it does not help, contact us at support@gcore.com.", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "required": ["email"], "properties": {"email": {"type": "string", "format": "email", "description": "User's email address."}}}}}}, "responses": {"200": {"description": "OK.", "content": {"application/json": {"example": {"status": "sent"}}}}, "400": {"description": "Password recovery failed.", "content": {"application/json": {"schema": {"anyOf": ["allOf": [{"title": "Validation error", "type": "object", "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "additionalProperties": {"type": "array", "description": "Error list for specific field.", "items": {"type": "string", "description": "Error description"}}}}}, "example": {"errors": {"email": ["This field is required."]}}]]}}}}}}
  "/iam/users/{userId}/password":
    "put": {"tags": ["Account"], "parameters": [{"name": "userId", "in": "path", "required": true, "description": "User's ID.", "schema": {"type": "integer"}}], "summary": "Password Change", "description": "Reset your password.", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"old": {"type": "string", "description": "Your old password."}, "new": {"type": "string", "description": "Your new password."}, "double": {"type": "string", "description": "Confirm your new password."}}, "required": ["old", "new", "double"]}}}}, "responses": {"200": {"description": "Password was successfully changed.", "content": {"application/json": {"schema": {"type": "object", "required": ["refresh", "access"], "properties": {"refresh": {"type": "string", "description": "Use this token to refresh the access token via\n[`/auth/jwt/refresh`](POST /auth/jwt/refresh) method.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYwMTcwNzA5MiwianRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQiLCJ1c2VyX2lkIjo1LCJ1c2VyX3R5cGUiOiJjb21tb24iLCJ1c2VyX2dyb3VwcyI6WyJBZG1pbmlzdHJhdG9ycyJdLCJjbGllbnRfaWQiOjIsImVtYWlsIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJ1c2VybmFtZSI6InRlc3R1c2VyQGV4YW1wbGUuY29tIiwic3NvX2VudGl0eSI6bnVsbCwiaXNfYWRtaW4iOmZhbHNlLCJjbGllbnRfbmFtZSI6IlRlc3QgQ29tcGFueSIsImV4Y2hhbmdlYWJsZSI6dHJ1ZX0.C-RuHDWLpu1bd0_SoZgbkqSqA65egSBigKikeEKXkdK-PRVx4ZUIMdkJd-L4ebeydDHgeq3AwXbDBSqPuXZMTKTFKe1HTvpLycTNkTKa-dp9nTq0VwfUlf3G7QajEJA1UiQ7IhSDZJK5NBkEzs_-PFtPOQjeE2u2AbKKJ_SK3hNi1BVU3uVjfWsMVwGDkVnPIa0aLtYDTYd2QKN5InBGh06XITFD_P_IETfwhw7yG4PvLWGejGQO9jJx1ViFYCQi-O8vLR9-mjwaD8Ngc5O8v3mnzRkkxeWoukSW1p8eWiGf7QaLg-zSI6pNFO3_LO-ILHcJ394GJzW2rSpaAgvxwRHDIulDxJtAbqyxykLgnDSHUZbKq8mgQqkeshbmQ-BUT_nkYj1LcQisNTGp4QsDRdi095QQIXLntJiGC59BxpZQ5y3j67AZHG9qiVuHQSlHBaQKBAFdA_d7CRqV7TzsT4p3cHVXF_VccBM06pItkYYY5Xj0bQPU6qWf26bONnYh1FHOlaejw2mGc_FsPpi0soGUh-1v_Qs6C4N086VJ5uYSHw_M3MNcGBjAahnUdrKNX_8gmbTDwYNw7h1ELPYfBAFeQJrdTOOQPfUHzkt9g67DHdxRDHMQxz933Wxmfl_5fiHWoWE82n5ZA110BZB9JQoP7Tqtg4qIZoE1M6Knh14"}, "access": {"type": "string", "description": "Use this token to access API.", "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjAxNjI0MjkyLCJqdGkiOiI0Mjk1ZjZhMjI4ZTE0MmE3YjA1ZmIxYjE5MjlhZjZlYyIsInVzZXJfaWQiOjUsInVzZXJfdHlwZSI6ImNvbW1vbiIsInVzZXJfZ3JvdXBzIjpbIkFkbWluaXN0cmF0b3JzIl0sImNsaWVudF9pZCI6MiwiZW1haWwiOiJ0ZXN0dXNlckBleGFtcGxlLmNvbSIsInVzZXJuYW1lIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJzc29fZW50aXR5IjpudWxsLCJpc19hZG1pbiI6ZmFsc2UsImNsaWVudF9uYW1lIjoiVGVzdCBDb21wYW55IiwiZXhjaGFuZ2VhYmxlIjp0cnVlLCJyanRpIjoiMGFmOGU3NTMzYWEyNDM0YmI4M2NmMjA1ZWM2NTMwZjQifQ.aJjVE3_mC8fimclIPggD0ynh0EIwO8kCEffhFN4CxbaDBGz4R2Xn2mJQqhsRB2YoDCx_oH3uLii6aM_6OQtc2DbIElfN1KHoQmzzEjxKKXlgTOF_gsq9dVwQ9hajeOsQu5ly1rMk41WW1LrQ6Nkb_v6LC8g57Ah4h2pGot44h87BDsG6uUyMFVV3ZTJjkVNWJxceljFeDPO5rhx-ujtkX5iYwAeVh6HAq3I4Sw7OO5LZHF9pnhNBJVRNu8HlBNyk5UVB7uyStc9vjAnjGJyqc4yWL3QVTz7BMtvXX19W6sypl_YQiYzz5dsOiL4dzsI5RERBVt9DtOytSqDNigF_WTVUn0VsmXEK1oDGb8I2AWuAmiKYxizKY2JEOHoUz7B1L87fiPg5fNlv3QDrFJhuy1M6A-72jL1-N4tCGhUCQubvZEv90JshAhc6A5W88ghtjS_W80xt63gpvK81vE9b3coutIBnh-yvzEwTvudm3YKTnRrNBxRT01tdiJVEKoJ1poST0BxzxtGAvW_JgASTcOqQcFR6-Rr5smDSOki_mKVqODbRgcAj7CeNOvrwDZqC2XlQkTLvlo6msNvyVQH8vugRzPsbZK7F3pCvOEB5ub2WY6a1ui7lm-mAVyAs1VbzCHEnLu5GiXmyNE-mlNXQlAS1xz5P751rANnwODJJFz0"}}}}}}, "400": {"description": "Password change failed.", "content": {"application/json": {"schema": {"anyOf": ["allOf": [{"title": "Validation error", "type": "object", "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "additionalProperties": {"type": "array", "description": "Error list for specific field.", "items": {"type": "string", "description": "Error description"}}}}}, "example": {"errors": {"old": ["Old password is incorrect"], "new": ["New and double values don't match"]}}]]}}}}, "401": {"description": "Authentication credentials were not provided or given token not valid for any token type."}, "403": {"description": "You do not have permission to perform this
            action."}}}
  "/iam/activity_log/logins":
    "get": {"tags": ["Account"], "summary": "Last Login Time", "description": "Information about the account's last login time.", "parameters": [{"name": "limit", "in": "query", "description": "The maximum number of items.", "schema": {"type": "integer", "x-stainless-skip": ["terraform"]}}, {"name": "offset", "in": "query", "description": "Offset relative to the beginning of list.", "schema": {"type": "integer"}}], "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "required": ["count", "result"], "properties": {"count": {"type": "number", "description": "Total number of users"}, "next": {"type": "string", "description": "URL to the next users slice", "example": "/activity_log/logins?offset=20&limit=10"}, "previous": {"type": "string", "description": "URL to the previous users slice", "example": "/activity_log/logins?offset=10&limit=10"}, "result": {"items": {"type": "object", "required": ["id", "login_at", "ip_address", "user_agent", "is_successful", "auth_type", "user"], "properties": {"id": {"type": "integer", "description": "The account ID.", "example": 123456}, "login_at": {"type": "string", "description": "ISO 8086/RFC 3339 format", "example": "2024-11-13 15:23:30+00:00"}, "ip_address": {"type": "string", "description": "IP Address", "example": "192.168.1.1"}, "user_agent": {"type": "string", "description": "User-Agent", "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.5993.88 Safari/537.36"}, "is_successful": {"type": "boolean", "description": "Successful login or not", "example": true}, "auth_type": {"type": "string", "description": "Describes the type of authentication", "example": "OAUTH"}, "user": {"type": "integer", "description": "UserID", "example": 123456}}}}}}}}}, "400": {"description": "Validation error", "content": {"application/json": {"schema": {"anyOf": [{"title": "Validation error", "type": "object", "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "additionalProperties": {"type": "array", "description": "Error list for specific field.", "items": {"type": "string", "description": "Error description"}}}}}, {"title": "Invalid request JSON schema", "type": "object", "properties": {"message": {"type": "string", "description": "This message describes error if json schema from your request is invalid.", "example": "JSON parse error - Expecting ',' delimiter: line 3 column 33 (char 77)\n"}}}]}}}}, "403": {"description": "You do not have permission to perform this action."}, "404": {"description": "Not found."}}}
  "/iam/users":
    "get": {"tags": ["Users"], "summary": "Get users", "description": "Get a list of users.\n\nPass a value for the `limit` parameter in your request if you want retrieve a paginated result.\nOtherwise API returns a list with all users without pagination.", "parameters": [{"name": "limit", "in": "query", "description": "The maximum number of items.", "schema": {"type": "integer", "x-stainless-skip": ["terraform"]}}, {"name": "offset", "in": "query", "description": "Offset relative to the beginning of list.", "schema": {"type": "integer"}}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"type": "object", "properties": {"count": {"type": "number", "description": "Total number of users"}, "next": {"type": "string", "description": "URL to the next users slice", "example": "/users?offset=20&limit=10"}, "previous": {"type": "string", "description": "URL to the previous users slice", "example": "/users?offset=10&limit=10"}, "results": {"type": "array", "items": {"allOf": [{"type": "object", "properties": {"id": {"type": "integer", "description": "User's ID.", "readOnly": true}, "email": {"type": "string", "format": "email", "description": "User's email address."}, "name": {"type": "string", "description": "User's name.", "nullable": true}, "lang": {"type": "string", "description": "User's language.\n\nDefines language of the control panel and email messages.", "enum": ["de", "en", "ru", "zh", "az"]}, "phone": {"type": "string", "description": "User's phone.", "nullable": true}, "company": {"type": "string", "description": "User's company."}, "reseller": {"type": "integer", "description": "Services provider ID.", "readOnly": true}, "client": {"type": "number", "description": "User's account ID.", "readOnly": true}, "deleted": {"type": "boolean", "description": "Deletion flag. If `true` then user was deleted.", "readOnly": true}, "groups": {"type": "array", "description": "User's group in the current account.\n\nIAM supports 5 groups:\n\n - Users\n- Administrators\n- Engineers\n- Purge and Prefetch only (API)\n- Purge and Prefetch only (API+Web)", "items": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}, "activated": {"type": "boolean", "description": "Email confirmation:\n- `true` – user confirmed the email;\n- `false` – user did not confirm the email.", "readOnly": true}, "sso_auth": {"type": "boolean", "description": "SSO authentication flag. If `true` then user can login via SAML SSO.", "readOnly": true}, "two_fa": {"type": "boolean", "description": "Two-step verification:\n- `true` – user enabled two-step verification;\n- `false` – user disabled two-step verification.", "readOnly": true}, "auth_types": {"type": "array", "items": {"type": "string", "description": "Auth types.", "enum": ["password", "sso", "github", "google-oauth2"]}, "description": "System field. List of auth types available for the account."}}}, {"type": "object", "properties": {"user_type": {"type": "string", "description": "User's type.", "enum": ["common"], "readOnly": true}, "email": {"type": "string", "format": "email", "description": "User's email address.", "readOnly": true}}}]}}}}}}}, "401": {"description": "Authentication credentials were not provided or given token not valid for any token type."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.iam.users.list()\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/iam\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main()
            {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Iam.Users.List(context.TODO(), iam.UserListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/iam/users/{userId}":
    "get": {"tags": ["Users"], "summary": "Get user's details", "parameters": [{"name": "userId", "in": "path", "required": true, "description": "User's ID.", "schema": {"type": "integer"}}], "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "required": ["id", "email", "name", "lang", "phone", "company", "reseller", "client", "deleted", "groups", "activated", "sso_auth", "two_fa", "auth_types", "user_type", "is_active", "client_and_roles"], "properties": {"id": {"type": "integer", "description": "User's ID.", "readOnly": true}, "email": {"type": "string", "format": "email", "description": "User's email address."}, "name": {"type": "string", "description": "User's name.", "nullable": true}, "lang": {"type": "string", "description": "User's language.\n\nDefines language of the control panel and email messages.", "enum": ["de", "en", "ru", "zh", "az"]}, "phone": {"type": "string", "description": "User's phone.", "nullable": true}, "company": {"type": "string", "description": "User's company."}, "reseller": {"type": "integer", "description": "Services provider ID.", "readOnly": true}, "client": {"type": "number", "description": "User's account ID.", "readOnly": true}, "deleted": {"type": "boolean", "description": "Deletion flag. If `true` then user was deleted.", "readOnly": true}, "groups": {"type": "array", "description": "User's group in the current account.\n\nIAM supports 5 groups:\n\n - Users\n- Administrators\n- Engineers\n- Purge and Prefetch only (API)\n- Purge and Prefetch only (API+Web)", "items": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}, "activated": {"type": "boolean", "description": "Email confirmation:\n- `true` – user confirmed the email;\n- `false` – user did not confirm the email.", "readOnly": true}, "sso_auth": {"type": "boolean", "description": "SSO authentication flag. If `true` then user can login via SAML SSO.", "readOnly": true}, "two_fa": {"type": "boolean", "description": "Two-step verification:\n- `true` – user enabled two-step verification;\n- `false` – user disabled two-step verification.", "readOnly": true}, "auth_types": {"type": "array", "items": {"type": "string", "description": "Auth types.", "enum": ["password", "sso", "github", "google-oauth2"]}, "description": "System field. List of auth types available for the account."}, "user_type": {"type": "string", "description": "User's type.", "enum": ["common", "reseller", "seller"], "readOnly": true}, "is_active": {"type": "boolean", "description": "User activity flag.", "readOnly": true}, "client_and_roles": {"type": "array", "description": "List of user's clients. User can access to one or more clients.", "readOnly": true, "items": {"required": ["client_company_name", "client_id", "user_id", "user_roles"], "type": "object", "properties": {"client_id": {"type": "integer"}, "client_company_name": {"type": "string"}, "user_roles": {"type": "array", "description": "User role in this client.", "example": ["2"], "items": {"type": "string", "description": "String representation of role id."}}, "user_id": {"type": "integer", "description": "User's ID."}}}}}}}}}, "401": {"description": "Authentication credentials were not provided or given token not valid for any token type."}, "404": {"description": "User not found."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nuser_detailed = client.iam.users.get(\n    0,\n)\nprint(user_detailed.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc
            main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  userDetailed, err := client.Iam.Users.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", userDetailed.ID)\n}\n"}]}
    "patch": {"tags": ["Users"], "summary": "Update user's details", "description": "This method updates user's details.", "parameters": [{"name": "userId", "in": "path", "required": true, "description": "User's ID.", "schema": {"type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"allOf": ["allOf": [{"type": "object", "properties": {"id": {"type": "integer", "description": "User's ID.", "readOnly": true}, "email": {"type": "string", "format": "email", "description": "User's email address."}, "name": {"type": "string", "description": "User's name.", "nullable": true}, "lang": {"type": "string", "description": "User's language.\n\nDefines language of the control panel and email messages.", "enum": ["de", "en", "ru", "zh", "az"]}, "phone": {"type": "string", "description": "User's phone.", "nullable": true}, "company": {"type": "string", "description": "User's company."}, "reseller": {"type": "integer", "description": "Services provider ID.", "readOnly": true}, "client": {"type": "number", "description": "User's account ID.", "readOnly": true}, "deleted": {"type": "boolean", "description": "Deletion flag. If `true` then user was deleted.", "readOnly": true}, "groups": {"type": "array", "description": "User's group in the current account.\n\nIAM supports 5 groups:\n\n - Users\n- Administrators\n- Engineers\n- Purge and Prefetch only (API)\n- Purge and Prefetch only (API+Web)", "items": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}, "activated": {"type": "boolean", "description": "Email confirmation:\n- `true` – user confirmed the email;\n- `false` – user did not confirm the email.", "readOnly": true}, "sso_auth": {"type": "boolean", "description": "SSO authentication flag. If `true` then user can login via SAML SSO.", "readOnly": true}, "two_fa": {"type": "boolean", "description": "Two-step verification:\n- `true` – user enabled two-step verification;\n- `false` – user disabled two-step verification.", "readOnly": true}, "auth_types": {"type": "array", "items": {"type": "string", "description": "Auth types.", "enum": ["password", "sso", "github", "google-oauth2"]}, "description": "System field. List of auth types available for the account."}}}, {"type": "object", "properties": {"user_type": {"type": "string", "description": "User's type.", "enum": ["common"], "readOnly": true}, "email": {"type": "string", "format": "email", "description": "User's email address.", "readOnly": true}}}]]}}}}, "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "required": ["id", "email", "name", "lang", "phone", "company", "reseller", "client", "deleted", "groups", "activated", "sso_auth", "two_fa", "auth_types", "user_type", "is_active", "client_and_roles"], "properties": {"id": {"type": "integer", "description": "User's ID.", "readOnly": true}, "email": {"type": "string", "format": "email", "description": "User's email address."}, "name": {"type": "string", "description": "User's name.", "nullable": true}, "lang": {"type": "string", "description": "User's language.\n\nDefines language of the control panel and email messages.", "enum": ["de", "en", "ru", "zh", "az"]}, "phone": {"type": "string", "description": "User's phone.", "nullable": true}, "company": {"type": "string", "description": "User's company."}, "reseller": {"type": "integer", "description": "Services provider ID.", "readOnly": true}, "client": {"type": "number", "description": "User's account ID.", "readOnly": true}, "deleted": {"type": "boolean", "description": "Deletion flag. If `true` then user was deleted.", "readOnly": true}, "groups": {"type": "array", "description": "User's group
                      in the current account.\n\nIAM supports 5 groups:\n\n - Users\n- Administrators\n- Engineers\n- Purge and Prefetch only (API)\n- Purge and Prefetch only (API+Web)", "items": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}, "activated": {"type": "boolean", "description": "Email confirmation:\n- `true` – user confirmed the email;\n- `false` – user did not confirm the email.", "readOnly": true}, "sso_auth": {"type": "boolean", "description": "SSO authentication flag. If `true` then user can login via SAML SSO.", "readOnly": true}, "two_fa": {"type": "boolean", "description": "Two-step verification:\n- `true` – user enabled two-step verification;\n- `false` – user disabled two-step verification.", "readOnly": true}, "auth_types": {"type": "array", "items": {"type": "string", "description": "Auth types.", "enum": ["password", "sso", "github", "google-oauth2"]}, "description": "System field. List of auth types available for the account."}, "user_type": {"type": "string", "description": "User's type.", "enum": ["common", "reseller", "seller"], "readOnly": true}, "is_active": {"type": "boolean", "description": "User activity flag.", "readOnly": true}, "client_and_roles": {"type": "array", "description": "List of user's clients. User can access to one or more clients.", "readOnly": true, "items": {"required": ["client_company_name", "client_id", "user_id", "user_roles"], "type": "object", "properties": {"client_id": {"type": "integer"}, "client_company_name": {"type": "string"}, "user_roles": {"type": "array", "description": "User role in this client.", "example": ["2"], "items": {"type": "string", "description": "String representation of role id."}}, "user_id": {"type": "integer", "description": "User's ID."}}}}}}}}}, "400": {"description": "Update user's details failed.", "content": {"application/json": {"schema": {"anyOf": ["allOf": [{"title": "Validation error", "type": "object", "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "additionalProperties": {"type": "array", "description": "Error list for specific field.", "items": {"type": "string", "description": "Error description"}}}}}, "example": {"errors": {"groups": "Group matching query does not exist."}}], {"title": "Invalid request JSON schema", "type": "object", "properties": {"message": {"type": "string", "description": "This message describes error if json schema from your request is invalid.", "example": "JSON parse error - Expecting ',' delimiter: line 3 column 33 (char 77)\n"}}}]}}}}, "403": {"description": "The specified user has issued a token with a higher role. Try using another role."}, "404": {"description": "User not found."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nuser_update = client.iam.users.update(\n    user_id=0,\n)\nprint(user_update.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/iam\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  userUpdate, err := client.Iam.Users.Update(\n    context.TODO(),\n    0,\n    iam.UserUpdateParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", userUpdate.ID)\n}\n"}]}
  "/iam/users/{userId}/email":
    "put": {"tags": ["Users"], "summary": "Update User email", "description": "Route for update user's email address", "parameters": [{"name": "userId", "in": "path", "required": true, "description": "User's ID.", "schema": {"type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "required": ["new_email", "password"], "properties": {"new_email": {"type": "string", "description": "User's new email."}, "password": {"type": "string", "description": "User's password for approve."}}}}}}, "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"type": "object", "properties": {"new_email": {"type": "string", "description": "User's new email."}}}}}}, "400": {"description": "Email update failed.", "content": {"application/json": {"schema": {"anyOf": [{"title": "Same email address.", "description": "Tried to update email address with same email.", "type": "array", "items": {"type": "object", "properties": {"errors": {"type": "object", "properties": {"new_email": {"type": "string", "description": "Same email address."}}}}}}, {"title": "Invalid email address.", "description": "Tried to update email address with invalid email.", "type": "array", "items": {"type": "object", "properties": {"errors": {"type": "object", "properties": {"new_email": {"type": "string", "description": "Enter a valid email address"}}}}}}, {"title": "User with email already exists.", "description": "Tried to update email address with invalid email.", "type": "array", "items": {"type": "object", "properties": {"errors": {"type": "object", "properties": {"new_email": {"type": "string", "description": "Client with email {`new_email`} already exists."}}}}}}, {"title": "Password is incorrect.", "description": "Password is incorrect.", "type": "array", "items": {"type": "object", "properties": {"errors": {"type": "object", "properties": {"password": {"type": "string", "description": "Password is incorrect."}}}}}}]}}}}, "401": {"description": "Authentication credentials were not provided or given token not valid for any token type."}}}
  "/iam/clients/invite_user":
    "post": {"tags": ["Users"], "summary": "Invite new user", "description": "Invite a user to the account.\n\nUser will receive an email.\nThe new user will receive an invitation email with a link to create an account password,\nthe existing user will be notified about the invitation to the account.", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"email": {"type": "string", "format": "email", "description": "User email."}, "user_role": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}, "client_id": {"type": "integer", "description": "ID of account."}, "lang": {"type": "string", "description": "User's language.\n\nDefines language of the control panel and email messages.", "enum": ["de", "en", "ru", "zh", "az"]}, "name": {"type": "string", "description": "User name."}}, "required": ["email", "user_role", "client_id"]}}}}, "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "required": ["status", "user_id"], "properties": {"status": {"type": "string", "description": "Status of the invitation."}, "user_id": {"type": "integer", "description": "Invited user ID."}}}, "example": {"status": "sent", "user_id": 19449}}}}, "400": {"description": "Validation error.", "content": {"application/json": {"schema": {"anyOf": ["allOf": [{"title": "Validation error", "type": "object", "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "additionalProperties": {"type": "array", "description": "Error list for specific field.", "items": {"type": "string", "description": "Error description"}}}}}, "example": {"errors": {"email": ["This field is required"]}}], {"title": "User has already been invited", "description": "The specified user has already been invited to the specified account.", "type": "array", "items": {"type": "string", "enum": ["User {user ID} has already been invited to client {account ID}"]}}, {"title": "User cannot be added", "description": "The specified user cannot be added to the specified account.", "type": "array", "items": {"type": "string", "enum": ["This user cannot be added to this client."]}}]}}}}, "401": {"description": "Authentication credentials were not provided or given token not valid for any token type."}, "403": {"description": "You do not have permission to perform this action."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nuser_invite = client.iam.users.invite(\n    client_id=0,\n    email=\"dev@stainless.com\",\n    user_role={},\n)\nprint(user_invite.user_id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/iam\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  userInvite, err := client.Iam.Users.Invite(context.TODO(), iam.UserInviteParams{\n    ClientID: 0,\n    Email: \"dev@stainless.com\",\n    UserRole: iam.UserInviteParamsUserRole{\n\n    },\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", userInvite.UserID)\n}\n"}]}
  "/iam/clients/{clientId}/client-users/{userId}":
    "get": {"tags": ["Users"], "summary": "Get user's group", "description": "Returns user's group in the specified account.", "parameters": [{"name": "userId", "in": "path", "required": true, "description": "User's ID.", "schema": {"type": "integer"}}, {"name": "clientId", "in": "path", "required": true, "description": "Account ID.", "schema": {"type": "integer"}}], "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "description": "User's group.", "properties": {"user_role": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}}}}}, "403": {"description": "You do not have permission for the specified account to perform this action."}, "404": {"description": "User is not found in the specified account."}}}
    "put": {"tags": ["Users"], "summary": "Change user's group", "parameters": [{"name": "userId", "in": "path", "required": true, "description": "User's ID.", "schema": {"type": "integer"}}, {"name": "clientId", "in": "path", "required": true, "description": "Account ID.", "schema": {"type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "description": "User's group.", "properties": {"user_role": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}}}}}, "responses": {"204": {"description": "The user's group has been successfully changed."}, "400": {"description": "Validation error", "content": {"application/json": {"schema": {"type": "object", "example": {"errors": {"user_role": ["Invalid role: OrderedDict([('id', 100), ('name', 'Fake role')])"]}}, "properties": {"errors": {"type": "object", "description": "This object contains error descriptions per field from your request.", "properties": {"property_name": {"type": "array", "items": {"type": "string"}, "description": "Error list for a specific field."}}}}}}}}, "403": {"description": "You do not have permission for the specified account to perform this action."}, "404": {"description": "User is not found in the specified account."}}}
    "delete": {"tags": ["Users"], "summary": "Revoke user's access to account", "description": "Revokes user's access to the specified account. If the specified user doesn't have access to multiple accounts, the user is deleted.", "parameters": [{"name": "userId", "in": "path", "required": true, "description": "User's ID.", "schema": {"type": "integer"}}, {"name": "clientId", "in": "path", "required": true, "description": "Account ID.", "schema": {"type": "integer"}}], "responses": {"200": {"description": "The user's access has been successfully revoked."}, "403": {"description": "You do not have permission to perform this action.", "content": {"application/json": {"schema": {"anyOf": [{"title": "You do not have permission for the specified account to perform this action.", "type": "object", "example": {"message": "You do not have permission to perform this action."}}, {"title": "The specified user has API tokens.", "type": "object", "properties": {"message": {"type": "string", "description": "The specified user has API tokens.\nPlease [delete API tokens](DELETE /clients/{clientId}/tokens/{tokenId}) before the user deleting."}}, "example": {"message": "You can't remove the user as they have active tokens"}}]}}}}, "404": {"description": "User is not found in the specified account."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.iam.users.delete(\n    user_id=0,\n    client_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/iam\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Iam.Users.Delete(\n    context.TODO(),\n    0,\n    iam.UserDeleteParams{\n      ClientID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/iam/clients/{clientId}/tokens":
    "get": {"tags": ["API Tokens"], "summary": "Get All API Tokens", "description": "Get information about your permanent API tokens in the account.\nA user with the Administrators role gets information about all API tokens in the account.", "parameters": [{"name": "clientId", "in": "path", "required": true, "description": "Account ID.", "schema": {"type": "integer"}}, {"name": "role", "in": "query", "required": false, "description": "Group's ID. Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)\n\nExample, *&role=Engineers*", "schema": {"type": "string"}}, {"name": "issued_by", "in": "query", "required": false, "description": "User's ID. Use to get API tokens issued by a particular user.   \n Example, *&`issued_by`=1234*", "schema": {"type": "integer"}}, {"name": "not_issued_by", "in": "query", "required": false, "description": "User's ID. Use to get API tokens issued by anyone except a particular user.   \n Example, *¬_issued_by=1234*", "schema": {"type": "integer"}}, {"name": "deleted", "in": "query", "required": false, "description": "The state of API tokens included in the response.   \n Two possible values:   \n\n* True - API token was not deleted.* False - API token was deleted.\n\nExample, *&deleted=True*", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "array", "items": {"allOf": [{"type": "object", "required": ["name", "exp_date", "client_user"], "properties": {"name": {"type": "string", "description": "API token name.", "example": "My token"}, "description": {"type": "string", "description": "API token description.", "example": "It's my token"}, "exp_date": {"type": "string", "description": "Date when the API token becomes expired (ISO 8086/RFC 3339 format), UTC.\nIf null, then the API token will never expire.", "example": "2021-01-01 12:00:00+00:00", "nullable": true}, "client_user": {"type": "object", "description": "API token role.", "properties": {"role": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}}}}, {"type": "object", "required": ["id", "deleted", "expired", "created", "client_user", "last_usage"], "properties": {"id": {"type": "integer", "description": "API token ID.", "example": 42}, "deleted": {"type": "boolean", "description": "Deletion flag. If true, then the API token was deleted.", "example": false}, "expired": {"type": "boolean", "description": "Expiration flag. If true, then the API token has expired.\nWhen an API token expires it will be automatically deleted.", "example": false}, "created": {"type": "string", "description": "Date when the API token was issued (ISO 8086/RFC 3339 format), UTC.", "example": "2021-01-01 12:00:00+00:00"}, "client_user": {"type": "object", "description": "API token role and issuer data.", "required": ["deleted", "user_id", "user_name", "user_email", "client_id", "role"], "properties": {"deleted": {"type": "boolean", "example": false, "description": "Deletion flag. If true, then the API token was deleted."}, "user_id": {"type": "integer", "description": "User's ID who issued the API token.", "example": 123}, "user_name": {"type": "string", "description": "User's name who issued the API token.", "example": "John Doe"}, "user_email": {"type": "string", "description": "User's email who issued the API token.", "example": "some@email.com"}, "client_id": {"type": "integer", "description": "Account's ID.", "example": 456}, "role": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators*
                                    2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}}, "last_usage": {"type": "string", "description": "Date when the API token was last used (ISO 8086/RFC 3339 format), UTC.", "example": "2021-01-01 12:00:00+00:00"}}}]}}}}}, "403": {"description": "You do not have permission to perform this action."}, "404": {"description": "Account not found."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\napi_token_list = client.iam.api_tokens.list(\n    client_id=0,\n)\nprint(api_token_list)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/iam\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  apiTokenList, err := client.Iam.APITokens.List(\n    context.TODO(),\n    0,\n    iam.APITokenListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", apiTokenList)\n}\n"}]}
    "post": {"tags": ["API Tokens"], "summary": "Create API Token", "description": "Create an API token in the current account.", "parameters": [{"name": "clientId", "in": "path", "required": true, "description": "Account ID.", "schema": {"type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "required": ["name", "exp_date", "client_user"], "properties": {"name": {"type": "string", "description": "API token name.", "example": "My token"}, "description": {"type": "string", "description": "API token description.", "example": "It's my token"}, "exp_date": {"type": "string", "description": "Date when the API token becomes expired (ISO 8086/RFC 3339 format), UTC.\nIf null, then the API token will never expire.", "example": "2021-01-01 12:00:00+00:00", "nullable": true}, "client_user": {"type": "object", "description": "API token role.", "properties": {"role": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}}}}}}}, "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"type": "object", "properties": {"token": {"type": "string", "description": "API token.\nCopy it, because you will not be able to get it again.\nWe do not store tokens. All responsibility for token storage and usage is on the issuer."}}}}}}, "400": {"description": "API token creation failed.", "content": {"application/json": {"schema": {"anyOf": [{"title": "Invalid role", "type": "object", "properties": {"errors": {"type": "object", "description": "The specified role does not exist. Please check the role name."}}, "example": {"errors": {"client_user": {"role": ["Invalid role: RoleName"]}}}}, {"title": "You can't create an API token with the specified role.", "type": "object", "properties": {"errors": {"type": "object", "description": "The specified role is higher than yours. Try using another role."}}, "example": {"errors": {"client_user": {"role": ["Can't create token with role Administrators"]}}}}]}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\napi_token_create = client.iam.api_tokens.create(\n    client_id=0,\n    client_user={},\n    exp_date=\"2021-01-01 12:00:00+00:00\",\n    name=\"My token\",\n)\nprint(api_token_create.token)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/iam\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  apiTokenCreate, err := client.Iam.APITokens.New(\n    context.TODO(),\n    0,\n    iam.APITokenNewParams{\n      ClientUser: iam.APITokenNewParamsClientUser{\n\n      },\n      ExpDate: gcore.String(\"2021-01-01 12:00:00+00:00\"),\n      Name: \"My token\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", apiTokenCreate.Token)\n}\n"}]}
  "/iam/clients/{clientId}/tokens/{tokenId}":
    "get": {"tags": ["API Tokens"], "summary": "Get API Token", "parameters": [{"name": "clientId", "in": "path", "required": true, "description": "Account ID.", "schema": {"type": "integer"}}, {"name": "tokenId", "in": "path", "required": true, "description": "API token ID.", "schema": {"type": "integer"}}], "responses": {"200": {"description": "OK.", "content": {"application/json": {"schema": {"allOf": [{"type": "object", "required": ["name", "exp_date", "client_user"], "properties": {"name": {"type": "string", "description": "API token name.", "example": "My token"}, "description": {"type": "string", "description": "API token description.", "example": "It's my token"}, "exp_date": {"type": "string", "description": "Date when the API token becomes expired (ISO 8086/RFC 3339 format), UTC.\nIf null, then the API token will never expire.", "example": "2021-01-01 12:00:00+00:00", "nullable": true}, "client_user": {"type": "object", "description": "API token role.", "properties": {"role": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}}}}, {"type": "object", "required": ["id", "deleted", "expired", "created", "client_user", "last_usage"], "properties": {"id": {"type": "integer", "description": "API token ID.", "example": 42}, "deleted": {"type": "boolean", "description": "Deletion flag. If true, then the API token was deleted.", "example": false}, "expired": {"type": "boolean", "description": "Expiration flag. If true, then the API token has expired.\nWhen an API token expires it will be automatically deleted.", "example": false}, "created": {"type": "string", "description": "Date when the API token was issued (ISO 8086/RFC 3339 format), UTC.", "example": "2021-01-01 12:00:00+00:00"}, "client_user": {"type": "object", "description": "API token role and issuer data.", "required": ["deleted", "user_id", "user_name", "user_email", "client_id", "role"], "properties": {"deleted": {"type": "boolean", "example": false, "description": "Deletion flag. If true, then the API token was deleted."}, "user_id": {"type": "integer", "description": "User's ID who issued the API token.", "example": 123}, "user_name": {"type": "string", "description": "User's name who issued the API token.", "example": "John Doe"}, "user_email": {"type": "string", "description": "User's email who issued the API token.", "example": "some@email.com"}, "client_id": {"type": "integer", "description": "Account's ID.", "example": 456}, "role": {"type": "object", "properties": {"id": {"type": "integer", "example": 1, "description": "Group's ID: Possible values are:   \n\n* 1 - Administrators* 2 - Users* 5 - Engineers* 3009 - Purge and Prefetch only (API+Web)* 3022 - Purge and Prefetch only (API)"}, "name": {"type": "string", "example": "Administrators", "description": "Group's name.", "enum": ["Users", "Administrators", "Engineers", "Purge and Prefetch only (API)", "Purge and Prefetch only (API+Web)"]}}}}}, "last_usage": {"type": "string", "description": "Date when the API token was last used (ISO 8086/RFC 3339 format), UTC.", "example": "2021-01-01 12:00:00+00:00"}}}]}}}}, "403": {"description": "You do not have permission to perform this action."}, "404": {"description": "API token not found."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\napi_token = client.iam.api_tokens.get(\n    token_id=0,\n    client_id=0,\n)\nprint(api_token.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/iam\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n\
            \    option.WithAPIKey(\"My API Key\"),\n  )\n  apiToken, err := client.Iam.APITokens.Get(\n    context.TODO(),\n    0,\n    iam.APITokenGetParams{\n      ClientID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", apiToken.ID)\n}\n"}]}
    "delete": {"tags": ["API Tokens"], "summary": "Delete API Token", "description": "Delete API token from current account.\nEnsure that the API token is not being used by an active application.\nAfter deleting the token, all applications that use this token will not be able to get access to your account via API.\nThe action cannot be reversed.", "parameters": [{"name": "clientId", "in": "path", "required": true, "description": "Account ID.", "schema": {"type": "integer"}}, {"name": "tokenId", "in": "path", "required": true, "description": "API token ID.", "schema": {"type": "integer"}}], "responses": {"204": {"description": "API token has been successfully deleted."}, "403": {"description": "You do not have permission to perform this action."}, "404": {"description": "API token not found."}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.iam.api_tokens.delete(\n    token_id=0,\n    client_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/iam\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Iam.APITokens.Delete(\n    context.TODO(),\n    0,\n    iam.APITokenDeleteParams{\n      ClientID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
tags:
- {"name": "Account", "x-displayName": "Account"}
- {"name": "API Tokens", "description": "Use permanent API tokens for regular automated requests to services.\nYou can either set its validity period when creating it or issue a token for an unlimited time.\nPlease address the API documentation of the specific product in order to check if it supports API tokens.\n\nProvide your APIKey in the Authorization header.\n\nExample: ```curl -H \"Authorization: APIKey 123$61b8e1e7a68c\" https://api.gcore.com/iam/users/me```\n\nPlease note: When authorizing via SAML SSO, our system does not have any\ninformation about permissions given to the user by the identity provider.\nEven if the provider revokes the user's access rights, their tokens remain active.\nTherefore, if necessary, the token will need to be deleted manually.", "x-displayName": "API Tokens"}
- {"name": "Users", "x-displayName": "Users"}
x-tagGroups:
- {"name": "IAM API", "tags": ["Account", "API Tokens", "Users"]}
security: ["APIKey": []]
components:
  securitySchemes:
    APIKey:
      description: "API key for authentication. Make sure to include the word `apikey`, followed by a single space and then your token.\nExample: `apikey 1234$abcdef`"
      type: apiKey
      in: header
      name: Authorization
