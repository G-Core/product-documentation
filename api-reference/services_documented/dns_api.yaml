"openapi": "3.1.0"
"info": {"title": "Gcore OpenAPI â€“ DNS API", "description": "This OpenAPI is an aggregated OpenAPI specification that unifies all Gcore products into a single file. It covers Cloud, CDN, DNS, WAAP, DDoS Protection, Object Storage, Streaming, and FastEdge services.", "version": "2025-08-13T14:08:59.477346+00:00"}
"servers": ["url": "https://api.gcore.com"]
paths:
  "/dns/v2/analyze/{name}/delegation-status":
    "post": {"tags": ["Analyze"], "summary": "Check Delegation Status", "description": "Returns delegation status for specified domain name.\nThis endpoint has rate limit.", "operationId": "AnalyzeDelegationStatus", "parameters": [{"name": "name", "in": "path", "description": "zone name", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "DelegationStatusResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DelegationStatusResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/locations":
    "get": {"tags": ["DNS Locations"], "summary": "All Locations", "description": "List of All locations continents/countries/regions.", "operationId": "AllLocations", "responses": {"200": {"description": "AllResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AllResponse"}}}}}}
  "/dns/v2/locations/continents":
    "get": {"tags": ["DNS Locations"], "summary": "Continent Locations", "description": "List of All locations continents.", "operationId": "ContinentLocations", "responses": {"200": {"description": "ContinentsResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContinentsResponse"}}}}}}
  "/dns/v2/locations/countries":
    "get": {"tags": ["DNS Locations"], "summary": "Country Location", "description": "List of All locations countries.", "operationId": "CountryLocations", "responses": {"200": {"description": "CountriesResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CountriesResponse"}}}}}}
  "/dns/v2/locations/regions":
    "get": {"tags": ["DNS Locations"], "summary": "Region Locations", "description": "List of All locations regions.", "operationId": "RegionLocations", "responses": {"200": {"description": "RegionsResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegionsResponse"}}}}}}
  "/dns/v2/lookup":
    "get": {"tags": ["Lookup"], "summary": "Lookup", "description": "Get the dns records from a specific domain or ip.", "operationId": "LookupRequest", "parameters": [{"name": "name", "in": "query", "description": "Domain name", "schema": {"type": "string"}}, {"name": "request_server", "in": "query", "description": "Server that will be used as resolver", "schema": {"type": "string", "enum": ["authoritative_dns", "google", "cloudflare", "open_dns", "quad9", "gcore"]}}], "responses": {"200": {"description": "LookupResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LookupResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/monitor/metrics":
    "get": {"tags": ["Metrics"], "summary": "Get monitors state in metrics (prometheus) format for authorized user.", "description": "Example of success response:\n```\n# HELP `healthcheck_state` The `healthcheck_state` metric reflects the state of a specific monitor after conducting a health check\n# TYPE `healthcheck_state` gauge\n`healthcheck_state`{`client_id`=\"1\",`monitor_id`=\"431\",`monitor_locations`=\"us-east-1,us-west-1\",`monitor_name`=\"test-monitor-1\",`monitor_type`=\"http\",`rrset_name`=\"rrset-name1\",`rrset_type`=\"rrset-type1\",`zone_name`=\"zone-name1\"} 0\n`healthcheck_state`{`client_id`=\"1\",`monitor_id`=\"4871\",`monitor_locations`=\"fr-1,fr-2\",`monitor_name`=\"test-monitor-2\",`monitor_type`=\"tcp\",`rrset_name`=\"rrset-name2\",`rrset_type`=\"rrset-type2\",`zone_name`=\"zone-name2\"} 1\n`healthcheck_state`{`client_id`=\"2\",`monitor_id`=\"7123\",`monitor_locations`=\"ua-1,ua-2\",`monitor_name`=\"test-monitor-3\",`monitor_type`=\"icmp\",`rrset_name`=\"rrset-name3\",`rrset_type`=\"rrset-type3\",`zone_name`=\"zone-name3\"} 0\n```", "operationId": "MonitorMetrics", "parameters": [{"name": "client_ids", "in": "query", "description": "Admin and technical user can specify `client_id` to get metrics for particular client.\nIgnored for client", "style": "form", "explode": false, "schema": {"type": "array", "items": {"type": "integer", "format": "uint64"}}}, {"name": "zone_names", "in": "query", "description": "Admin and technical user can specify `monitor_id` to get metrics for particular zone.\nIgnored for client", "style": "form", "explode": false, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"200": {"description": "OK", "content": {"plain/text": {"schema": {"type": "string"}}}}}}
  "/dns/v2/network-mappings":
    "get": {"tags": ["NetworkMappings"], "summary": "List Network Mapping", "description": "List of network mappings.\nExample of request:\n```\ncurl --location --request GET 'https://api.gcore.com/dns/v2/network-mappings' \\\n--header 'Authorization: Bearer ...'\n```", "operationId": "ListNetworkMapping", "parameters": [{"name": "offset", "in": "query", "description": "Amount of records to skip before beginning to write in response.", "schema": {"type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"type": "integer", "format": "uint64"}}, {"name": "order_by", "in": "query", "description": "Field name to sort by", "schema": {"type": "string"}}, {"name": "order_direction", "in": "query", "description": "Ascending or descending order", "schema": {"type": "string", "enum": ["asc", "desc"]}}], "responses": {"200": {"description": "ListNetworkMappingResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListNetworkMappingResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
    "post": {"tags": ["NetworkMappings"], "summary": "Create Network Mapping", "description": "Create new network mapping.\nExample of request:\n```\ncurl --location --request POST 'https://api.gcore.com/dns/v2/network-mappings' \\\n--header 'Authorization: Bearer ...' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\"name\": \"test\",\n\"mapping\": [\n{\n\"tags\": [\n\"tag1\"\n],\n\"cidr4\": [\n\"192.0.2.0/24\",\n\"198.0.100.0/24\"\n]\n},\n{\n\"tags\": [\n\"tag2\",\n\"tag3\"\n],\n\"cidr4\": [\n\"192.1.2.0/24\",\n\"198.1.100.0/24\"\n],\n\"cidr6\": [\n\"aa:10::/64\"\n]\n}\n]\n}'\n```", "operationId": "CreateNetworkMapping", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/NetworkMapping"}}}, "required": false}, "responses": {"200": {"description": "CreateNetworkMappingResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateNetworkMappingResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "x-codegen-request-body-name": "NetworkMapping"}
  "/dns/v2/network-mappings/import":
    "post": {"tags": ["NetworkMappings"], "summary": "Import Network Mapping", "description": "Import network mapping from YAML file.\nNote: A YAML file use spaces as indentation, tabs are not allowed.\nExample of input file:\n```\nname: `mapping_rule_1`\nmapping:\n- tags:\n- `tag_name_1`\ncidr4:\n- 127.0.2.0/24\n- tags:\n- `tag_name_2`\n- `tag_name_3`\ncidr4:\n- 128.0.1.0/24\n- 128.0.2.0/24\n- 128.0.3.0/24\ncidr6:\n- ac:20::0/64\n---\nname: `mapping_rule_2`\nmapping:\n- tags:\n- `my_network`\ncidr4:\n- 129.0.2.0/24\ncidr6:\n- ac:20::0/64\n```\nExample of request:\n```\ncurl --location --request POST 'https://api.gcore.com/dns/v2/network-mappings/import' \\\n--header 'Authorization: Bearer ...' \\\n--header 'Content-Type: text/plain' \\\n--data-raw 'name: `mapping_rule_1`\nmapping:\n- tags:\n- `tag_name_1`\ncidr4:\n- 127.0.2.0/24\n- tags:\n- `tag_name_2`\n- `tag_name_3`\ncidr4:\n- 128.0.1.0/24\n- 128.0.2.0/24\n- 128.0.3.0/24\ncidr6:\n- aa:10::/64\n---\nname: `mapping_rule_2`\nmapping:\n- tags:\n- `my_network`\ncidr4:\n- 129.0.2.0/24\ncidr6:\n- ac:20::0/64'\n```", "operationId": "ImportNetworkMapping", "responses": {"200": {"description": "ImportNetworkMappingResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImportNetworkMappingResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/network-mappings/{id}":
    "get": {"tags": ["NetworkMappings"], "summary": "Get Network Mapping", "description": "Particular network mapping item info\nExample of request:\n```\ncurl --location --request GET 'https://api.gcore.com/dns/v2/network-mappings/123' \\\n--header 'Authorization: Bearer ...'\n```", "operationId": "GetNetworkMapping", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer", "format": "uint64"}}], "responses": {"200": {"description": "NetworkMapping", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NetworkMapping"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
    "put": {"tags": ["NetworkMappings"], "summary": "Update Network Mapping", "description": "Update network mapping (Note: name of network mapping cannot be changed)\nExample of request:\n```\ncurl --location --request PUT 'https://api.gcore.com/dns/v2/network-mappings/123' \\\n--header 'Authorization: Bearer ...' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\"name\": \"test-mapping\",\n\"mapping\": [\n{\n\"tags\": [\n\"tag1\"\n],\n\"cidr4\": [\n\"192.0.2.0/24\"\n]\n},\n{\n\"tags\": [\n\"tag2\",\n\"tag3\"\n],\n\"cidr4\": [\n\"192.1.2.0/24\"\n],\n\"cidr6\": [\n\"aa:10::/64\"\n]\n}\n]\n}'\n```", "operationId": "UpdateNetworkMapping", "parameters": [{"name": "id", "in": "path", "description": "network mapping id", "required": true, "schema": {"type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/NetworkMapping"}}}, "required": false}, "responses": {"200": {"description": "UpdateNetworkMappingResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateNetworkMappingResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "x-codegen-request-body-name": "NetworkMapping"}
    "delete": {"tags": ["NetworkMappings"], "summary": "Delete Network Mapping", "description": "Delete network mapping.\nExample of request:\n```\ncurl --location --request DELETE 'https://api.gcore.com/dns/v2/network-mappings/123' \\\n--header 'Authorization: Bearer ...'\n```", "operationId": "DeleteNetworkMapping", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer", "format": "uint64"}}], "responses": {"200": {"description": "DeleteNetworkMappingResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteNetworkMappingResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/network-mappings/{name}":
    "get": {"tags": ["NetworkMappings"], "summary": "Get Network Mapping", "description": "Get network mapping by name.\nParticular network mapping item info\nExample of request:\n```\ncurl --location --request GET 'https://api.gcore.com/dns/v2/network-mappings/test-mapping' \\\n--header 'Authorization: Bearer ...'\n```", "operationId": "NetworkMappingByName", "parameters": [{"name": "name", "in": "path", "description": "network mapping name", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "NetworkMapping", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NetworkMapping"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/pickers":
    "get": {"tags": ["Pickers"], "summary": "List of Picker", "description": "Returns list of picker", "operationId": "PickerList", "responses": {"200": {"description": "PickerListResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PickerListResponse"}}}}}}
  "/dns/v2/pickers/presets":
    "get": {"tags": ["Pickers"], "summary": "List of Picker preset", "description": "Returns list of picker preset", "operationId": "PickerPresetList", "responses": {"200": {"description": "PickerPresetListResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PickerPresetListResponse"}}}}}}
  "/dns/v2/platform/info":
    "get": {"tags": ["DNS Clients"], "summary": "Client Info", "description": "Get info about client", "operationId": "ClientInfo", "responses": {"200": {"description": "InfoResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InfoResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "security": []}
  "/dns/v2/zones":
    "get": {"tags": ["Zones"], "summary": "List of Zones", "description": "Show created zones with pagination managed by limit and offset params. All query params are optional.", "operationId": "Zones", "parameters": [{"name": "offset", "in": "query", "description": "Amount of records to skip before beginning to write in response.", "schema": {"type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"type": "integer", "format": "uint64"}}, {"name": "order_by", "in": "query", "description": "Field name to sort by", "schema": {"type": "string"}}, {"name": "order_direction", "in": "query", "description": "Ascending or descending order", "schema": {"type": "string", "enum": ["asc", "desc"]}}, {"name": "id", "in": "query", "description": "to pass several ids `id=1&id=3&id=5...`", "style": "form", "explode": false, "schema": {"type": "array", "items": {"type": "integer", "format": "int64"}}}, {"name": "client_id", "in": "query", "description": "to pass several `client_ids` `client_id=1&`client_id`=3&`client_id`=5...`", "style": "form", "explode": false, "schema": {"type": "array", "items": {"type": "integer", "format": "int64"}}}, {"name": "reseller_id", "in": "query", "style": "form", "explode": false, "schema": {"type": "array", "items": {"type": "integer", "format": "int64"}}}, {"name": "iam_reseller_id", "in": "query", "style": "form", "explode": false, "schema": {"type": "array", "items": {"type": "integer", "format": "int64"}}}, {"name": "name", "in": "query", "description": "to pass several names `name=first&name=second...`", "style": "form", "explode": false, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "case_sensitive", "in": "query", "schema": {"type": "boolean"}}, {"name": "exact_match", "in": "query", "schema": {"type": "boolean"}}, {"name": "enabled", "in": "query", "schema": {"type": "boolean"}}, {"name": "status", "in": "query", "schema": {"type": "string"}}, {"name": "dynamic", "in": "query", "description": "Zones with dynamic RRsets", "schema": {"type": "boolean"}}, {"name": "healthcheck", "in": "query", "description": "Zones with RRsets that have healthchecks", "schema": {"type": "boolean"}}, {"name": "updated_at_from", "in": "query", "schema": {"type": "string", "format": "date-time"}}, {"name": "updated_at_to", "in": "query", "schema": {"type": "string", "format": "date-time"}}], "responses": {"200": {"description": "ListZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
    "post": {"tags": ["Zones"], "summary": "Create Zone", "description": "Add DNS zone.", "operationId": "CreateZone", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/InputZone"}}}, "required": false}, "responses": {"200": {"description": "CreateZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "x-codegen-request-body-name": "zone"}
  "/dns/v2/zones/{name}":
    "get": {"tags": ["Zones"], "summary": "Get Zone", "description": "Zone info by zone name.", "operationId": "Zone", "parameters": [{"name": "name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "ItemZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
    "put": {"tags": ["Zones"], "summary": "Update Zone", "description": "Update DNS zone and SOA record.", "operationId": "UpdateZone", "parameters": [{"name": "name", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/InputZone"}}}, "required": false}, "responses": {"200": {"description": "UpdateZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "x-codegen-request-body-name": "zone"}
    "delete": {"tags": ["Zones"], "summary": "Delete Zone", "description": "Delete DNS zone and its records and raws.", "operationId": "DeleteZone", "parameters": [{"name": "name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "DeleteZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/zones/{name}/disable":
    "patch": {"tags": ["Zones"], "summary": "Disable Zone", "description": "Disable DNS zone.", "operationId": "DisableZone", "parameters": [{"name": "name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "DisableZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DisableZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/zones/{name}/dnssec":
    "get": {"tags": ["DNSSEC"], "summary": "Get DNSSEC DS", "description": "Get DNSSEC DS for a DNS zone.", "operationId": "GetDNSSECDS", "responses": {"200": {"description": "GetDNSSECDSResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetDNSSECDSResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
    "patch": {"tags": ["DNSSEC"], "summary": "Toggle DNSSEC", "description": "Enable or disable DNSSEC for a DNS zone.", "operationId": "ToggleDNSSEC", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ToggleDNSSECRequestBody"}}}, "required": false}, "responses": {"200": {"description": "ToggleDNSSECResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ToggleDNSSECResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "x-codegen-request-body-name": "Body"}
  "/dns/v2/zones/{name}/enable":
    "patch": {"tags": ["Zones"], "summary": "Enable Zone", "description": "Enable DNS zone.", "operationId": "EnableZone", "parameters": [{"name": "name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "EnableZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EnableZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/zones/{name}/statistics":
    "get": {"tags": ["Zones"], "summary": "Get Zone Statistics", "description": "Statistics of DNS zone in common and by record types.\nTo get summary statistics for all zones use `all` instead of zone name in path.\nNote: Consumption statistics is updated in near real-time as a standard practice.\nHowever, the frequency of updates can vary, but they are typically available within a 30 minutes period.\nExceptions, such as maintenance periods, may delay data beyond 30 minutes until servers resume and backfill missing statistics.", "operationId": "ZoneStatistics", "parameters": [{"name": "name", "in": "path", "description": "Zone name.\nUse `all` to get statistics for all zones.", "required": true, "schema": {"type": "string"}}, {"name": "from", "in": "query", "description": "Beginning of the requested time period (Unix Timestamp, UTC.)\nIn a query string: &from=1709068637", "schema": {"type": "integer", "format": "int64"}}, {"name": "to", "in": "query", "description": "End of the requested time period (Unix Timestamp, UTC.)\nIn a query string: &to=1709673437", "schema": {"type": "integer", "format": "int64"}}, {"name": "record_type", "in": "query", "description": "DNS record type.\nPossible values:\n\\* A\n\\* AAAA\n\\* NS\n\\* CNAME\n\\* MX\n\\* TXT\n\\* SVCB\n\\* HTTPS", "schema": {"type": "string"}}, {"name": "granularity", "in": "query", "description": "Granularity parameter string is a sequence\nof decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"1.5h\" or \"2h45m\".\nValid time units are \"s\", \"m\", \"h\".", "schema": {"type": "string"}}], "responses": {"200": {"description": "StatisticsZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StatisticsZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/zones/{zoneName}/export":
    "get": {"tags": ["Zones"], "summary": "Export Zone (Alpha)", "description": "Export zone to bind9 format.", "operationId": "ExportZone", "parameters": [{"name": "zoneName", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "ExportZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExportZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/zones/{zoneName}/import":
    "post": {"tags": ["Zones"], "summary": "Import Zone", "description": "Import zone in bind9 format.", "operationId": "ImportZone", "parameters": [{"name": "zoneName", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reader"}}}, "required": false}, "responses": {"200": {"description": "ImportZoneResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImportZoneResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "x-codegen-request-body-name": "zone"}
  "/dns/v2/zones/{zoneName}/rrsets":
    "get": {"tags": ["RRsets"], "summary": "List of RRset", "description": "List of RRset.", "operationId": "RRSetList", "parameters": [{"name": "offset", "in": "query", "description": "Amount of records to skip before beginning to write in response.", "schema": {"type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"type": "integer", "format": "uint64"}}, {"name": "order_by", "in": "query", "description": "Field name to sort by", "schema": {"type": "string"}}, {"name": "order_direction", "in": "query", "description": "Ascending or descending order", "schema": {"type": "string", "enum": ["asc", "desc"]}}, {"name": "zoneName", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "ListRRSetResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListRRSetResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/zones/{zoneName}/{rrsetName}/{rrsetType}":
    "get": {"tags": ["RRsets"], "summary": "Get RRset", "description": "Particular RRset item info", "operationId": "RRSet", "parameters": [{"name": "zoneName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetType", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "OutputRRSet", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OutputRRSet"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
    "put": {"tags": ["RRsets"], "summary": "Update RRset", "description": "Create/update RRset.", "operationId": "UpdateRRSet", "parameters": [{"name": "zoneName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetType", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/InputRRSet"}}}, "required": false}, "responses": {"200": {"description": "OutputRRSet", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OutputRRSet"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "x-codegen-request-body-name": "RRSet"}
    "post": {"tags": ["RRsets"], "summary": "Create RRset", "description": "Add the RRSet to the zone specified by zoneName, RRSets can be configured to be either dynamic or static.\n### Static RRsets\nStaticly configured RRSets provide DNS responses as is.\n### Dynamic RRsets\nDynamic RRSets have picker configuration defined thus it's possible to finely customize DNS response.\nPicking rules are defined on the RRSet level as a list of selectors, filters and mutators.\nPicker considers different resource records metadata, requestor IP, and other event-feeds like monitoring.\nPicker configuration is an ordered list defined by \"pickers\" attribute.\nRequestor IP is determined by EDNS Client Subnet (ECS) if defined, otherwise - by client/recursor IP.\nSelector pickers are used in the specified order until the first match, in case of match - all next selectors\nare bypassed. Filters or mutators are applied to the match according to the order they are specified.\nFor example, sort records by proximity to user, shuffle based on weights and return not more than 3:\n`\"pickers\":\n[\n{ \"type\": \"geodistance\" },\n{ \"type\": \"`weighted_shuffle`\" },\n{ \"type\": \"`first_n`\", \"limit\": 3 }\n]`\n#### geodns filter\nA resource record is included in the answer if resource record's metadata matches requestor info.\nFor each resource record in RRSet, the following metadata is considered (in the order specified):\n+ `ip` - list of network addresses in CIDR format, e.g. `[\"192.168.15.150/25\", \"2003:de:2016::/48\"]`;\n+ `asn` - list of autonomous system numbers, e.g. `[1234, 5678]`;\n+ `regions` - list of region codes, e.g. `[\"de-bw\", \"de-by\"]`;\n+ `countries` - list of country codes, e.g. `[\"de\", \"lu\", \"lt\"]`;\n+ `continents` - list of continent codes, e.g. `[\"af\", \"an\", \"eu\", \"as\", \"na\", \"sa\", \"oc\"]`.\nIf there is a record (or multiple) with metadata matched IP, it's used as a response. If not - asn,\nthen country and then continent are checked for a match. If there is no match, then the behaviour\nis defined by _strict_ parameter of the filter.\nExample: `\"pickers\": [ { \"type\": \"geodns\", \"strict\": true } ]`\n##### Strict parameter\n`strict: true` means that if no records percolate through the geodns filter it returns no answers.\n`strict: false` means that if no records percolate through the geodns filter, all records are passed over.\n#### asn selector\nResource records which ASN metadata matches ASN of the requestor are picked by this selector,\nand passed to the next non-selector picker, if there is no match - next configured picker starts with all records.\nExample: `\"pickers\": [ {\"type\": \"asn\"} ]`\n#### country selector\nResource records which country metadata matches country of the requestor are picked by this selector,\nand passed to the next non-selector picker, if there is no match - next configured picker starts with all records.\nExample: `\"pickers\": [ { \"type\": \"country\" } ]`\n#### continent selector\nResource records which continent metadata matches continent of the requestor are picked by this selector,\nand passed to the next non-selector picker, if there is no match - next configured picker starts with all records.\nExample: `\"pickers\": [ { \"type\": \"continent\" } ]`\n#### region selector\nResource records which region metadata matches region of the requestor are picked by this selector,\nand passed to the next non-selector picker, if there is no match - next configured picker starts with all records.\ne.g. `fr-nor` for France/Normandy.\nExample: `\"pickers\": [ { \"type\": \"region\" } ]`\n#### ip selector\nResource records which IP metadata matches IP of the requestor are picked by this selector,\nand passed to the next non-selector picker, if there is no match - next configured picker starts with all records.\nMaximum 100 subnets are allowed to specify in meta of RR.\nExample: `\"pickers\": [ { \"type\": \"ip\" } ]`\n#### default selector\nWhen enabled, records marked as default are selected: `\"meta\": {\"default\": true}`.\nExample:\n`\"pickers\":\n[\n{ \"type\"\
        : \"geodns\", \"strict\": false },\n{ \"type\": \"default\" },\n{ \"type\": \"`first_n`\", \"limit\": 2 }\n]`\n#### geodistance mutator\nThe resource records are rearranged in ascending order based on the distance (in meters) from requestor to\nthe coordinates specified in latlong metadata. Distance is calculated using Haversine formula.\nThe \"nearest\" to the user's IP RR goes first. The records without latlong metadata come last.\ne.g. for Berlin `[52.520008, 13.404954]`.;\nIn this configuration the only \"nearest\" to the requestor record to be returned:\n`\"pickers\": [ { \"type\": \"geodistance\" }, { \"type\": \"`first_n`\", \"limit\": 1 } ]`\n#### `weighted_shuffle` mutator\nThe resource records are rearranged in random order based on the `weight` metadata.\nDefault weight (if not specified) is 50.\nExample: `\"pickers\": [ { \"type\": \"`weighted_shuffle`\" } ]`\n#### `first_n` filter\nSlices first N (N specified as a limit parameter value) resource records.\nExample: `\"pickers\": [ { \"type\": \"`first_n`\", \"limit\": 1 } ]` returns only the first resource record.\n##### limit parameter\nCan be a positive value for a specific limit. Use zero or leave it blank to indicate no limits.", "operationId": "CreateRRSet", "parameters": [{"name": "zoneName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetType", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/InputRRSet"}}}, "required": false}, "responses": {"200": {"description": "OutputRRSet", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OutputRRSet"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}, "x-codegen-request-body-name": "RRSet"}
    "delete": {"tags": ["RRsets"], "summary": "Delete RRset", "description": "Delete RRset.", "operationId": "DeleteRRSet", "parameters": [{"name": "zoneName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetType", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "DeleteRRSetResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteRRSetResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
  "/dns/v2/zones/{zoneName}/{rrsetName}/{rrsetType}/failover/log":
    "get": {"tags": ["RRsets"], "summary": "Get RRset Failover Logs", "description": "Get failover history for the RRset", "operationId": "FailoverLog", "parameters": [{"name": "offset", "in": "query", "description": "Amount of records to skip before beginning to write in response.", "schema": {"type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"type": "integer", "format": "uint64"}}, {"name": "zoneName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetName", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "rrsetType", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "FailoverLogResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FailoverLogResponse"}}}}, "400": {"description": "Error message response", "headers": {"error": {"schema": {"type": "string"}}}, "content": {}}}}
tags:
- {"name": "Analyze", "x-displayName": "Analyze"}
- {"name": "DNS Locations", "x-displayName": "DNS Locations"}
- {"name": "Lookup", "x-displayName": "Lookup"}
- {"name": "Metrics", "x-displayName": "Metrics"}
- {"name": "NetworkMappings", "x-displayName": "NetworkMappings"}
- {"name": "Pickers", "x-displayName": "Pickers"}
- {"name": "DNS Clients", "x-displayName": "DNS Clients"}
- {"name": "Zones", "x-displayName": "Zones"}
- {"name": "DNSSEC", "x-displayName": "DNSSEC"}
- {"name": "RRsets", "x-displayName": "RRsets"}
x-tagGroups:
- {"name": "DNS API", "tags": ["Analyze", "DNS Locations", "Lookup", "Metrics", "NetworkMappings", "Pickers", "DNS Clients", "Zones", "DNSSEC", "RRsets"]}
security: ["APIKey": []]
components:
  schemas:
    DelegationStatusResponse: {"$ref": "#/components/schemas/DelegationStatusScanResult"}
    DelegationStatusScanResult: {"type": "object", "properties": {"authoritative_name_servers": {"type": "array", "items": {"$ref": "#/components/schemas/NameServer"}}, "gcore_authorized_count": {"type": "integer", "format": "int64"}, "is_whitelabel_delegation": {"type": "boolean"}, "non_gcore_authorized_count": {"type": "integer", "format": "int64"}, "zone_exists": {"type": "boolean"}}}
    NameServer: {"type": "object", "properties": {"ipv4Addresses": {"type": "array", "items": {"type": "string"}}, "ipv6Addresses": {"type": "array", "items": {"type": "string"}}, "name": {"type": "string"}}, "description": "NameServer"}
    AllResponse: {"type": "object", "properties": {"continents": {"$ref": "#/components/schemas/ContinentsResponse"}, "countries": {"$ref": "#/components/schemas/CountriesResponse"}, "regions": {"$ref": "#/components/schemas/RegionsResponse"}}}
    ContinentsResponse: {"type": "object", "additionalProperties": {"$ref": "#/components/schemas/LocationTranslations"}}
    LocationTranslations: {"type": "object", "properties": {"names": {"type": "object", "additionalProperties": {"type": "string"}}}}
    CountriesResponse: {"type": "object", "additionalProperties": {"$ref": "#/components/schemas/LocationTranslations"}}
    RegionsResponse: {"type": "object", "additionalProperties": {"$ref": "#/components/schemas/LocationTranslations"}}
    LookupResponse: {"type": "array", "items": {"$ref": "#/components/schemas/DNSRecord"}}
    DNSRecord: {"type": "object", "properties": {"content": {"type": "array", "items": {"type": "string"}}, "name": {"type": "string"}, "ttl": {"type": "integer", "format": "int32"}, "type": {"type": "string"}}}
    ListNetworkMappingResponse: {"type": "object", "properties": {"network_mappings": {"type": "array", "items": {"$ref": "#/components/schemas/NetworkMapping"}}, "total_amount": {"type": "integer", "format": "int64"}}}
    NetworkMapping: {"type": "object", "properties": {"id": {"type": "integer", "format": "uint64"}, "mapping": {"$ref": "#/components/schemas/Mapping"}, "name": {"type": "string"}}}
    Mapping: {"type": "array", "items": {"$ref": "#/components/schemas/MappingEntry"}}
    MappingEntry: {"type": "object", "properties": {"cidr4": {"type": "array", "items": {"$ref": "#/components/schemas/IPNet"}}, "cidr6": {"type": "array", "items": {"$ref": "#/components/schemas/IPNet"}}, "tags": {"type": "array", "items": {"type": "string"}}}}
    IPNet: {"type": "object"}
    CreateNetworkMappingResponse: {"type": "object", "properties": {"id": {"type": "integer", "format": "uint64"}}}
    ImportNetworkMappingResponse: {"type": "object", "properties": {"success": {"type": "boolean"}}}
    UpdateNetworkMappingResponse: {"type": "object"}
    DeleteNetworkMappingResponse: {"type": "object"}
    PickerListResponse: {"type": "array", "items": {"$ref": "#/components/schemas/LabelName"}}
    LabelName: {"type": "object", "properties": {"label": {"type": "string"}, "name": {"type": "string"}}}
    PickerPresetListResponse: {"type": "object", "additionalProperties": {"type": "array", "items": {"$ref": "#/components/schemas/LabelName"}}}
    InfoResponse: {"type": "object", "properties": {"Client": {"$ref": "#/components/schemas/dns_Client"}, "settings": {"$ref": "#/components/schemas/ResellerInfo"}}, "description": "InfoResponse"}
    dns_Client: {"type": "object", "properties": {"client_id": {"type": "integer", "format": "uint64"}, "enabled": {"type": "boolean"}, "reseller": {"type": "integer", "format": "int64"}, "status": {"type": "string"}, "tariff_id": {"type": "integer", "format": "uint32"}, "tariff_name": {"$ref": "#/components/schemas/TariffName"}}, "description": "Client"}
    TariffName: {"type": "string", "description": "TariffName"}
    ResellerInfo: {"type": "object", "properties": {"contact": {"type": "string"}, "name_server_1": {"type": "string"}, "name_server_2": {"type": "string"}}}
    ListZoneResponse: {"type": "object", "properties": {"total_amount": {"type": "integer", "format": "int64"}, "zones": {"type": "array", "items": {"$ref": "#/components/schemas/OutputZone"}}}}
    OutputZone: {"type": "object", "properties": {"contact": {"type": "string", "description": "email address of the administrator responsible for this zone"}, "dnssec_enabled": {"type": "boolean", "description": "describe dnssec status\ntrue means dnssec is enabled for the zone\nfalse means dnssec is disabled for the zone"}, "expiry": {"type": "integer", "description": "number of seconds after which secondary name servers should stop answering request for this zone", "format": "uint64"}, "id": {"type": "integer", "description": "ID of zone.\nThis field usually is omitted in response and available only in\ncase of getting deleted zones by admin.", "format": "uint64"}, "meta": {"type": "object", "description": "arbitrarily data of zone in json format"}, "name": {"type": "string", "description": "name of DNS zone"}, "nx_ttl": {"type": "integer", "description": "Time To Live of cache", "format": "uint64"}, "primary_server": {"type": "string", "description": "primary master name server for zone"}, "records": {"type": "array", "items": {"$ref": "#/components/schemas/Record"}}, "refresh": {"type": "integer", "description": "number of seconds after which secondary name servers should query the master for the SOA record, to detect zone changes.", "format": "uint64"}, "retry": {"type": "integer", "description": "number of seconds after which secondary name servers should retry to request the serial number", "format": "uint64"}, "rrsets_amount": {"$ref": "#/components/schemas/RRSetsAmount"}, "serial": {"type": "integer", "description": "Serial number for this zone or Timestamp of zone modification moment.\nIf a secondary name server slaved to this one observes an increase in this number,\nthe slave will assume that the zone has been updated and initiate a zone transfer.", "format": "uint64"}, "status": {"$ref": "#/components/schemas/ZoneStatus"}}, "description": "swagger: model"}
    Record: {"type": "object", "properties": {"name": {"type": "string"}, "short_answers": {"type": "array", "items": {"type": "string"}}, "ttl": {"type": "integer", "format": "uint32"}, "type": {"type": "string"}}, "description": "Record - readonly short version of rrset"}
    RRSetsAmount: {"type": "object", "properties": {"dynamic": {"type": "object", "properties": {"healthcheck": {"type": "integer", "description": "Amount of RRsets with enabled healthchecks", "format": "int64"}, "total": {"type": "integer", "description": "Total amount of dynamic RRsets in zone", "format": "int64"}}, "description": "Amount of dynamic RRsets in zone"}, "static": {"type": "integer", "description": "Amount of static RRsets in zone", "format": "int64"}, "total": {"type": "integer", "description": "Total amount of RRsets in zone", "format": "int64"}}}
    ZoneStatus: {"type": "string"}
    InputZone: {"required": ["name"], "type": "object", "properties": {"contact": {"type": "string", "description": "email address of the administrator responsible for this zone"}, "enabled": {"type": "boolean", "description": "If a zone is disabled, then its records will not be resolved on dns servers", "default": true}, "expiry": {"type": "integer", "description": "number of seconds after which secondary name servers should stop answering request for this zone", "format": "uint64"}, "meta": {"type": "object", "additionalProperties": {"type": "object"}, "description": "arbitrarily data of zone in json format\nyou can specify `webhook` url and `webhook_method` here\nwebhook will get a map with three arrays: for created, updated and deleted rrsets\n`webhook_method` can be omitted, POST will be used by default"}, "name": {"type": "string", "description": "name of DNS zone", "example": "example.com"}, "nx_ttl": {"type": "integer", "description": "Time To Live of cache", "format": "uint64"}, "primary_server": {"type": "string", "description": "primary master name server for zone"}, "refresh": {"type": "integer", "description": "number of seconds after which secondary name servers should query the master for the SOA record, to detect zone changes.", "format": "uint64"}, "retry": {"type": "integer", "description": "number of seconds after which secondary name servers should retry to request the serial number", "format": "uint64"}, "serial": {"type": "integer", "description": "Serial number for this zone or Timestamp of zone modification moment.\nIf a secondary name server slaved to this one observes an increase in this number,\nthe slave will assume that the zone has been updated and initiate a zone transfer.", "format": "uint64"}}}
    CreateZoneResponse: {"type": "object", "properties": {"id": {"type": "integer", "format": "uint64"}, "warnings": {"$ref": "#/components/schemas/SimpleWarnings"}}}
    SimpleWarnings: {"type": "array", "items": {"type": "string"}}
    ItemZoneResponse: {"type": "object", "properties": {"Zone": {"$ref": "#/components/schemas/OutputZone"}}, "description": "Complete zone info with all records included"}
    UpdateZoneResponse: {"type": "object"}
    DeleteZoneResponse: {"type": "object", "description": "DeleteZoneResponse"}
    DisableZoneResponse: {"type": "object"}
    GetDNSSECDSResponse: {"type": "object", "properties": {"algorithm": {"type": "string", "description": "Specifies the algorithm used for the key.", "example": "13"}, "digest": {"type": "string", "description": "Represents the hashed value of the DS record.", "example": "28D2F00FB7FD127C05D1CE02BFA8660B094CA6728B1619ABA2144234F7221069"}, "digest_algorithm": {"type": "string", "description": "Specifies the algorithm used to generate the digest.", "example": "SHA256"}, "digest_type": {"type": "string", "description": "Specifies the type of the digest algorithm used.", "example": "2"}, "ds": {"type": "string", "description": "Represents the complete DS record.", "example": "zxy.com. 3600 IN DS 26191 13 2 135E208FF18578AB18C1EB8EA064BE08324DCBA6CF08FF55D76F0DBD4BF49F07"}, "flags": {"type": "integer", "description": "Represents the flag for DNSSEC record.", "format": "int64", "example": 257}, "key_tag": {"type": "integer", "description": "Represents the identifier of the DNSKEY record.", "format": "int64", "example": 26191}, "key_type": {"type": "string", "description": "Specifies the type of the key used in the algorithm.", "example": "ECDSAP256SHA256"}, "public_key": {"type": "string", "description": "Represents the public key used in the DS record.", "example": "ahD2C5Th+4NIFmErQPgSe/j6yPc2pbuhr3QcOJImCYHtv/mR/2qP2yHjBE1x20ERnmAnp6e6//g0uYAQKTW+DA=="}, "uuid": {"type": "string"}}}
    ToggleDNSSECRequestBody: {"type": "object", "properties": {"enabled": {"type": "boolean"}}}
    ToggleDNSSECResponse: {"type": "object", "properties": {"algorithm": {"type": "string", "description": "Specifies the algorithm used for the key.", "example": "13"}, "digest": {"type": "string", "description": "Represents the hashed value of the DS record.", "example": "28D2F00FB7FD127C05D1CE02BFA8660B094CA6728B1619ABA2144234F7221069"}, "digest_algorithm": {"type": "string", "description": "Specifies the algorithm used to generate the digest.", "example": "SHA256"}, "digest_type": {"type": "string", "description": "Specifies the type of the digest algorithm used.", "example": "2"}, "ds": {"type": "string", "description": "Represents the complete DS record.", "example": "zxy.com. 3600 IN DS 26191 13 2 135E208FF18578AB18C1EB8EA064BE08324DCBA6CF08FF55D76F0DBD4BF49F07"}, "flags": {"type": "integer", "description": "Represents the flag for DNSSEC record.", "format": "int64", "example": 257}, "key_tag": {"type": "integer", "description": "Represents the identifier of the DNSKEY record.", "format": "int64", "example": 26191}, "key_type": {"type": "string", "description": "Specifies the type of the key used in the algorithm.", "example": "ECDSAP256SHA256"}, "message": {"type": "string"}, "public_key": {"type": "string", "description": "Represents the public key used in the DS record.", "example": "ahD2C5Th+4NIFmErQPgSe/j6yPc2pbuhr3QcOJImCYHtv/mR/2qP2yHjBE1x20ERnmAnp6e6//g0uYAQKTW+DA=="}}}
    EnableZoneResponse: {"type": "object"}
    StatisticsZoneResponse: {"type": "object", "properties": {"requests": {"type": "object", "description": "Requests amount (values) for particular zone fractionated by time intervals (keys).\nExample of response:\n`{\n\"requests\": {\n\"1598608080000\": 14716,\n\"1598608140000\": 51167,\n\"1598608200000\": 53432,\n\"1598611020000\": 51050,\n\"1598611080000\": 52611,\n\"1598611140000\": 46884\n}\n}`"}, "total": {"type": "integer", "description": "Total - sum of all values", "format": "uint64"}}, "description": "StatisticsZoneResponse"}
    ExportZoneResponse: {"type": "object", "properties": {"raw_zone": {"type": "string"}}}
    Reader: {"title": "Reader is the interface that wraps the basic Read method.", "type": "object", "description": "Read reads up to len(p) bytes into p. It returns the number of bytes\nread (0 <= n <= len(p)) and any error encountered. Even if Read\nreturns n < len(p), it may use all of p as scratch space during the call.\nIf some data is available but not len(p) bytes, Read conventionally\nreturns what is available instead of waiting for more.\nWhen Read encounters an error or end-of-file condition after\nsuccessfully reading n > 0 bytes, it returns the number of\nbytes read. It may return the (non-nil) error from the same call\nor return the error (and n == 0) from a subsequent call.\nAn instance of this general case is that a Reader returning\na non-zero number of bytes at the end of the input stream may\nreturn either err == EOF or err == nil. The next Read should\nreturn 0, EOF.\nCallers should always process the n > 0 bytes returned before\nconsidering the error err. Doing so correctly handles I/O errors\nthat happen after reading some bytes and also both of the\nallowed EOF behaviors.\nIf len(p) == 0, Read should always return n == 0. It may return a\nnon-nil error if some error condition is known, such as EOF.\nImplementations of Read are discouraged from returning a\nzero byte count with a nil error, except when len(p) == 0.\nCallers should treat a return of 0 and nil as indicating that\nnothing happened; in particular it does not indicate EOF.\nImplementations must not retain p."}
    ImportZoneResponse: {"type": "object", "properties": {"imported": {"$ref": "#/components/schemas/ImportedRRSets"}, "success": {"type": "boolean"}, "warnings": {"$ref": "#/components/schemas/Warnings"}}}
    ImportedRRSets: {"type": "object", "properties": {"qtype": {"type": "integer", "format": "uint64"}, "resource_records": {"type": "integer", "format": "uint64"}, "rrsets": {"type": "integer", "format": "uint64"}, "skipped_resource_records": {"type": "integer", "format": "uint64"}}, "description": "ImportedRRSets - import statistics"}
    Warnings: {"type": "object", "additionalProperties": {"type": "object", "additionalProperties": {"type": "string"}}}
    ListRRSetResponse: {"type": "object", "properties": {"rrsets": {"type": "array", "items": {"$ref": "#/components/schemas/OutputRRSet"}}, "total_amount": {"type": "integer", "format": "int64"}}}
    OutputRRSet: {"required": ["name", "resource_records", "type"], "type": "object", "properties": {"filter_set_id": {"type": "integer", "format": "uint64"}, "meta": {"type": "object", "additionalProperties": {"type": "object"}, "description": "Meta information for rrset. Map with string key and any valid json as value, with valid keys\n1. `failover` (object, beta feature, might be changed in the future) can have fields\n1.1. `protocol` (string, required, HTTP, TCP, UDP, ICMP)\n1.2. `port` (int, required, 1-65535)\n1.3. `frequency` (int, required, in seconds 10-3600)\n1.4. `timeout` (int, required, in seconds 1-10),\n1.5. `method` (string, only for protocol=HTTP)\n1.6. `command` (string, bytes to be sent only for protocol=TCP/UDP)\n1.7. `url` (string, only for protocol=HTTP)\n1.8. `tls` (bool, only for protocol=HTTP)\n1.9. `regexp` (string regex to match, only for non-ICMP)\n1.10. `http_status_code` (int, only for protocol=HTTP)\n1.11. `host` (string, only for protocol=HTTP)\n2. `geodns_link` (string) - name of the geodns link to use, if previously set, must re-send when updating or\nCDN integration will be removed for this RRSet", "example": {}}, "name": {"type": "string", "example": "sub.example.com"}, "pickers": {"type": "array", "description": "Set of pickers", "items": {"$ref": "#/components/schemas/OutputFilter"}}, "resource_records": {"type": "array", "description": "List of resource record from rrset", "items": {"$ref": "#/components/schemas/OutputResourceRecord"}}, "ttl": {"type": "integer", "format": "uint32"}, "type": {"type": "string", "description": "RRSet type", "enum": ["A", "AAAA", "NS", "CNAME", "MX", "TXT", "SRV", "SOA"]}, "updated_at": {"$ref": "#/components/schemas/Timestamp"}, "warning": {"type": "string", "description": "Warning about some possible side effects without strictly disallowing operations on rrset\nreadonly\nDeprecated: use Warnings instead"}, "warnings": {"type": "array", "description": "Warning about some possible side effects without strictly disallowing operations on rrset\nreadonly", "items": {"$ref": "#/components/schemas/Warning"}}}}
    OutputFilter: {"required": ["type"], "type": "object", "properties": {"limit": {"type": "integer", "description": "Limits the number of records returned by the filter\nCan be a positive value for a specific limit. Use zero or leave it blank to indicate no limits.", "format": "int64"}, "strict": {"type": "boolean", "description": "if strict=false, then the filter will return all records if no records match the filter"}, "type": {"type": "string", "description": "Filter type", "enum": ["geodns", "asn", "country", "continent", "region", "ip", "geodistance", "weighted_shuffle", "default", "first_n"]}}}
    OutputResourceRecord: {"required": ["content"], "type": "object", "properties": {"content": {"type": "array", "description": "Content of resource record\nThe exact length of the array depends on the type of rrset,\neach individual record parameter must be a separate element of the array. For example\n+ SRV-record: `[100, 1, 5061, \"example.com\"]`\n+ CNAME-record: `[ \"the.target.domain\" ]`\n+ A-record: `[ \"1.2.3.4\", \"5.6.7.8\" ]`\n+ AAAA-record: `[ \"2001:db8::1\", \"2001:db8::2\" ]`\n+ MX-record: `[ \"mail1.example.com\", \"mail2.example.com\" ]`\n+ SVCB/HTTPS-record: `[ 1, \".\", [\"alpn\", \"h3\", \"h2\"], [ \"port\", 1443 ], [ \"ipv4hint\", \"10.0.0.1\" ], [ \"ech\", \"AEn+DQBFKwAgACABWIHUGj4u+PIggYXcR5JF0gYk3dCRioBW8uJq9H4mKAAIAAEAAQABAANAEnB1YmxpYy50bHMtZWNoLmRldgAA\" ] ]`", "items": {"type": "object"}}, "enabled": {"type": "boolean", "default": true}, "id": {"type": "integer", "format": "uint64", "example": 42}, "meta": {"type": "object", "additionalProperties": {"type": "object"}, "description": "Meta information for record\nMap with string key and any valid json as value, with valid keys\n1. `asn` (array of int)\n2. `continents` (array of string)\n3. `countries` (array of string)\n4. `latlong` (array of float64, latitude and longitude)\n5. `fallback` (bool)\n6. `backup` (bool)\n7. `notes` (string)\n8. `weight` (float)\n9. `ip` (string)\nSome keys are reserved for balancing, @see https://api.gcore.com/dns/v2/info/meta\nThis meta will be used to decide which resource record should pass\nthrough filters from the filter set"}}}
    Timestamp: {"type": "string", "description": "Timestamp marshals/unmarshals date and time as timestamp in json", "format": "date-time"}
    Warning: {"type": "object", "properties": {"key": {"type": "string"}, "message": {"type": "string"}}}
    InputRRSet: {"required": ["resource_records"], "type": "object", "properties": {"meta": {"type": "object", "additionalProperties": {"type": "object"}, "description": "Meta information for rrset", "example": {}}, "pickers": {"type": "array", "description": "Set of pickers", "items": {"$ref": "#/components/schemas/OutputFilter"}}, "resource_records": {"type": "array", "description": "List of resource record from rrset", "items": {"$ref": "#/components/schemas/InputResourceRecord"}}, "ttl": {"type": "integer", "format": "uint32"}}}
    InputResourceRecord: {"required": ["content"], "type": "object", "properties": {"content": {"type": "array", "description": "Content of resource record\nThe exact length of the array depends on the type of rrset,\neach individual record parameter must be a separate element of the array. For example\n+ SRV-record: `[100, 1, 5061, \"example.com\"]`\n+ CNAME-record: `[ \"the.target.domain\" ]`\n+ A-record: `[ \"1.2.3.4\", \"5.6.7.8\" ]`\n+ AAAA-record: `[ \"2001:db8::1\", \"2001:db8::2\" ]`\n+ MX-record: `[ \"mail1.example.com\", \"mail2.example.com\" ]`\n+ SVCB/HTTPS-record: `[ 1, \".\", [\"alpn\", \"h3\", \"h2\"], [ \"port\", 1443 ], [ \"ipv4hint\", \"10.0.0.1\" ], [ \"ech\", \"AEn+DQBFKwAgACABWIHUGj4u+PIggYXcR5JF0gYk3dCRioBW8uJq9H4mKAAIAAEAAQABAANAEnB1YmxpYy50bHMtZWNoLmRldgAA\" ] ]`", "items": {"type": "object"}}, "enabled": {"type": "boolean", "default": true}, "meta": {"type": "object", "additionalProperties": {"type": "object"}, "description": "This meta will be used to decide which resource record should pass\nthrough filters from the filter set"}}, "description": "nolint: lll"}
    DeleteRRSetResponse: {"type": "object"}
    FailoverLogResponse: {"type": "object", "properties": {"log": {"$ref": "#/components/schemas/FailoverLog"}, "total_amount": {"type": "integer", "format": "int64"}}}
    FailoverLog: {"type": "array", "description": "FailoverLog", "items": {"$ref": "#/components/schemas/FailoverLogEntry"}}
    FailoverLogEntry: {"type": "object", "properties": {"action": {"type": "string"}, "address": {"type": "string"}, "time": {"type": "integer", "format": "int64"}}, "description": "FailoverLogEntry"}
  securitySchemes:
    APIKey:
      description: "API key for authentication. Make sure to include the word `apikey`, followed by a single space and then your token.\nExample: `apikey 1234$abcdef`"
      type: apiKey
      in: header
      name: Authorization
