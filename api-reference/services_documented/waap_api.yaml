"openapi": "3.1.0"
"info": {"title": "Gcore OpenAPI – WAAP API", "description": "This OpenAPI is an aggregated OpenAPI specification that unifies all Gcore products into a single file. It covers Cloud, CDN, DNS, WAAP, DDoS Protection, Object Storage, Streaming, and FastEdge services.", "version": "2025-10-07T12:13:36.696059+00:00"}
"servers": ["url": "https://api.gcore.com"]
paths:
  "/waap/v1/clients/me":
    "get": {"tags": ["WAAP Service"], "summary": "Get WAAP service details", "description": "Get information about WAAP service for the client", "operationId": "get_client_info_v1_clients_me_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClientInfo"}}}}, "400": {"description": "Bad Request", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Not Found", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}}, "422": {"description": "Unprocessable Entity", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}}, "500": {"description": "Internal Server Error", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nresponse = client.waap.get_account_overview()\nprint(response.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  response, err := client.Waap.GetAccountOverview(context.TODO())\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", response.ID)\n}\n"}]}
  "/waap/v1/statistics/series":
    "get": {"tags": ["WAAP Service"], "summary": "Get statistics as time series", "description": "Retrieve statistics data as a time series. The `from` and `to` parameters are rounded down and up according to the `granularity`. This means that if the `granularity` is set to `1h`, the `from` and `to` parameters will be rounded down and up to the nearest hour, respectively. If the `granularity` is set to `1d`, the `from` and `to` parameters will be rounded down and up to the nearest day, respectively. The response will include explicit 0 values for any missing data points.", "operationId": "get_statistics_series_v1_statistics_series_get", "parameters": [{"name": "from", "in": "query", "required": true, "schema": {"type": "string", "format": "date-time", "description": "Beginning of the requested time period (ISO 8601 format, UTC)", "examples": ["2024-12-14T12:00:00Z"], "title": "From"}, "description": "Beginning of the requested time period (ISO 8601 format, UTC)"}, {"name": "to", "in": "query", "required": true, "schema": {"type": "string", "format": "date-time", "description": "End of the requested time period (ISO 8601 format, UTC)", "examples": ["2024-12-14T12:00:00Z"], "title": "To"}, "description": "End of the requested time period (ISO 8601 format, UTC)"}, {"name": "granularity", "in": "query", "required": true, "schema": {"enum": ["1h", "1d"], "type": "string", "description": "Duration of the time blocks into which the data will be divided.", "title": "Granularity"}, "description": "Duration of the time blocks into which the data will be divided."}, {"name": "metrics", "in": "query", "required": true, "schema": {"type": "array", "items": {"enum": ["total_bytes", "total_requests"], "type": "string"}, "description": "List of metric types to retrieve statistics for.", "title": "Metrics"}, "description": "List of metric types to retrieve statistics for."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StatisticsSeries"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from datetime import datetime\nfrom gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_statistics_series = client.waap.statistics.get_usage_series(\n    from_=datetime.fromisoformat(\"2024-12-14T12:00:00\"),\n    granularity=\"1h\",\n    metrics=[\"total_bytes\"],\n    to=datetime.fromisoformat(\"2024-12-14T12:00:00\"),\n)\nprint(waap_statistics_series.total_bytes)"},
        {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"time\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapStatisticsSeries, err := client.Waap.Statistics.GetUsageSeries(context.TODO(), waap.StatisticGetUsageSeriesParams{\n    From: time.Now(),\n    Granularity: waap.StatisticGetUsageSeriesParamsGranularity1h,\n    Metrics: []string{\"total_bytes\"},\n    To: time.Now(),\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapStatisticsSeries.TotalBytes)\n}\n"}]}
  "/waap/v1/domains":
    "get": {"tags": ["Domains"], "summary": "Get Domains", "description": "Retrieve a list of domains associated with the client", "operationId": "get_domains_v1_domains_get", "parameters": [{"name": "ordering", "in": "query", "required": false, "schema": {"enum": ["id", "name", "status", "created_at", "-id", "-name", "-status", "-created_at"], "type": "string", "description": "Sort the response by given field.", "title": "Ordering"}, "description": "Sort the response by given field."}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "status", "in": "query", "required": false, "schema": {"$ref": "#/components/schemas/DomainStatus", "description": "Filter domains based on the domain status", "examples": ["active"]}, "description": "Filter domains based on the domain status"}, {"name": "name", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter domains based on the domain name. Supports '\\*' as a wildcard character", "examples": ["*example.com"], "title": "Name"}, "description": "Filter domains based on the domain name. Supports '\\*' as a wildcard character"}, {"name": "ids", "in": "query", "required": false, "schema": {"type": "array", "items": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID"}, "description": "Filter domains based on their IDs", "title": "Ids"}, "description": "Filter domains based on their IDs"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_SummaryDomainResponse_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.list()\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client
            := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.List(context.TODO(), waap.DomainListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/domains/{domain_id}":
    "get": {"tags": ["Domains"], "summary": "Get Domain", "description": "Retrieve detailed information about a specific domain", "operationId": "get_domain_v1_domains__domain_id__get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetailedDomainResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_detailed_domain = client.waap.domains.get(\n    1,\n)\nprint(waap_detailed_domain.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapDetailedDomain, err := client.Waap.Domains.Get(context.TODO(), 1)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapDetailedDomain.ID)\n}\n"}]}
    "patch": {"tags": ["Domains"], "summary": "Update Domain", "operationId": "update_domain_v1_domains__domain_id__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateDomain"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.update(\n    domain_id=1,\n    status=\"active\",\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.Update(\n    context.TODO(),\n    1,\n    waap.DomainUpdateParams{\n      Status: waap.DomainUpdateParamsStatusActive,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "delete": {"tags": ["Domains"], "summary": "Delete a domain", "description": "Delete an inactive domain by ID. Only domains with status 'bypass' can be deleted.", "operationId": "delete_domain_v1_domains__domain_id__delete", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"description": "Internal server error.", "content": {"application/problem+json": {"example": {"title": "Internal server error.", "type": "internal-server-error", "status": 500, "detail": "Something went wrong. Cannot enable WAAP for this domain. Please try again later or reach out to our support team."}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.delete(\n    1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.Delete(context.TODO(), 1)\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/settings":
    "get": {"tags": ["Domains"], "summary": "Get Domain Settings", "description": "Retrieve settings for a specific domain", "operationId": "get_domain_settings_v1_domains__domain_id__settings_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DomainSettings"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_domain_settings_model = client.waap.domains.settings.get(\n    1,\n)\nprint(waap_domain_settings_model.api)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapDomainSettingsModel, err := client.Waap.Domains.Settings.Get(context.TODO(), 1)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapDomainSettingsModel.API)\n}\n"}]}
    "patch": {"tags": ["Domains"], "summary": "Update Domain Settings", "description": "Update settings for a specific domain", "operationId": "update_domain_settings_v1_domains__domain_id__settings_patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateDomainSettings"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.settings.update(\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.Settings.Update(\n    context.TODO(),\n    1,\n    waap.DomainSettingUpdateParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/rule-sets":
    "get": {"tags": ["Policies"], "summary": "Fetches rule sets associated with a specific domain", "description": "Retrieve all rule sets linked to a particular domain", "operationId": "get_rule_set_list_v1_domains__domain_id__rule_sets_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/RuleSet"}, "title": "Response Get Rule Set List V1 Domains  Domain Id  Rule Sets Get"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_rule_sets = client.waap.domains.list_rule_sets(\n    1,\n)\nprint(waap_rule_sets)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapRuleSets, err := client.Waap.Domains.ListRuleSets(context.TODO(), 1)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapRuleSets)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/policies/{policy_id}/toggle":
    "patch": {"tags": ["Policies"], "summary": "Toggle the status of a given policy", "description": "Modify the activation state of a policy associated with a domain", "operationId": "toggle_domain_policy_v1_domains__domain_id__policies__policy_id__toggle_patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "policy_id", "in": "path", "required": true, "schema": {"type": "string", "description": "The ID of the policy to toggle", "title": "Policy Id"}, "description": "The ID of the policy to toggle"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyMode"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_policy_mode = client.waap.domains.toggle_policy(\n    policy_id=\"policy_id\",\n    domain_id=1,\n)\nprint(waap_policy_mode.mode)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapPolicyMode, err := client.Waap.Domains.TogglePolicy(\n    context.TODO(),\n    \"policy_id\",\n    waap.DomainTogglePolicyParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapPolicyMode.Mode)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/traffic":
    "get": {"tags": ["Analytics"], "summary": "Fetch the traffic data for a specific domain", "description": "Retrieves a comprehensive report on a domain's traffic statistics based on Clickhouse. The report includes details such as API requests, blocked events, error counts, and many more traffic-related metrics.", "operationId": "get_traffic_v1_domains__domain_id__traffic_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "resolution", "in": "query", "required": true, "schema": {"$ref": "#/components/schemas/Resolution", "description": "Specifies the granularity of the result data."}, "description": "Specifies the granularity of the result data."}, {"name": "start", "in": "query", "required": true, "schema": {"type": "string", "description": "Filter data items starting from a specified date in ISO 8601 format", "examples": ["2024-04-13T00:00:00+01:00"], "title": "Start"}, "description": "Filter data items starting from a specified date in ISO 8601 format"}, {"name": "end", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "description": "Filter data items up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time.", "examples": ["2024-04-14T12:00:00Z"], "title": "End"}, "description": "Filter data items up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TrafficMetrics"}, "title": "Response Get Traffic V1 Domains  Domain Id  Traffic Get"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_traffic_metrics = client.waap.domains.statistics.get_traffic_series(\n    domain_id=1,\n    resolution=\"daily\",\n    start=\"2024-04-13T00:00:00+01:00\",\n)\nprint(waap_traffic_metrics)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapTrafficMetrics,
            err := client.Waap.Domains.Statistics.GetTrafficSeries(\n    context.TODO(),\n    1,\n    waap.DomainStatisticGetTrafficSeriesParams{\n      Resolution: waap.DomainStatisticGetTrafficSeriesParamsResolutionDaily,\n      Start: \"2024-04-13T00:00:00+01:00\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapTrafficMetrics)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/stats":
    "get": {"tags": ["Analytics"], "summary": "Get Event Statistics", "description": "Retrieve an domain's event statistics", "operationId": "get_event_statistics_v1_domains__domain_id__stats_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "start", "in": "query", "required": true, "schema": {"type": "string", "description": "Filter data items starting from a specified date in ISO 8601 format", "examples": ["2024-04-13T00:00:00+01:00"], "title": "Start"}, "description": "Filter data items starting from a specified date in ISO 8601 format"}, {"name": "end", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "description": "Filter data items up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time.", "examples": ["2024-04-14T12:00:00Z"], "title": "End"}, "description": "Filter data items up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time."}, {"name": "ip", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string", "format": "ipvanyaddress"}}, "type": "null"], "description": "A list of IPs to filter event statistics.", "title": "Ip"}, "description": "A list of IPs to filter event statistics."}, {"name": "reference_id", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, "type": "null"], "description": "A list of reference IDs to filter event statistics.", "title": "Reference Id"}, "description": "A list of reference IDs to filter event statistics."}, {"name": "action", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"enum": ["block", "captcha", "handshake", "monitor"], "type": "string"}}, "type": "null"], "description": "A list of action names to filter on.", "title": "Action"}, "description": "A list of action names to filter on."}, {"name": "result", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"enum": ["passed", "blocked", "monitored", "allowed"], "type": "string"}}, "type": "null"], "description": "A list of results to filter event statistics.", "title": "Result"}, "description": "A list of results to filter event statistics."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventStatistics"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected
                  condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_event_statistics = client.waap.domains.statistics.get_events_aggregated(\n    domain_id=1,\n    start=\"2024-04-13T00:00:00+01:00\",\n)\nprint(waap_event_statistics.blocked)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapEventStatistics, err := client.Waap.Domains.Statistics.GetEventsAggregated(\n    context.TODO(),\n    1,\n    waap.DomainStatisticGetEventsAggregatedParams{\n      Start: \"2024-04-13T00:00:00+01:00\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapEventStatistics.Blocked)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/requests":
    "get": {"tags": ["Analytics"], "summary": "Get Requests", "description": "Retrieve a domain's requests data.", "operationId": "get_requests_v1_domains__domain_id__requests_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"type": "string", "description": "Sort the response by given field.", "title": "Ordering"}, "description": "Sort the response by given field."}, {"name": "ip", "in": "query", "required": false, "schema": {"type": "string", "pattern": "^[0-9a-fA-F.:\\/]*$", "description": "Filter the response by IP.", "title": "Ip"}, "description": "Filter the response by IP."}, {"name": "reference_id", "in": "query", "required": false, "schema": {"type": "string", "pattern": "^[a-fA-F0-9]{32}$", "description": "Filter the response by reference ID.", "examples": ["ad07c06f19054e484974fa22e9fb6bb1"], "title": "Reference Id"}, "description": "Filter the response by reference ID."}, {"name": "status_code", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 599, "minimum": 100, "description": "Filter the response by response code.", "title": "Status Code"}, "description": "Filter the response by response code."}, {"name": "security_rule_name", "in": "query", "required": false, "schema": {"type": "string", "pattern": "^[a-zA-Z0-9_ ]*$", "description": "Filter the response by security rule name.", "title": "Security Rule Name"}, "description": "Filter the response by security rule name."}, {"name": "countries", "in": "query", "required": false, "schema": {"type": "array", "items": {"type": "string", "pattern": "^\\w{2}$"}, "description": "Filter the response by country codes in ISO 3166-1 alpha-2 format.", "title": "Countries"}, "description": "Filter the response by country codes in ISO 3166-1 alpha-2 format."}, {"name": "actions", "in": "query", "required": false, "schema": {"type": "array", "items": {"enum": ["allow", "block", "captcha", "handshake"], "type": "string"}, "description": "Filter the response by actions.", "title": "Actions"}, "description": "Filter the response by actions."}, {"name": "traffic_types", "in": "query", "required": false, "schema": {"type": "array", "items": {"$ref": "#/components/schemas/TrafficType"}, "description": "Filter the response by traffic types.", "title": "Traffic Types"}, "description": "Filter the response by traffic types."}, {"name": "start", "in": "query", "required": true, "schema": {"type": "string", "description": "Filter data items starting from a specified date in ISO 8601 format", "examples": ["2024-04-13T00:00:00+01:00"], "title": "Start"}, "description": "Filter data items starting from a specified date in ISO 8601 format"}, {"name": "end", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "description": "Filter data items up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time.", "examples": ["2024-04-14T12:00:00Z"], "title": "End"}, "description": "Filter data items up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time."}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_RequestSummary_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"},
              "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.statistics.get_requests_series(\n    domain_id=1,\n    start=\"2024-04-13T00:00:00+01:00\",\n)\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.Statistics.GetRequestsSeries(\n    context.TODO(),\n    1,\n    waap.DomainStatisticGetRequestsSeriesParams{\n      Start: \"2024-04-13T00:00:00+01:00\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/requests/{request_id}/details":
    "get": {"tags": ["Analytics"], "summary": "Get Request Details", "description": "Retrieves all the available information for a request that matches a given request id", "operationId": "get_request_details_v1_domains__domain_id__requests__request_id__details_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "request_id", "in": "path", "required": true, "schema": {"type": "string", "description": "The request ID", "title": "Request Id"}, "description": "The request ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestDetails"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_request_details = client.waap.domains.statistics.get_request_details(\n    request_id=\"request_id\",\n    domain_id=1,\n)\nprint(waap_request_details.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapRequestDetails, err := client.Waap.Domains.Statistics.GetRequestDetails(\n    context.TODO(),\n    \"request_id\",\n    waap.DomainStatisticGetRequestDetailsParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapRequestDetails.ID)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/ddos-info":
    "get": {"tags": ["Analytics"], "summary": "Get Ddos Info", "description": "Returns the top DDoS counts grouped by URL, User-Agent or IP", "operationId": "get_ddos_info_v1_domains__domain_id__ddos_info_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 10, "minimum": 0, "description": "Number of items to return", "default": 10, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "group_by", "in": "query", "required": true, "schema": {"enum": ["URL", "User-Agent", "IP"], "type": "string", "description": "The identity of the requests to group by", "title": "Group By"}, "description": "The identity of the requests to group by"}, {"name": "start", "in": "query", "required": true, "schema": {"type": "string", "description": "Filter data items starting from a specified date in ISO 8601 format", "examples": ["2024-04-13T00:00:00+01:00"], "title": "Start"}, "description": "Filter data items starting from a specified date in ISO 8601 format"}, {"name": "end", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "description": "Filter data items up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time.", "examples": ["2024-04-14T12:00:00Z"], "title": "End"}, "description": "Filter data items up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_DdosInfo_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.statistics.get_ddos_info(\n    domain_id=1,\n    group_by=\"URL\",\n    start=\"2024-04-13T00:00:00+01:00\",\n)\npage = page.results[0]\nprint(page.identity)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\
            \n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.Statistics.GetDDOSInfo(\n    context.TODO(),\n    1,\n    waap.DomainStatisticGetDDOSInfoParams{\n      GroupBy: waap.DomainStatisticGetDDOSInfoParamsGroupByURL,\n      Start: \"2024-04-13T00:00:00+01:00\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/ddos-attacks":
    "get": {"tags": ["Analytics"], "summary": "Get Ddos Attacks", "description": "Retrieve a domain's DDoS attacks", "operationId": "get_ddos_attacks_v1_domains__domain_id__ddos_attacks_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"enum": ["start_time", "-start_time", "end_time", "-end_time"], "type": "string", "description": "Sort the response by given field.", "title": "Ordering"}, "description": "Sort the response by given field."}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "start_time", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "description": "Filter attacks starting from a specified date in ISO 8601 format", "examples": ["2024-04-26T13:32:49Z"], "title": "Start Time"}, "description": "Filter attacks starting from a specified date in ISO 8601 format"}, {"name": "end_time", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "description": "Filter attacks up to a specified end date in ISO 8601 format", "examples": ["2024-04-27T13:00:00Z"], "title": "End Time"}, "description": "Filter attacks up to a specified end date in ISO 8601 format"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_DdosAttack_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.statistics.get_ddos_attacks(\n    domain_id=1,\n)\npage = page.results[0]\nprint(page.end_time)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\
            \n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.Statistics.GetDDOSAttacks(\n    context.TODO(),\n    1,\n    waap.DomainStatisticGetDDOSAttacksParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/custom-page-sets":
    "post": {"tags": ["Custom Page Sets"], "summary": "Create a custom page set", "description": "Create a custom page set based on the provided data.\nFor any custom page type (block, `block_csrf`, etc) that is not provided the default page will be used.", "operationId": "create_custom_page_set_v1_custom_page_sets_post", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomPageSetCreate"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomPageSetResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_custom_page_set = client.waap.custom_page_sets.create(\n    name=\"x\",\n)\nprint(waap_custom_page_set.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapCustomPageSet, err := client.Waap.CustomPageSets.New(context.TODO(), waap.CustomPageSetNewParams{\n    Name: \"x\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapCustomPageSet.ID)\n}\n"}]}
    "get": {"tags": ["Custom Page Sets"], "summary": "Retrieve custom page sets available for use", "description": "Retrieve a list of custom page sets available for use", "operationId": "get_custom_page_sets_v1_custom_page_sets_get", "parameters": [{"name": "ordering", "in": "query", "required": false, "schema": {"enum": ["name", "-name", "id", "-id"], "type": "string", "description": "Sort the response by given field.", "title": "Ordering"}, "description": "Sort the response by given field."}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "name", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter page sets based on their name. Supports '\\*' as a wildcard character", "examples": ["*example"], "title": "Name"}, "description": "Filter page sets based on their name. Supports '\\*' as a wildcard character"}, {"name": "ids", "in": "query", "required": false, "schema": {"type": "array", "items": {"type": "integer"}, "description": "Filter page sets based on their IDs", "title": "Ids"}, "description": "Filter page sets based on their IDs"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_CustomPageSetResponse_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.custom_page_sets.list()\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.CustomPageSets.List(context.TODO(), waap.CustomPageSetListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/custom-page-sets/{set_id}":
    "get": {"tags": ["Custom Page Sets"], "summary": "Retrieve a custom page set", "description": "Retrieve a custom page set based on the provided ID", "operationId": "get_custom_page_set_v1_custom_page_sets__set_id__get", "parameters": [{"name": "set_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The ID of the custom page set", "title": "Set Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomPageSetResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_custom_page_set = client.waap.custom_page_sets.get(\n    0,\n)\nprint(waap_custom_page_set.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapCustomPageSet, err := client.Waap.CustomPageSets.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapCustomPageSet.ID)\n}\n"}]}
    "patch": {"tags": ["Custom Page Sets"], "summary": "Update a custom page set", "description": "Update a custom page set based on the provided parameters.\nTo update a field, provide the field with the new value.\nTo remove a field, provide it as null.\nTo keep a field unaltered, do not include it in the request.\nNote: `name` cannot be removed.\nWhen updating a custom page, include all the fields that you want it to have. Any field not included will be removed.", "operationId": "update_custom_page_set_v1_custom_page_sets__set_id__patch", "parameters": [{"name": "set_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The ID of the custom page set", "title": "Set Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomPageSetUpdate"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.custom_page_sets.update(\n    set_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.CustomPageSets.Update(\n    context.TODO(),\n    0,\n    waap.CustomPageSetUpdateParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "delete": {"tags": ["Custom Page Sets"], "summary": "Delete a custom page set", "description": "Delete a custom page set", "operationId": "delete_custom_page_set_v1_custom_page_sets__set_id__delete", "parameters": [{"name": "set_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The ID of the custom page set", "title": "Set Id"}}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.custom_page_sets.delete(\n    0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.CustomPageSets.Delete(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/preview-custom-page":
    "post": {"tags": ["Custom Page Sets"], "summary": "Preview a custom page", "description": "Allows to preview a custom page without creating it based on the provided type and data", "operationId": "preview_custom_page_v1_preview_custom_page_post", "parameters": [{"name": "page_type", "in": "query", "required": true, "schema": {"$ref": "#/components/schemas/PageType"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PreviewCustomPage"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomPagePreviewResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_custom_page_preview = client.waap.custom_page_sets.preview(\n    page_type=\"block.html\",\n)\nprint(waap_custom_page_preview.html)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapCustomPagePreview, err := client.Waap.CustomPageSets.Preview(context.TODO(), waap.CustomPageSetPreviewParams{\n    PageType: waap.CustomPageSetPreviewParamsPageTypeBlockHTML,\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapCustomPagePreview.HTML)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/custom-rules":
    "get": {"tags": ["Custom Rules"], "summary": "Retrieve a domains's custom rules", "description": "Extracts a list of custom rules assigned to a domain, offering filter, ordering, and pagination capabilities", "operationId": "get_custom_rules_v1_domains__domain_id__custom_rules_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"anyOf": [{"enum": ["id", "name", "description", "enabled", "action", "-id", "-name", "-description", "-enabled", "-action"], "type": "string"}, "type": "null"], "description": "Determine the field to order results by", "examples": ["-id"], "title": "Ordering"}, "description": "Determine the field to order results by"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "name", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter rules based on their name. Supports '\\*' as a wildcard character.", "examples": ["Block by specific IP rule."], "title": "Name"}, "description": "Filter rules based on their name. Supports '\\*' as a wildcard character."}, {"name": "description", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter rules based on their description. Supports '\\*' as a wildcard character.", "examples": ["This rule blocks all the requests coming form a specific IP address."], "title": "Description"}, "description": "Filter rules based on their description. Supports '\\*' as a wildcard character."}, {"name": "action", "in": "query", "required": false, "schema": {"$ref": "#/components/schemas/RuleActionType", "description": "Filter to refine results by specific actions", "examples": ["block"]}, "description": "Filter to refine results by specific actions"}, {"name": "enabled", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Filter rules based on their active status", "examples": [false], "title": "Enabled"}, "description": "Filter rules based on their active status"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_CustomRuleResponse_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {
            "application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.custom_rules.list(\n    domain_id=1,\n)\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.CustomRules.List(\n    context.TODO(),\n    1,\n    waap.DomainCustomRuleListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
    "post": {"tags": ["Custom Rules"], "summary": "Create a custom rule", "operationId": "create_custom_rule_v1_domains__domain_id__custom_rules_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomRule"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomRuleResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Quota limit exceeded", "content": {"application/problem+json": {"example": {"title": "Quota limit exceeded", "type": "quota-check-limit-exceeded", "status": 403, "detail": "You have reached the maximum limit allowed for your current plan. Please upgrade your plan to add more."}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_custom_rule = client.waap.domains.custom_rules.create(\n    domain_id=1,\n    action={},\n    conditions=[{}],\n    enabled=True,\n    name=\"Block foobar bot\",\n)\nprint(waap_custom_rule.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapCustomRule, err := client.Waap.Domains.CustomRules.New(\n    context.TODO(),\n    1,\n    waap.DomainCustomRuleNewParams{\n      Action: waap.DomainCustomRuleNewParamsAction{\n\n      },\n      Conditions: []waap.DomainCustomRuleNewParamsCondition{waap.DomainCustomRuleNewParamsCondition{\n\n      }},\n      Enabled: true,\n      Name: \"Block foobar bot\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapCustomRule.ID)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/custom-rules/{rule_id}":
    "get": {"tags": ["Custom Rules"], "summary": "Retrieve a specific custom rule", "description": "Extracts a specific custom rule assigned to a domain", "operationId": "get_custom_rule_v1_domains__domain_id__custom_rules__rule_id__get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The custom rule ID", "title": "Rule Id"}, "description": "The custom rule ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomRuleResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_custom_rule = client.waap.domains.custom_rules.get(\n    rule_id=0,\n    domain_id=1,\n)\nprint(waap_custom_rule.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapCustomRule, err := client.Waap.Domains.CustomRules.Get(\n    context.TODO(),\n    0,\n    waap.DomainCustomRuleGetParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapCustomRule.ID)\n}\n"}]}
    "delete": {"tags": ["Custom Rules"], "summary": "Delete a custom rule", "operationId": "delete_custom_rule_v1_domains__domain_id__custom_rules__rule_id__delete", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The custom rule ID", "title": "Rule Id"}, "description": "The custom rule ID"}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"description": "Internal server error.", "content": {"application/problem+json": {"example": {"title": "Internal server error.", "type": "internal-server-error", "status": 500, "detail": "Something went wrong. Cannot enable WAAP for this domain. Please try again later or reach out to our support team."}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.custom_rules.delete(\n    rule_id=0,\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.CustomRules.Delete(\n    context.TODO(),\n    0,\n    waap.DomainCustomRuleDeleteParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "patch": {"tags": ["Custom Rules"], "summary": "Update a custom rule", "description": "Only properties present in the request will be updated", "operationId": "update_custom_rule_v1_domains__domain_id__custom_rules__rule_id__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The custom rule ID", "title": "Rule Id"}, "description": "The custom rule ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateCustomRule"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.custom_rules.update(\n    rule_id=0,\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.CustomRules.Update(\n    context.TODO(),\n    0,\n    waap.DomainCustomRuleUpdateParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/custom-rules/bulk_delete":
    "post": {"tags": ["Custom Rules"], "summary": "Delete multiple WAAP rules", "operationId": "bulk_delete_custom_rule_v1_domains__domain_id__custom_rules_bulk_delete_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RulesBulkDelete"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"description": "Internal server error.", "content": {"application/problem+json": {"example": {"title": "Internal server error.", "type": "internal-server-error", "status": 500, "detail": "Something went wrong. Cannot enable WAAP for this domain. Please try again later or reach out to our support team."}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.custom_rules.delete_multiple(\n    domain_id=1,\n    rule_ids=[0],\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.CustomRules.DeleteMultiple(\n    context.TODO(),\n    1,\n    waap.DomainCustomRuleDeleteMultipleParams{\n      RuleIDs: []int64{0},\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/custom-rules/{rule_id}/{action}":
    "patch": {"tags": ["Custom Rules"], "summary": "Toggle a custom rule", "operationId": "toggle_rule_v1_domains__domain_id__custom_rules__rule_id___action__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "action", "in": "path", "required": true, "schema": {"$ref": "#/components/schemas/CustomerRuleState", "description": "Enable or disable a custom rule"}, "description": "Enable or disable a custom rule"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The custom rule ID", "title": "Rule Id"}, "description": "The custom rule ID"}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.custom_rules.toggle(\n    action=\"enable\",\n    domain_id=1,\n    rule_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.CustomRules.Toggle(\n    context.TODO(),\n    waap.DomainCustomRuleToggleParamsActionEnable,\n    waap.DomainCustomRuleToggleParams{\n      DomainID: 1,\n      RuleID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/firewall-rules":
    "get": {"tags": ["Firewall Rules"], "summary": "Retrieve a domains's firewall rules", "description": "Extracts a list of firewall rules assigned to a domain, offering filter, ordering, and pagination capabilities", "operationId": "get_firewall_rules_v1_domains__domain_id__firewall_rules_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"anyOf": [{"enum": ["id", "name", "description", "enabled", "action", "-id", "-name", "-description", "-enabled", "-action"], "type": "string"}, "type": "null"], "description": "Determine the field to order results by", "examples": ["-id"], "title": "Ordering"}, "description": "Determine the field to order results by"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "name", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter rules based on their name. Supports '\\*' as a wildcard character.", "examples": ["Block by specific IP rule."], "title": "Name"}, "description": "Filter rules based on their name. Supports '\\*' as a wildcard character."}, {"name": "description", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter rules based on their description. Supports '\\*' as a wildcard character.", "examples": ["This rule blocks all the requests coming form a specific IP address."], "title": "Description"}, "description": "Filter rules based on their description. Supports '\\*' as a wildcard character."}, {"name": "action", "in": "query", "required": false, "schema": {"$ref": "#/components/schemas/FirewallRuleActionType", "description": "Filter to refine results by specific firewall actions", "examples": ["allow"]}, "description": "Filter to refine results by specific firewall actions"}, {"name": "enabled", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Filter rules based on their active status", "examples": [false], "title": "Enabled"}, "description": "Filter rules based on their active status"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_FirewallRuleResponse_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable
            Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.firewall_rules.list(\n    domain_id=1,\n)\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.FirewallRules.List(\n    context.TODO(),\n    1,\n    waap.DomainFirewallRuleListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
    "post": {"tags": ["Firewall Rules"], "summary": "Create a firewall rule", "operationId": "create_firewall_rule_v1_domains__domain_id__firewall_rules_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FirewallRule"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FirewallRuleResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Quota limit exceeded", "content": {"application/problem+json": {"example": {"title": "Quota limit exceeded", "type": "quota-check-limit-exceeded", "status": 403, "detail": "You have reached the maximum limit allowed for your current plan. Please upgrade your plan to add more."}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_firewall_rule = client.waap.domains.firewall_rules.create(\n    domain_id=1,\n    action={},\n    conditions=[{}],\n    enabled=True,\n    name=\"Block foobar bot\",\n)\nprint(waap_firewall_rule.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapFirewallRule, err := client.Waap.Domains.FirewallRules.New(\n    context.TODO(),\n    1,\n    waap.DomainFirewallRuleNewParams{\n      Action: waap.DomainFirewallRuleNewParamsAction{\n\n      },\n      Conditions: []waap.DomainFirewallRuleNewParamsCondition{waap.DomainFirewallRuleNewParamsCondition{\n\n      }},\n      Enabled: true,\n      Name: \"Block foobar bot\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapFirewallRule.ID)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/firewall-rules/{rule_id}":
    "get": {"tags": ["Firewall Rules"], "summary": "Retrieve a specific firewall rule", "description": "Extracts a specific firewall rule assigned to a domain", "operationId": "get_firewall_rule_v1_domains__domain_id__firewall_rules__rule_id__get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The firewall rule ID", "title": "Rule Id"}, "description": "The firewall rule ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FirewallRuleResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_firewall_rule = client.waap.domains.firewall_rules.get(\n    rule_id=0,\n    domain_id=1,\n)\nprint(waap_firewall_rule.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapFirewallRule, err := client.Waap.Domains.FirewallRules.Get(\n    context.TODO(),\n    0,\n    waap.DomainFirewallRuleGetParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapFirewallRule.ID)\n}\n"}]}
    "delete": {"tags": ["Firewall Rules"], "summary": "Delete a firewall rule", "operationId": "delete_firewall_rule_v1_domains__domain_id__firewall_rules__rule_id__delete", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The firewall rule ID", "title": "Rule Id"}, "description": "The firewall rule ID"}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"description": "Internal server error.", "content": {"application/problem+json": {"example": {"title": "Internal server error.", "type": "internal-server-error", "status": 500, "detail": "Something went wrong. Cannot enable WAAP for this domain. Please try again later or reach out to our support team."}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.firewall_rules.delete(\n    rule_id=0,\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.FirewallRules.Delete(\n    context.TODO(),\n    0,\n    waap.DomainFirewallRuleDeleteParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "patch": {"tags": ["Firewall Rules"], "summary": "Update a firewall rule", "description": "Only properties present in the request will be updated", "operationId": "update_firewall_rule_v1_domains__domain_id__firewall_rules__rule_id__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The firewall rule ID", "title": "Rule Id"}, "description": "The firewall rule ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateFirewallRule"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.firewall_rules.update(\n    rule_id=0,\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.FirewallRules.Update(\n    context.TODO(),\n    0,\n    waap.DomainFirewallRuleUpdateParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/firewall-rules/bulk_delete":
    "post": {"tags": ["Firewall Rules"], "summary": "Delete multiple WAAP rules", "operationId": "bulk_delete_firewall_rule_v1_domains__domain_id__firewall_rules_bulk_delete_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RulesBulkDelete"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"description": "Internal server error.", "content": {"application/problem+json": {"example": {"title": "Internal server error.", "type": "internal-server-error", "status": 500, "detail": "Something went wrong. Cannot enable WAAP for this domain. Please try again later or reach out to our support team."}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.firewall_rules.delete_multiple(\n    domain_id=1,\n    rule_ids=[0],\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.FirewallRules.DeleteMultiple(\n    context.TODO(),\n    1,\n    waap.DomainFirewallRuleDeleteMultipleParams{\n      RuleIDs: []int64{0},\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/firewall-rules/{rule_id}/{action}":
    "patch": {"tags": ["Firewall Rules"], "summary": "Toggle a firewall rule", "operationId": "toggle_rule_v1_domains__domain_id__firewall_rules__rule_id___action__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "action", "in": "path", "required": true, "schema": {"$ref": "#/components/schemas/CustomerRuleState", "description": "Enable or disable a firewall rule"}, "description": "Enable or disable a firewall rule"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The firewall rule ID", "title": "Rule Id"}, "description": "The firewall rule ID"}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.firewall_rules.toggle(\n    action=\"enable\",\n    domain_id=1,\n    rule_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.FirewallRules.Toggle(\n    context.TODO(),\n    waap.DomainFirewallRuleToggleParamsActionEnable,\n    waap.DomainFirewallRuleToggleParams{\n      DomainID: 1,\n      RuleID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/advanced-rules":
    "get": {"tags": ["Advanced Rules"], "summary": "Retrieve advanced rules", "description": "Retrieve a list of advanced rules assigned to a domain, offering filter, ordering, and pagination capabilities", "operationId": "get_advanced_rules_v1_domains__domain_id__advanced_rules_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"anyOf": [{"enum": ["id", "name", "description", "enabled", "action", "phase", "-id", "-name", "-description", "-enabled", "-action", "-phase"], "type": "string"}, "type": "null"], "description": "Determine the field to order results by", "examples": ["-id"], "title": "Ordering"}, "description": "Determine the field to order results by"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "name", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter rules based on their name. Supports '\\*' as a wildcard character.", "examples": ["Block by specific IP rule"], "title": "Name"}, "description": "Filter rules based on their name. Supports '\\*' as a wildcard character."}, {"name": "description", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter rules based on their description. Supports '\\*' as a wildcard character.", "examples": ["This rule blocks all the requests coming form a specific IP address"], "title": "Description"}, "description": "Filter rules based on their description. Supports '\\*' as a wildcard character."}, {"name": "action", "in": "query", "required": false, "schema": {"$ref": "#/components/schemas/RuleActionType", "description": "Filter to refine results by specific actions", "examples": ["block"]}, "description": "Filter to refine results by specific actions"}, {"name": "enabled", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Filter rules based on their active status", "examples": [false], "title": "Enabled"}, "description": "Filter rules based on their active status"}, {"name": "phase", "in": "query", "required": false, "schema": {"enum": ["access", "header_filter", "body_filter"], "type": "string", "description": "Filter rules based on the WAAP request/response phase for applying the rule.\n\n\nThe \"access\" phase is responsible for modifying the request before it is sent to the origin server. \n\nThe \"`header_filter`\" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.\n\nThe \"`body_filter`\" phase is responsible for modifying the body of a response before it is sent back to the client.", "examples": ["access"], "title": "Phase"}, "description": "Filter rules based on the WAAP request/response phase for applying the rule.\n\n\nThe \"access\" phase is responsible for modifying the request before it is sent to the origin server. \n\nThe \"`header_filter`\" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.\n\nThe \"`body_filter`\" phase is responsible for modifying the body of a response before it is sent back to the client."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_AdvancedRuleResponse_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid
                  domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.advanced_rules.list(\n    domain_id=1,\n)\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.AdvancedRules.List(\n    context.TODO(),\n    1,\n    waap.DomainAdvancedRuleListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
    "post": {"tags": ["Advanced Rules"], "summary": "Create an advanced rule", "operationId": "create_advanced_rule_v1_domains__domain_id__advanced_rules_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdvancedRule"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdvancedRuleResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Quota limit exceeded", "content": {"application/problem+json": {"example": {"title": "Quota limit exceeded", "type": "quota-check-limit-exceeded", "status": 403, "detail": "You have reached the maximum limit allowed for your current plan. Please upgrade your plan to add more."}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_advanced_rule = client.waap.domains.advanced_rules.create(\n    domain_id=1,\n    action={},\n    enabled=True,\n    name=\"Block foobar bot\",\n    source=\"request.rate_limit([], '.*events', 5, 200, [], [], '', 'ip') and not ('mb-web-ui' in request.headers['Cookie'] or 'mb-mobile-ios' in request.headers['Cookie'] or 'session-token' in request.headers['Cookie']) and not request.headers['session']\",\n)\nprint(waap_advanced_rule.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapAdvancedRule, err := client.Waap.Domains.AdvancedRules.New(\n    context.TODO(),\n    1,\n    waap.DomainAdvancedRuleNewParams{\n      Action: waap.DomainAdvancedRuleNewParamsAction{\n\n      },\n      Enabled: true,\n      Name: \"Block foobar bot\",\n      Source: \"request.rate_limit([], '.*events', 5, 200, [], [], '', 'ip') and not ('mb-web-ui' in request.headers['Cookie'] or 'mb-mobile-ios' in request.headers['Cookie'] or 'session-token' in request.headers['Cookie']) and not request.headers['session']\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapAdvancedRule.ID)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/advanced-rules/{rule_id}":
    "get": {"tags": ["Advanced Rules"], "summary": "Retrieve a specific advanced rule", "description": "Retrieve a specific advanced rule assigned to a domain", "operationId": "get_advanced_rule_v1_domains__domain_id__advanced_rules__rule_id__get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The advanced rule ID", "title": "Rule Id"}, "description": "The advanced rule ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdvancedRuleResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_advanced_rule = client.waap.domains.advanced_rules.get(\n    rule_id=0,\n    domain_id=1,\n)\nprint(waap_advanced_rule.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapAdvancedRule, err := client.Waap.Domains.AdvancedRules.Get(\n    context.TODO(),\n    0,\n    waap.DomainAdvancedRuleGetParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapAdvancedRule.ID)\n}\n"}]}
    "delete": {"tags": ["Advanced Rules"], "summary": "Delete an advanced rule", "operationId": "delete_advanced_rule_v1_domains__domain_id__advanced_rules__rule_id__delete", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The advanced rule ID", "title": "Rule Id"}, "description": "The advanced rule ID"}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"description": "Internal server error.", "content": {"application/problem+json": {"example": {"title": "Internal server error.", "type": "internal-server-error", "status": 500, "detail": "Something went wrong. Cannot enable WAAP for this domain. Please try again later or reach out to our support team."}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.advanced_rules.delete(\n    rule_id=0,\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.AdvancedRules.Delete(\n    context.TODO(),\n    0,\n    waap.DomainAdvancedRuleDeleteParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "patch": {"tags": ["Advanced Rules"], "summary": "Update an advanced rule", "description": "Only properties present in the request will be updated", "operationId": "update_advanced_rule_v1_domains__domain_id__advanced_rules__rule_id__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The advanced rule ID", "title": "Rule Id"}, "description": "The advanced rule ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateAdvancedRule"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.advanced_rules.update(\n    rule_id=0,\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.AdvancedRules.Update(\n    context.TODO(),\n    0,\n    waap.DomainAdvancedRuleUpdateParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/advanced-rules/{rule_id}/{action}":
    "patch": {"tags": ["Advanced Rules"], "summary": "Toggle an advanced rule", "operationId": "toggle_rule_v1_domains__domain_id__advanced_rules__rule_id___action__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "action", "in": "path", "required": true, "schema": {"$ref": "#/components/schemas/CustomerRuleState", "description": "Enable or disable an advanced rule"}, "description": "Enable or disable an advanced rule"}, {"name": "rule_id", "in": "path", "required": true, "schema": {"type": "integer", "description": "The advanced rule ID", "title": "Rule Id"}, "description": "The advanced rule ID"}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.advanced_rules.toggle(\n    action=\"enable\",\n    domain_id=1,\n    rule_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.AdvancedRules.Toggle(\n    context.TODO(),\n    waap.DomainAdvancedRuleToggleParamsActionEnable,\n    waap.DomainAdvancedRuleToggleParams{\n      DomainID: 1,\n      RuleID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/advanced-rules/descriptor":
    "get": {"tags": ["Advanced Rules"], "summary": "Retrieve an advanced rules descriptor", "operationId": "get_advanced_rule_descriptor_v1_advanced_rules_descriptor_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdvancedRuleDescriptorResponse"}}}}, "400": {"description": "Bad Request", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Not Found", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}}, "422": {"description": "Unprocessable Entity", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}}, "500": {"description": "Internal Server Error", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_advanced_rule_descriptor_list = client.waap.advanced_rules.list()\nprint(waap_advanced_rule_descriptor_list.version)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapAdvancedRuleDescriptorList, err := client.Waap.AdvancedRules.List(context.TODO())\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapAdvancedRuleDescriptorList.Version)\n}\n"}]}
  "/waap/v1/tags":
    "get": {"tags": ["Tags"], "summary": "Retrieve tags available for use in WAAP rule conditions sorted by name", "description": "Tags are shortcuts for the rules used in WAAP policies for the creation of more complex WAAP rules", "operationId": "get_tags_v1_tags_get", "parameters": [{"name": "ordering", "in": "query", "required": false, "schema": {"anyOf": [{"enum": ["name", "readable_name", "reserved", "-name", "-readable_name", "-reserved"], "type": "string"}, "type": "null"], "description": "Determine the field to order results by", "examples": ["name"], "title": "Ordering"}, "description": "Determine the field to order results by"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "name", "in": "query", "required": false, "schema": {"type": "string", "pattern": "^[a-zA-Z0-9*_]*$", "description": "Filter tags by their name. Supports '\\*' as a wildcard character.", "examples": ["xss"], "title": "Name"}, "description": "Filter tags by their name. Supports '\\*' as a wildcard character."}, {"name": "readable_name", "in": "query", "required": false, "schema": {"type": "string", "pattern": "^[a-zA-Z0-9*_\\- ]*$", "description": "Filter tags by their readable name. Supports '\\*' as a wildcard character.", "examples": ["Cross-Site Scripting"], "title": "Readable Name"}, "description": "Filter tags by their readable name. Supports '\\*' as a wildcard character."}, {"name": "reserved", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Filter to include only reserved tags.", "title": "Reserved"}, "description": "Filter to include only reserved tags."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_Tag_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.tags.list()\npage = page.results[0]\nprint(page.description)"}, {"lang": "Go", "source": "package
            main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Tags.List(context.TODO(), waap.TagListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/organizations":
    "get": {"tags": ["Network Organizations"], "summary": "Retrieve a list of network organizations", "description": "This endpoint retrieves a list of network organizations that own IP ranges as identified by the Whois service.It supports pagination, filtering based on various parameters, and ordering of results.", "operationId": "get_organizations_v1_organizations_get", "parameters": [{"name": "ordering", "in": "query", "required": false, "schema": {"anyOf": [{"enum": ["name", "id", "-name", "-id"], "type": "string"}, "type": "null"], "description": "Determine the field to order results by", "examples": ["name"], "title": "Ordering"}, "description": "Determine the field to order results by"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "name", "in": "query", "required": false, "schema": {"type": "string", "description": "Filter organizations by their name. Supports '\\*' as a wildcard character.", "examples": ["Comcast"], "title": "Name"}, "description": "Filter organizations by their name. Supports '\\*' as a wildcard character."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_Organization_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.organizations.list()\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Organizations.List(context.TODO(), waap.OrganizationListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/api-paths":
    "get": {"tags": ["API Discovery"], "summary": "Retrieve a list of API paths", "description": "Retrieve a list of API paths for a specific domain", "operationId": "get_api_paths_v1_domains__domain_id__api_paths_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"enum": ["id", "path", "method", "api_version", "http_scheme", "first_detected", "last_detected", "status", "source", "-id", "-path", "-method", "-api_version", "-http_scheme", "-first_detected", "-last_detected", "-status", "-source"], "type": "string", "description": "Sort the response by given field.", "title": "Ordering"}, "description": "Sort the response by given field."}, {"name": "ids", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string", "format": "uuid"}}, "type": "null"], "description": "Filter by the path ID", "title": "Ids"}, "description": "Filter by the path ID"}, {"name": "path", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "maxLength": 1024}, "type": "null"], "description": "Filter by the path. Supports '\\*' as a wildcard character", "title": "Path"}, "description": "Filter by the path. Supports '\\*' as a wildcard character"}, {"name": "method", "in": "query", "required": false, "schema": {"anyOf": ["$ref": "#/components/schemas/ApiPathMethod", "type": "null"], "description": "Filter by the API RESTful method", "title": "Method"}, "description": "Filter by the API RESTful method"}, {"name": "api_version", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "maxLength": 32}, "type": "null"], "description": "Filter by the API version", "title": "Api Version"}, "description": "Filter by the API version"}, {"name": "http_scheme", "in": "query", "required": false, "schema": {"anyOf": ["$ref": "#/components/schemas/ApiPathHttpScheme", "type": "null"], "description": "Filter by the HTTP version of the API path", "title": "Http Scheme"}, "description": "Filter by the HTTP version of the API path"}, {"name": "api_group", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "description": "Filter by the API group associated with the API path", "title": "Api Group"}, "description": "Filter by the API group associated with the API path"}, {"name": "status", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"$ref": "#/components/schemas/ApiPathStatus"}}, "type": "null"], "description": "Filter by the status of the discovered API path", "title": "Status"}, "description": "Filter by the status of the discovered API path"}, {"name": "source", "in": "query", "required": false, "schema": {"anyOf": ["$ref": "#/components/schemas/ApiPathSource", "type": "null"], "description": "Filter by the source of the discovered API", "title": "Source"}, "description": "Filter by the source of the discovered API"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 10, "minimum": 0, "description": "Number of items to return", "default": 10, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_ApiPathResponse_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {
            "application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.api_paths.list(\n    domain_id=1,\n)\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.APIPaths.List(\n    context.TODO(),\n    1,\n    waap.DomainAPIPathListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
    "post": {"tags": ["API Discovery"], "summary": "Create an API path", "description": "Create an API path for a domain", "operationId": "create_api_path_v1_domains__domain_id__api_paths_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateApiPath"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiPathResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_api_path = client.waap.domains.api_paths.create(\n    domain_id=1,\n    http_scheme=\"HTTP\",\n    method=\"GET\",\n    path=\"/api/v1/paths/{path_id}\",\n)\nprint(waap_api_path.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapAPIPath, err := client.Waap.Domains.APIPaths.New(\n    context.TODO(),\n    1,\n    waap.DomainAPIPathNewParams{\n      HTTPScheme: waap.DomainAPIPathNewParamsHTTPSchemeHTTP,\n      Method: waap.DomainAPIPathNewParamsMethodGet,\n      Path: \"/api/v1/paths/{path_id}\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapAPIPath.ID)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/api-paths/{path_id}":
    "get": {"tags": ["API Discovery"], "summary": "Retrieve an API path", "description": "Retrieve a specific API path for a domain", "operationId": "get_api_path_v1_domains__domain_id__api_paths__path_id__get", "parameters": [{"name": "path_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "The path ID", "title": "Path Id"}}, {"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiPathResponse"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_api_path = client.waap.domains.api_paths.get(\n    path_id=\"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    domain_id=1,\n)\nprint(waap_api_path.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapAPIPath, err := client.Waap.Domains.APIPaths.Get(\n    context.TODO(),\n    \"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    waap.DomainAPIPathGetParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapAPIPath.ID)\n}\n"}]}
    "patch": {"tags": ["API Discovery"], "summary": "Update an API path", "description": "Update a specific API path for a domain", "operationId": "update_api_path_v1_domains__domain_id__api_paths__path_id__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "path_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "The path ID", "title": "Path Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateApiPath"}}}}, "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.api_paths.update(\n    path_id=\"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.APIPaths.Update(\n    context.TODO(),\n    \"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    waap.DomainAPIPathUpdateParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "delete": {"tags": ["API Discovery"], "summary": "Delete an API path", "description": "Delete a specific API path for a domain", "operationId": "delete_api_path_v1_domains__domain_id__api_paths__path_id__delete", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "path_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "The path ID", "title": "Path Id"}}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.api_paths.delete(\n    path_id=\"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.APIPaths.Delete(\n    context.TODO(),\n    \"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    waap.DomainAPIPathDeleteParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/domains/{domain_id}/api-path-groups":
    "get": {"tags": ["API Discovery"], "summary": "Get a list of API path groups", "description": "Retrieve a list of API path groups for a specific domain", "operationId": "get_api_groups_v1_domains__domain_id__api_path_groups_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiPathGroups"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\napi_path_group_list = client.waap.domains.api_path_groups.list(\n    1,\n)\nprint(api_path_group_list.api_path_groups)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  apiPathGroupList, err := client.Waap.Domains.APIPathGroups.List(context.TODO(), 1)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", apiPathGroupList.APIPathGroups)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/api-discovery/upload":
    "post": {"tags": ["API Discovery"], "summary": "Upload and scan an API description file", "description": "An API description file must adhere to the OpenAPI specification and be written in YAML or JSON format.\nThe file name should be provided as the value for the `file_name` parameter.\nThe contents of the file must be base64 encoded and supplied as the value for the `file_data` parameter.", "operationId": "upload_spec_file_v1_domains__domain_id__api_discovery_upload_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiSpecFile"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskResultId"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_task_id = client.waap.domains.api_discovery.upload_openapi(\n    domain_id=1,\n    file_data=\"file_data\",\n    file_name=\"file_name\",\n)\nprint(waap_task_id.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapTaskID, err := client.Waap.Domains.APIDiscovery.UploadOpenAPI(\n    context.TODO(),\n    1,\n    waap.DomainAPIDiscoveryUploadOpenAPIParams{\n      FileData: \"file_data\",\n      FileName: \"file_name\",\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapTaskID.ID)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/api-discovery/scan":
    "post": {"tags": ["API Discovery"], "summary": "Scan an API description file", "description": "Scan an API description file hosted online.\nThe file must be in YAML or JSON format and adhere to the OpenAPI specification.\nThe location of the API description file should be specified in the API discovery settings.", "operationId": "scan_spec_file_v1_domains__domain_id__api_discovery_scan_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskResultId"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_task_id = client.waap.domains.api_discovery.scan_openapi(\n    1,\n)\nprint(waap_task_id.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapTaskID, err := client.Waap.Domains.APIDiscovery.ScanOpenAPI(context.TODO(), 1)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapTaskID.ID)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/api-discovery/settings":
    "get": {"tags": ["API Discovery"], "summary": "Get the API discovery settings", "description": "Retrieve the API discovery settings for a domain", "operationId": "get_api_discovery_settings_v1_domains__domain_id__api_discovery_settings_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiDiscoverySettings"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_api_discovery_settings = client.waap.domains.api_discovery.get_settings(\n    1,\n)\nprint(waap_api_discovery_settings.description_file_location)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapAPIDiscoverySettings, err := client.Waap.Domains.APIDiscovery.GetSettings(context.TODO(), 1)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapAPIDiscoverySettings.DescriptionFileLocation)\n}\n"}]}
    "patch": {"tags": ["API Discovery"], "summary": "Update the API discovery settings", "description": "Update the API discovery settings for a domain", "operationId": "update_api_discovery_settings_v1_domains__domain_id__api_discovery_settings_patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateApiDiscoverySettings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiDiscoverySettings"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Feature check fail", "content": {"application/problem+json": {"example": {"title": "Feature check fail", "type": "feature-check", "status": 401, "detail": "This feature is not available under your current plan. Please upgrade your plan to access this feature."}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Resource not found", "content": {"application/problem+json": {"example": {"title": "Resource not found", "type": "quota-check-no-resource", "status": 404, "detail": "The quota resource requested does not exist. Cannot enable WAAP for this domain. Please reach out to our support team."}}}}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_api_discovery_settings = client.waap.domains.api_discovery.update_settings(\n    domain_id=1,\n)\nprint(waap_api_discovery_settings.description_file_location)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapAPIDiscoverySettings, err := client.Waap.Domains.APIDiscovery.UpdateSettings(\n    context.TODO(),\n    1,\n    waap.DomainAPIDiscoveryUpdateSettingsParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapAPIDiscoverySettings.DescriptionFileLocation)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/api-discovery/scan-results":
    "get": {"tags": ["API Discovery"], "summary": "Get Scan Results", "operationId": "get_scan_results_v1_domains__domain_id__api_discovery_scan_results_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"enum": ["id", "type", "start_time", "end_time", "status", "message", "-id", "-type", "-start_time", "-end_time", "-status", "-message"], "type": "string", "description": "Sort the response by given field.", "default": "-start_time", "title": "Ordering"}, "description": "Sort the response by given field."}, {"name": "type", "in": "query", "required": false, "schema": {"anyOf": ["$ref": "#/components/schemas/ApiScanType", "type": "null"], "description": "Filter by the path of the scan type", "title": "Type"}, "description": "Filter by the path of the scan type"}, {"name": "status", "in": "query", "required": false, "schema": {"anyOf": ["$ref": "#/components/schemas/TaskResultStatus", "type": "null"], "description": "Filter by the status of the scan", "title": "Status"}, "description": "Filter by the status of the scan"}, {"name": "message", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "maxLength": 1024}, "type": "null"], "description": "Filter by the message of the scan. Supports '\\*' as a wildcard character", "title": "Message"}, "description": "Filter by the message of the scan. Supports '\\*' as a wildcard character"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_ApiScanResult_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.api_discovery.list_scan_results(\n\
            \    domain_id=1,\n)\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.APIDiscovery.ListScanResults(\n    context.TODO(),\n    1,\n    waap.DomainAPIDiscoveryListScanResultsParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/api-discovery/scan-results/{scan_id}":
    "get": {"tags": ["API Discovery"], "summary": "Get Scan Result", "operationId": "get_scan_result_v1_domains__domain_id__api_discovery_scan_results__scan_id__get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "scan_id", "in": "path", "required": true, "schema": {"type": "string", "description": "The scan ID", "title": "Scan Id"}, "description": "The scan ID"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiScanResult"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_api_scan_result = client.waap.domains.api_discovery.get_scan_result(\n    scan_id=\"scan_id\",\n    domain_id=1,\n)\nprint(waap_api_scan_result.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapAPIScanResult, err := client.Waap.Domains.APIDiscovery.GetScanResult(\n    context.TODO(),\n    \"scan_id\",\n    waap.DomainAPIDiscoveryGetScanResultParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapAPIScanResult.ID)\n}\n"}]}
  "/waap/v1/ip-info/attack-map":
    "get": {"tags": ["IP Spotlight"], "summary": "Get a list of countries attacked by a specific IP", "description": "Retrieve a list of countries attacked by the specified IP address", "operationId": "get_attack_map_v1_ip_info_attack_map_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/IpCountryAttack"}, "maxItems": 10, "title": "Response Get Attack Map V1 Ip Info Attack Map Get"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_ip_country_attacks = client.waap.ip_info.list_attacked_countries(\n    ip=\"192.168.1.1\",\n)\nprint(waap_ip_country_attacks)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapIPCountryAttacks, err := client.Waap.IPInfo.ListAttackedCountries(context.TODO(), waap.IPInfoListAttackedCountriesParams{\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapIPCountryAttacks)\n}\n"}]}
  "/waap/v1/ip-info/counts":
    "get": {"tags": ["IP Spotlight"], "summary": "Fetch request and session metrics for a given IP address (and optionally a domain)", "description": "Retrieve metrics encompassing the counts of total requests, blocked requests and unique sessions associated with a specified IP address. Metrics provide a statistical overview, aiding in analyzing the interaction and access patterns of the IP address in context.", "operationId": "get_counts_v1_ip_info_counts_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}, {"name": "domain_id", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer", "exclusiveMinimum": 0, "title": "Domain ID", "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}, "type": "null"], "title": "Domain Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IpInfoCounts"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_ip_info_counts = client.waap.ip_info.metrics.list(\n    ip=\"192.168.1.1\",\n)\nprint(waap_ip_info_counts.blocked_requests)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapIPInfoCounts, err := client.Waap.IPInfo.Metrics.List(context.TODO(), waap.IPInfoMetricListParams{\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapIPInfoCounts.BlockedRequests)\n}\n"}]}
  "/waap/v1/ip-info/attack-time-series":
    "get": {"tags": ["IP Spotlight"], "summary": "Retrieve a time-series of attacks from a specified IP", "description": "Retrieve a time-series of attacks originating from a specified IP address.", "operationId": "get_attack_time_series_v1_ip_info_attack_time_series_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TimeSeriesAttack"}, "title": "Response Get Attack Time Series V1 Ip Info Attack Time Series Get"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_time_series_attacks = client.waap.ip_info.get_attack_time_series(\n    ip=\"192.168.1.1\",\n)\nprint(waap_time_series_attacks)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapTimeSeriesAttacks, err := client.Waap.IPInfo.GetAttackTimeSeries(context.TODO(), waap.IPInfoGetAttackTimeSeriesParams{\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapTimeSeriesAttacks)\n}\n"}]}
  "/waap/v1/ip-info/blocked-requests":
    "get": {"tags": ["IP Spotlight"], "summary": "Fetch metrics of blocked requests from a specific IP to a domain, categorized by rule and action", "description": "Retrieve metrics, which enumerate blocked requests originating from a specific IP to a domain, grouped by rule name and taken action. Each metric provides insights into the request count blocked under a specific rule and the corresponding action that was executed.", "operationId": "get_blocked_requests_v1_ip_info_blocked_requests_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}, {"name": "domain_id", "in": "query", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "title": "Domain ID", "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}, "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/RuleBlockedRequests"}, "maxItems": 10, "title": "Response Get Blocked Requests V1 Ip Info Blocked Requests Get"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_rule_blocked_requests = client.waap.ip_info.get_blocked_requests(\n    domain_id=1,\n    ip=\"192.168.1.1\",\n)\nprint(waap_rule_blocked_requests)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapRuleBlockedRequests, err := client.Waap.IPInfo.GetBlockedRequests(context.TODO(), waap.IPInfoGetBlockedRequestsParams{\n    DomainID: 1,\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapRuleBlockedRequests)\n}\n"}]}
  "/waap/v1/ip-info/top-urls":
    "get": {"tags": ["IP Spotlight"], "summary": "Retrieve top 10 accessed URLs for an IP on a domain", "description": "Returns a list of the top 10 URLs accessed by a specified IP address within a specific domain. This data is vital to understand user navigation patterns, pinpoint high-traffic pages, and facilitate more targeted enhancements or security monitoring based on URL popularity.", "operationId": "get_top_urls_v1_ip_info_top_urls_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}, {"name": "domain_id", "in": "query", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "title": "Domain ID", "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}, "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TopUrl"}, "maxItems": 10, "title": "Response Get Top Urls V1 Ip Info Top Urls Get"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_top_urls = client.waap.ip_info.get_top_urls(\n    domain_id=1,\n    ip=\"192.168.1.1\",\n)\nprint(waap_top_urls)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapTopURLs, err := client.Waap.IPInfo.GetTopURLs(context.TODO(), waap.IPInfoGetTopURLsParams{\n    DomainID: 1,\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapTopURLs)\n}\n"}]}
  "/waap/v1/ip-info/top-user-agents":
    "get": {"tags": ["IP Spotlight"], "summary": "Fetch top user agents", "description": "Retrieve the top 10 user agents interacting with a specified domain, filtered by IP.", "operationId": "get_top_user_agents_v1_ip_info_top_user_agents_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}, {"name": "domain_id", "in": "query", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "title": "Domain ID", "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}, "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TopUserAgent"}, "maxItems": 10, "title": "Response Get Top User Agents V1 Ip Info Top User Agents Get"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_top_user_agents = client.waap.ip_info.get_top_user_agents(\n    domain_id=1,\n    ip=\"192.168.1.1\",\n)\nprint(waap_top_user_agents)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapTopUserAgents, err := client.Waap.IPInfo.GetTopUserAgents(context.TODO(), waap.IPInfoGetTopUserAgentsParams{\n    DomainID: 1,\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapTopUserAgents)\n}\n"}]}
  "/waap/v1/ip-info/top-sessions":
    "get": {"tags": ["IP Spotlight"], "summary": "Retrieve top user sessions", "description": "Obtain the top 10 user sessions interfacing with a particular domain, identified by IP.", "operationId": "get_top_sessions_v1_ip_info_top_sessions_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}, {"name": "domain_id", "in": "query", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "title": "Domain ID", "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}, "description": "The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TopSession"}, "maxItems": 10, "title": "Response Get Top Sessions V1 Ip Info Top Sessions Get"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_top_sessions = client.waap.ip_info.get_top_user_sessions(\n    domain_id=1,\n    ip=\"192.168.1.1\",\n)\nprint(waap_top_sessions)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapTopSessions, err := client.Waap.IPInfo.GetTopUserSessions(context.TODO(), waap.IPInfoGetTopUserSessionsParams{\n    DomainID: 1,\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapTopSessions)\n}\n"}]}
  "/waap/v1/ip-info/ddos":
    "get": {"tags": ["IP Spotlight"], "summary": "Retrieve time-series DDoS metrics for a specific IP address", "description": "Fetch and analyze DDoS (Distributed Denial of Service) attack metrics for a specified IP address. The endpoint provides time-series data, enabling users to evaluate the frequency and intensity of attacks across various time intervals, and it returns metrics in Prometheus format to offer a systematic view of DDoS attack patterns.", "operationId": "get_ip_ddos_info_v1_ip_info_ddos_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IpDdosInfo"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_ip_ddos_info_model = client.waap.ip_info.get_ddos_attack_series(\n    ip=\"192.168.1.1\",\n)\nprint(waap_ip_ddos_info_model.botnet_client)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapIPDDOSInfoModel, err := client.Waap.IPInfo.GetDDOSAttackSeries(context.TODO(), waap.IPInfoGetDDOSAttackSeriesParams{\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapIPDDOSInfoModel.BotnetClient)\n}\n"}]}
  "/waap/v1/ip-info/ip-info":
    "get": {"tags": ["IP Spotlight"], "summary": "Retrieve comprehensive IP address data", "description": "Fetch details about a particular IP address, including WHOIS data, risk score, and additional tags.", "operationId": "get_ip_info_v1_ip_info_ip_info_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"anyOf": [{"type": "string", "format": "ipv4"}, {"type": "string", "format": "ipv6"}], "description": "The IP address to check", "title": "Ip"}, "description": "The IP address to check"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IpInfo"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_ip_info = client.waap.ip_info.get_ip_info(\n    ip=\"192.168.1.1\",\n)\nprint(waap_ip_info.risk_score)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapIPInfo, err := client.Waap.IPInfo.GetIPInfo(context.TODO(), waap.IPInfoGetIPInfoParams{\n    IP: \"192.168.1.1\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapIPInfo.RiskScore)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/insights":
    "get": {"tags": ["Security Insights"], "summary": "Retrieve a list of insights", "description": "Retrieve a list of insights for a specific domain.", "operationId": "get_insights_v1_domains__domain_id__insights_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"$ref": "#/components/schemas/InsightSortBy", "description": "Sort the response by given field.", "default": "-last_seen"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "id", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string", "format": "uuid"}}, "type": "null"], "description": "The ID of the insight", "title": "Id"}, "description": "The ID of the insight"}, {"name": "insight_type", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, "type": "null"], "description": "The type of the insight", "title": "Insight Type"}, "description": "The type of the insight"}, {"name": "status", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"$ref": "#/components/schemas/InsightStatus"}}, "type": "null"], "description": "The status of the insight", "title": "Status"}, "description": "The status of the insight"}, {"name": "description", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "maxLength": 450}, "type": "null"], "description": "The description of the insight. Supports '\\*' as a wildcard.", "title": "Description"}, "description": "The description of the insight. Supports '\\*' as a wildcard."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_Insight_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\
            \nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.domains.insights.list(\n    domain_id=1,\n)\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.Insights.List(\n    context.TODO(),\n    1,\n    waap.DomainInsightListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/insights/{insight_id}":
    "get": {"tags": ["Security Insights"], "summary": "Retrieve a specific insight", "description": "Retrieve a specific insight for a specific domain.", "operationId": "get_insight_v1_domains__domain_id__insights__insight_id__get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "insight_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Insight Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Insight"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_insight = client.waap.domains.insights.get(\n    insight_id=\"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    domain_id=1,\n)\nprint(waap_insight.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapInsight, err := client.Waap.Domains.Insights.Get(\n    context.TODO(),\n    \"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    waap.DomainInsightGetParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapInsight.ID)\n}\n"}]}
    "put": {"tags": ["Security Insights"], "summary": "Update an insight", "description": "Update the status of an insight for a specific domain.", "operationId": "update_insight_v1_domains__domain_id__insights__insight_id__put", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "insight_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "The ID of the insight", "title": "Insight Id"}, "description": "The ID of the insight"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateInsightPayload"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Insight"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_insight = client.waap.domains.insights.replace(\n    insight_id=\"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    domain_id=1,\n    status=\"OPEN\",\n)\nprint(waap_insight.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapInsight, err := client.Waap.Domains.Insights.Replace(\n    context.TODO(),\n    \"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    waap.DomainInsightReplaceParams{\n      DomainID: 1,\n      Status: waap.DomainInsightReplaceParamsStatusOpen,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapInsight.ID)\n}\n"}]}
  "/waap/v1/security-insights/types":
    "get": {"tags": ["Security Insights"], "summary": "Retrieve a list of insight types", "description": "Insight types are generalized categories that encompass various specific occurrences of the same kind.", "operationId": "get_insight_types_v1_security_insights_types_get", "parameters": [{"name": "ordering", "in": "query", "required": false, "schema": {"enum": ["name", "-name", "slug", "-slug", "insight_frequency", "-insight_frequency"], "type": "string", "description": "Sort the response by given field.", "default": "name", "title": "Ordering"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "name", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "description": "Filter by the name of the insight type", "title": "Name"}, "description": "Filter by the name of the insight type"}, {"name": "slug", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$", "description": "The slug of the insight type"}, "type": "null"], "description": "Filter by the slug of the insight type", "title": "Slug"}, "description": "Filter by the slug of the insight type"}, {"name": "insight_frequency", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer", "exclusiveMinimum": 0}, "type": "null"], "description": "Filter by the frequency of the insight type", "title": "Insight Frequency"}, "description": "Filter by the frequency of the insight type"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_InsightType_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.waap.insights.list_types()\npage = page.results[0]\nprint(page.description)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\
            \n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Insights.ListTypes(context.TODO(), waap.InsightListTypesParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/insight-silences":
    "post": {"tags": ["Security Insights"], "summary": "Create an insight silence", "description": "Create a new insight silence for a specified domain. Insight silences help in temporarily disabling certain insights based on specific criteria.", "operationId": "create_insight_silence_v1_domains__domain_id__insight_silences_post", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateInsightSilencePayload"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InsightSilence"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_insight_silence = client.waap.domains.insight_silences.create(\n    domain_id=1,\n    author=\"author\",\n    comment=\"comment\",\n    insight_type=\"26f1klzn5713-56bincal4ca-60zz1k91s4\",\n    labels={\n        \"foo\": \"string\"\n    },\n)\nprint(waap_insight_silence.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapInsightSilence, err := client.Waap.Domains.InsightSilences.New(\n    context.TODO(),\n    1,\n    waap.DomainInsightSilenceNewParams{\n      Author: \"author\",\n      Comment: \"comment\",\n      InsightType: \"26f1klzn5713-56bincal4ca-60zz1k91s4\",\n      Labels: map[string]string{\n      \"foo\": \"string\",\n      },\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapInsightSilence.ID)\n}\n"}]}
    "get": {"tags": ["Security Insights"], "summary": "Retrieve a list of insight silences", "description": "Retrieve a list of insight silences for a specific domain", "operationId": "get_insight_silences_v1_domains__domain_id__insight_silences_get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "ordering", "in": "query", "required": false, "schema": {"$ref": "#/components/schemas/InsightSilenceSortBy", "description": "Sort the response by given field.", "default": "-id"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}, {"name": "id", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string", "format": "uuid"}}, "type": "null"], "description": "The ID of the insight silence", "title": "Id"}, "description": "The ID of the insight silence"}, {"name": "insight_type", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, "type": "null"], "description": "The type of the insight silence", "title": "Insight Type"}, "description": "The type of the insight silence"}, {"name": "comment", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "description": "The comment of the insight silence", "title": "Comment"}, "description": "The comment of the insight silence"}, {"name": "author", "in": "query", "required": false, "schema": {"anyOf": ["type": "string", "type": "null"], "description": "The author of the insight silence", "title": "Author"}, "description": "The author of the insight silence"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_InsightSilence_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n\
            )\npage = client.waap.domains.insight_silences.list(\n    domain_id=1,\n)\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Waap.Domains.InsightSilences.List(\n    context.TODO(),\n    1,\n    waap.DomainInsightSilenceListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/waap/v1/domains/{domain_id}/insight-silences/{silence_id}":
    "get": {"tags": ["Security Insights"], "summary": "Retrieve a specific insight silence", "description": "Retrieve a specific insight silence for a specific domain", "operationId": "get_insight_silence_v1_domains__domain_id__insight_silences__silence_id__get", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "silence_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "A generated unique identifier for the silence", "title": "Silence Id"}, "description": "A generated unique identifier for the silence"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InsightSilence"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_insight_silence = client.waap.domains.insight_silences.get(\n    silence_id=\"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    domain_id=1,\n)\nprint(waap_insight_silence.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapInsightSilence, err := client.Waap.Domains.InsightSilences.Get(\n    context.TODO(),\n    \"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    waap.DomainInsightSilenceGetParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapInsightSilence.ID)\n}\n"}]}
    "patch": {"tags": ["Security Insights"], "summary": "Update an insight silence", "description": "Update an insight silence for a specific domain.", "operationId": "update_insight_silence_v1_domains__domain_id__insight_silences__silence_id__patch", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "silence_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "A generated unique identifier for the silence", "title": "Silence Id"}, "description": "A generated unique identifier for the silence"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateInsightSilencePayload"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InsightSilence"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from datetime import datetime\nfrom gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nwaap_insight_silence = client.waap.domains.insight_silences.update(\n    silence_id=\"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    domain_id=1,\n    author=\"author\",\n    comment=\"comment\",\n    expire_at=datetime.fromisoformat(\"2019-12-27T18:11:19.117\"),\n)\nprint(waap_insight_silence.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"time\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  waapInsightSilence, err := client.Waap.Domains.InsightSilences.Update(\n    context.TODO(),\n    \"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    waap.DomainInsightSilenceUpdateParams{\n      DomainID: 1,\n      Author: \"author\",\n      Comment: \"comment\",\n      ExpireAt: gcore.Time(time.Now()),\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", waapInsightSilence.ID)\n}\n"}]}
    "delete": {"tags": ["Security Insights"], "summary": "Delete an insight silence", "description": "Delete an insight silence for a specific domain.", "operationId": "delete_insight_silence_v1_domains__domain_id__insight_silences__silence_id__delete", "parameters": [{"name": "domain_id", "in": "path", "required": true, "schema": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID", "title": "Domain Id"}, "description": "The domain ID"}, {"name": "silence_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "A generated unique identifier for the silence", "title": "Silence Id"}, "description": "A generated unique identifier for the silence"}], "responses": {"204": {"description": "Successful Response"}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.waap.domains.insight_silences.delete(\n    silence_id=\"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    domain_id=1,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/waap\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Waap.Domains.InsightSilences.Delete(\n    context.TODO(),\n    \"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e\",\n    waap.DomainInsightSilenceDeleteParams{\n      DomainID: 1,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/waap/v1/ip-reputation":
    "get": {"tags": ["IP Reputation"], "summary": "Get a IP tags", "description": "Retrieve a list of tags associated with the IP address grouped by domains. This will return records for all domains which were accessed by the IP and received tags.", "operationId": "get_ip_reputation_summary_v1_ip_reputation_get", "parameters": [{"name": "ip", "in": "query", "required": true, "schema": {"type": "string", "format": "ipvanyaddress", "title": "Ip"}, "description": "The IP address to check"}, {"name": "ordering", "in": "query", "required": false, "schema": {"enum": ["date", "-date", "domain_name", "-domain_name"], "type": "string", "description": "Sort the response by given field.", "default": "-date", "title": "Ordering"}, "description": "Sort the response by given field."}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 0, "description": "Number of items to return", "default": 100, "title": "Limit", "x-stainless-skip": ["terraform"]}, "description": "Number of items to return"}, {"name": "offset", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100000, "minimum": 0, "description": "Number of items to skip", "default": 0, "title": "Offset"}, "description": "Number of items to skip"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_LocalIpTagsRecord_"}}}}, "400": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}, "description": "Bad Request"}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}, "description": "Not Found"}, "422": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}, "description": "Unprocessable Entity"}, "500": {"content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}, "description": "Internal Server Error"}}}
  "/waap/v1/ip-reputation/clear-local-tags":
    "post": {"tags": ["IP Reputation"], "summary": "Clear local IP tags", "description": "Clear all tags associated between the provided IP addresses and domains.", "operationId": "delete_local_ip_tags_v1_ip_reputation_clear_local_tags_post", "requestBody": {"content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/IPReputationDeleteRequest"}, "type": "array", "maxItems": 100, "minItems": 1, "title": "Items"}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "400": {"description": "Bad Request", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-bad-request", "title": "Bad Request", "status": 400, "detail": "Invalid domain name: ''''"}}}}, "401": {"description": "Unauthorized", "content": {"application/problem+json": {"example": {"detail": "Auth token is missing or invalid"}}}}, "403": {"description": "Unauthenticated", "content": {"application/problem+json": {"example": {"detail": "Permission denied"}}}}, "404": {"description": "Not Found", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "http-not-found", "title": "Not Found", "status": 404, "detail": "The resource is not found"}}}}, "422": {"description": "Unprocessable Entity", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APICompositeError"}, "example": {"type": "request-validation-failed", "title": "Request validation error.", "status": 422, "detail": "One or more fields have validation errors.", "errors": [{"loc": ["body", "name"], "detail": "Input should be a valid string"}, {"loc": ["body", "date"], "detail": "Field required"}, {"loc": ["query", "limit"], "detail": "Field required"}]}}}}, "500": {"description": "Internal Server Error", "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/APIError"}, "example": {"type": "internal-server-error", "title": "Internal server error.", "status": 500, "detail": "An unexpected condition was encountered which prevented the server from fulfilling the request."}}}}}}
tags:
- {"name": "WAAP Service", "x-displayName": "WAAP Service"}
- {"name": "Domains", "x-displayName": "Domains"}
- {"name": "Policies", "x-displayName": "Policies"}
- {"name": "Analytics", "x-displayName": "Analytics"}
- {"name": "Custom Page Sets", "x-displayName": "Custom Page Sets"}
- {"name": "Custom Rules", "x-displayName": "Custom Rules"}
- {"name": "Firewall Rules", "x-displayName": "Firewall Rules"}
- {"name": "Advanced Rules", "x-displayName": "Advanced Rules"}
- {"name": "Tags", "x-displayName": "Tags"}
- {"name": "Network Organizations", "x-displayName": "Network Organizations"}
- {"name": "API Discovery", "x-displayName": "API Discovery"}
- {"name": "IP Spotlight", "x-displayName": "IP Spotlight"}
- {"name": "Security Insights", "x-displayName": "Security Insights"}
- {"name": "IP Reputation", "x-displayName": "IP Reputation"}
x-tagGroups:
- {"name": "WAAP API", "tags": ["WAAP Service", "Domains", "Policies", "Analytics", "Custom Page Sets", "Custom Rules", "Firewall Rules", "Advanced Rules", "Tags", "Network Organizations", "API Discovery", "IP Spotlight", "Security Insights", "IP Reputation"]}
security: ["APIKey": []]
components:
  schemas:
    APICompositeError: {"properties": {"type": {"type": "string", "title": "Type", "description": "A URI identifier that categorizes the type of error."}, "title": {"type": "string", "title": "Title", "description": "A brief, human-readable title for the error."}, "status": {"type": "integer", "title": "Status", "description": "The HTTP status code applicable to this error."}, "detail": {"anyOf": ["type": "string", "type": "null"], "title": "Detail", "description": "A detailed human-readable explanation of the error."}, "errors": {"items": {"$ref": "#/components/schemas/APIFieldError"}, "type": "array", "title": "Errors", "description": "A list of detailed errors for individual fields."}}, "type": "object", "required": ["type", "title", "status", "detail", "errors"], "title": "APICompositeError"}
    APIError: {"properties": {"type": {"type": "string", "title": "Type", "description": "A URI identifier that categorizes the type of error."}, "title": {"type": "string", "title": "Title", "description": "A brief, human-readable title for the error."}, "status": {"type": "integer", "title": "Status", "description": "The HTTP status code applicable to this error."}, "detail": {"anyOf": ["type": "string", "type": "null"], "title": "Detail", "description": "A detailed human-readable explanation of the error."}}, "type": "object", "required": ["type", "title", "status", "detail"], "title": "APIError"}
    APIFieldError: {"properties": {"loc": {"anyOf": [{"items": {"anyOf": ["type": "integer", "type": "string"]}, "type": "array"}, {}], "title": "Loc", "description": "The location of the field or a character number causing the error."}, "detail": {"type": "string", "title": "Detail", "description": "A human-readable message describing the error."}}, "type": "object", "required": ["loc", "detail"], "title": "APIFieldError"}
    AdvancedRule: {"properties": {"name": {"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "title": "Name", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "description": {"type": "string", "maxLength": 100, "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"$ref": "#/components/schemas/CustomerRuleAction-Input", "description": "The action that the rule takes when triggered. Only one action can be set per rule."}, "source": {"type": "string", "minLength": 1, "title": "Source", "description": "A CEL syntax expression that contains the rule's conditions. Allowed objects are: request, whois, session, response, tags, `user_defined_tags`, `user_agent`, `client_data`.\n\nMore info can be found here: https://gcore.com/docs/waap/waap-rules/advanced-rules", "examples": ["request.rate_limit([], '.*events', 5, 200, [], [], '', 'ip') and not ('mb-web-ui' in request.headers['Cookie'] or 'mb-mobile-ios' in request.headers['Cookie'] or 'session-token' in request.headers['Cookie']) and not request.headers['session']"]}, "phase": {"anyOf": [{"type": "string", "enum": ["access", "header_filter", "body_filter"]}, "type": "null"], "title": "Phase", "description": "The WAAP request/response phase for applying the rule. Default is \"access\".\n\n\nThe \"access\" phase is responsible for modifying the request before it is sent to the origin server. \n\nThe \"`header_filter`\" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.\n\nThe \"`body_filter`\" phase is responsible for modifying the body of a response before it is sent back to the client.", "default": "access"}}, "type": "object", "required": ["name", "enabled", "action", "source"], "title": "AdvancedRule", "description": "A request to create a new advanced rule"}
    AdvancedRuleDescriptor: {"properties": {"name": {"type": "string", "title": "Name", "description": "The object's name"}, "type": {"type": "string", "title": "Type", "description": "The object's type"}, "description": {"anyOf": ["type": "string", "type": "null"], "title": "Description", "description": "The object's description"}, "attrs": {"anyOf": [{"items": {"$ref": "#/components/schemas/AdvancedRuleDescriptorAttr"}, "type": "array"}, "type": "null"], "title": "Attrs", "description": "The object's attributes list"}}, "type": "object", "required": ["name", "type"], "title": "AdvancedRuleDescriptor", "description": "Advanced rules descriptor object"}
    AdvancedRuleDescriptorArg: {"properties": {"name": {"type": "string", "title": "Name", "description": "The argument's name"}, "type": {"type": "string", "title": "Type", "description": "The argument's type"}, "description": {"anyOf": ["type": "string", "type": "null"], "title": "Description", "description": "The argument's description"}}, "type": "object", "required": ["name", "type"], "title": "AdvancedRuleDescriptorArg", "description": "An argument of a descriptor's object"}
    AdvancedRuleDescriptorAttr: {"properties": {"name": {"type": "string", "title": "Name", "description": "The attribute's name"}, "type": {"type": "string", "title": "Type", "description": "The attribute's type"}, "hint": {"anyOf": ["type": "string", "type": "null"], "title": "Hint", "description": "The attribute's hint"}, "description": {"anyOf": ["type": "string", "type": "null"], "title": "Description", "description": "The attribute's description"}, "args": {"anyOf": [{"items": {"$ref": "#/components/schemas/AdvancedRuleDescriptorArg"}, "type": "array"}, "type": "null"], "title": "Args", "description": "A list of arguments for the attribute"}}, "type": "object", "required": ["name", "type"], "title": "AdvancedRuleDescriptorAttr", "description": "An attribute of a descriptor's object"}
    AdvancedRuleDescriptorResponse: {"properties": {"version": {"type": "string", "title": "Version", "description": "The descriptor's version"}, "objects": {"anyOf": [{"items": {"$ref": "#/components/schemas/AdvancedRuleDescriptor"}, "type": "array"}, "type": "null"], "title": "Objects"}}, "type": "object", "required": ["version"], "title": "AdvancedRuleDescriptorResponse", "description": "A response from a request to retrieve an advanced rules descriptor"}
    AdvancedRuleResponse: {"properties": {"name": {"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "title": "Name", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "description": {"type": "string", "maxLength": 100, "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"$ref": "#/components/schemas/CustomerRuleAction-Output", "description": "The action that the rule takes when triggered. Only one action can be set per rule."}, "source": {"type": "string", "minLength": 1, "title": "Source", "description": "A CEL syntax expression that contains the rule's conditions. Allowed objects are: request, whois, session, response, tags, `user_defined_tags`, `user_agent`, `client_data`.\n\nMore info can be found here: https://gcore.com/docs/waap/waap-rules/advanced-rules", "examples": ["request.rate_limit([], '.*events', 5, 200, [], [], '', 'ip') and not ('mb-web-ui' in request.headers['Cookie'] or 'mb-mobile-ios' in request.headers['Cookie'] or 'session-token' in request.headers['Cookie']) and not request.headers['session']"]}, "phase": {"anyOf": [{"type": "string", "enum": ["access", "header_filter", "body_filter"]}, "type": "null"], "title": "Phase", "description": "The WAAP request/response phase for applying the rule. Default is \"access\".\n\n\nThe \"access\" phase is responsible for modifying the request before it is sent to the origin server. \n\nThe \"`header_filter`\" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.\n\nThe \"`body_filter`\" phase is responsible for modifying the body of a response before it is sent back to the client.", "default": "access"}, "id": {"type": "integer", "title": "Id", "description": "The unique identifier for the rule"}}, "type": "object", "required": ["name", "enabled", "action", "source", "id"], "title": "AdvancedRuleResponse", "description": "An advanced WAAP rule applied to a domain"}
    ApiDiscoverySettings: {"properties": {"descriptionFileLocation": {"anyOf": ["type": "string", "type": "null"], "title": "Descriptionfilelocation", "description": "The URL of the API description file. This will be periodically scanned if `descriptionFileScanEnabled` is enabled. Supported formats are YAML and JSON, and it must adhere to OpenAPI versions 2, 3, or 3.1."}, "descriptionFileScanEnabled": {"anyOf": ["type": "boolean", "type": "null"], "title": "Descriptionfilescanenabled", "description": "Indicates if periodic scan of the description file is enabled"}, "descriptionFileScanIntervalHours": {"anyOf": ["type": "integer", "type": "null"], "title": "Descriptionfilescanintervalhours", "description": "The interval in hours for scanning the description file"}, "trafficScanEnabled": {"anyOf": ["type": "boolean", "type": "null"], "title": "Trafficscanenabled", "description": "Indicates if traffic scan is enabled. Traffic scan is used to discover undocumented APIs"}, "trafficScanIntervalHours": {"anyOf": ["type": "integer", "type": "null"], "title": "Trafficscanintervalhours", "description": "The interval in hours for scanning the traffic"}}, "type": "object", "title": "ApiDiscoverySettings", "description": "Response model for the API discovery settings"}
    ApiPathGroups: {"properties": {"api_path_groups": {"items": {"type": "string"}, "type": "array", "title": "Api Path Groups", "description": "An array of api groups associated with the API path", "examples": [["accounts", "internal"]]}}, "type": "object", "required": ["api_path_groups"], "title": "ApiPathGroups", "description": "Response model for the API path groups"}
    ApiPathHttpScheme: {"type": "string", "enum": ["HTTP", "HTTPS"], "title": "ApiPathHttpScheme", "description": "The different HTTP schemes an API path can have"}
    ApiPathMethod: {"type": "string", "enum": ["GET", "POST", "PUT", "PATCH", "DELETE", "TRACE", "HEAD", "OPTIONS"], "title": "ApiPathMethod", "description": "The different methods an API path can have"}
    ApiPathResponse: {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id", "description": "The path ID"}, "path": {"type": "string", "maxLength": 1024, "title": "Path", "description": "The API path, locations that are saved for resource IDs will be put in curly brackets", "examples": ["/api/v1/paths/{path_id}"]}, "method": {"$ref": "#/components/schemas/ApiPathMethod", "description": "The API RESTful method"}, "api_version": {"type": "string", "maxLength": 32, "title": "Api Version", "description": "The API version", "examples": ["v1"]}, "http_scheme": {"$ref": "#/components/schemas/ApiPathHttpScheme", "description": "The HTTP version of the API path"}, "first_detected": {"type": "string", "format": "date-time", "title": "First Detected", "description": "The date and time in ISO 8601 format the API path was first detected."}, "last_detected": {"type": "string", "format": "date-time", "title": "Last Detected", "description": "The date and time in ISO 8601 format the API path was last detected."}, "tags": {"items": {"type": "string", "maxLength": 50, "pattern": "^[a-zA-Z]+[ a-zA-Z0-9]*$", "description": "A user defined tag. Tags must start with a letter and can contain only letters, numbers and spaces."}, "type": "array", "maxItems": 5, "title": "Tags", "description": "An array of tags associated with the API path", "examples": [["sensitivedataurl", "highriskurl"]]}, "api_groups": {"items": {"type": "string"}, "type": "array", "title": "Api Groups", "description": "An array of api groups associated with the API path", "examples": [["accounts", "internal"]]}, "status": {"$ref": "#/components/schemas/ApiPathStatus", "description": "The status of the discovered API path"}, "source": {"$ref": "#/components/schemas/ApiPathSource", "description": "The source of the discovered API"}, "request_count": {"type": "integer", "title": "Request Count", "description": "The number of requests for this path in the last 24 hours"}}, "type": "object", "required": ["id", "path", "method", "api_version", "http_scheme", "first_detected", "last_detected", "tags", "api_groups", "status", "source", "request_count"], "title": "ApiPathResponse", "description": "Response model for the API path"}
    ApiPathSource: {"type": "string", "enum": ["API_DESCRIPTION_FILE", "TRAFFIC_SCAN", "USER_DEFINED"], "title": "ApiPathSource", "description": "The different sources an API path can have"}
    ApiPathStatus: {"type": "string", "enum": ["CONFIRMED_API", "POTENTIAL_API", "NOT_API", "DELISTED_API"], "title": "ApiPathStatus", "description": "The different statuses an API path can have"}
    ApiScanResult: {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id", "description": "The scan ID"}, "start_time": {"type": "string", "format": "date-time", "title": "Start Time", "description": "The date and time the scan started"}, "end_time": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "title": "End Time", "description": "The date and time the scan ended"}, "status": {"$ref": "#/components/schemas/TaskResultStatus", "description": "The status of the scan"}, "type": {"$ref": "#/components/schemas/ApiScanType", "description": "The type of scan"}, "message": {"type": "string", "title": "Message", "description": "The message associated with the scan"}}, "type": "object", "required": ["id", "start_time", "end_time", "status", "type", "message"], "title": "ApiScanResult", "description": "The result of a scan"}
    ApiScanType: {"type": "string", "enum": ["TRAFFIC_SCAN", "API_DESCRIPTION_FILE_SCAN"], "title": "ApiScanType", "description": "The different types of scans that can be performed"}
    ApiSettings: {"properties": {"is_api": {"type": "boolean", "title": "Is Api", "description": "Indicates if the domain is an API domain. All requests to an API domain are treated as API requests. If this is set to true then the `api_urls` field is ignored.", "default": false}, "api_urls": {"items": {"type": "string"}, "type": "array", "title": "Api Urls", "description": "The API URLs for a domain. If your domain has a common base URL for all API paths, it can be set here", "default": [], "examples": [["api/v1/.*", "v2/.*"]]}}, "type": "object", "title": "ApiSettings", "description": "API settings of a domain"}
    ApiSpecFile: {"properties": {"file_name": {"type": "string", "title": "File Name", "description": "The name of the file"}, "file_data": {"type": "string", "title": "File Data", "description": "Base64 representation of the description file. Supported formats are YAML and JSON, and it must adhere to OpenAPI versions 2, 3, or 3.1."}}, "type": "object", "required": ["file_name", "file_data"], "title": "ApiSpecFile", "description": "Request model for uploading an API spec file"}
    BlockCsrfPageData: {"properties": {"logo": {"type": "string", "title": "A base64 encoded image of the logo to present", "description": "Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included."}, "header": {"type": "string", "maxLength": 62, "minLength": 3, "title": "Header", "description": "The text to display in the header of the custom page"}, "title": {"type": "string", "maxLength": 50, "minLength": 3, "title": "Title", "description": "The text to display in the title of the custom page"}, "text": {"type": "string", "maxLength": 400, "minLength": 20, "title": "Text", "description": "The text to display in the body of the custom page"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Indicates whether the custom custom page is active or inactive"}}, "type": "object", "required": ["enabled"], "title": "BlockCsrfPageData"}
    BlockPageData: {"properties": {"logo": {"type": "string", "title": "A base64 encoded image of the logo to present", "description": "Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included."}, "header": {"type": "string", "maxLength": 62, "minLength": 3, "title": "Header", "description": "The text to display in the header of the custom page"}, "title": {"type": "string", "maxLength": 50, "minLength": 3, "title": "Title", "description": "The text to display in the title of the custom page"}, "text": {"type": "string", "maxLength": 400, "minLength": 20, "title": "Text", "description": "The text to display in the body of the custom page"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Indicates whether the custom custom page is active or inactive"}}, "type": "object", "required": ["enabled"], "title": "BlockPageData"}
    Blocked: {"properties": {"action": {"items": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array"}, "type": "array", "title": "Action", "description": "A collection of event counts per action. The first item is the action's abbreviation/full action name, and the second item is the number of events"}, "country": {"items": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array"}, "type": "array", "title": "Country", "description": "A collection of event counts per country of origin. The first item is the country's ISO 3166-1 alpha-2, and the second item is the number of events"}, "org": {"items": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array"}, "type": "array", "title": "Org", "description": "A collection of event counts per organization that owns the event's client IP. The first item is the organization's name, and the second item is the number of events"}, "rule_name": {"items": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array"}, "type": "array", "title": "Rule Name", "description": "A collection of event counts per rule that triggered the event. The first item is the rule's name, and the second item is the number of events"}}, "type": "object", "required": ["action", "country", "org", "rule_name"], "title": "Blocked", "description": "A collection of total numbers of events with blocked results per criteria"}
    CaptchaPageData: {"properties": {"logo": {"type": "string", "title": "A base64 encoded image of the logo to present", "description": "Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included."}, "header": {"type": "string", "maxLength": 62, "minLength": 3, "title": "Header", "description": "The text to display in the header of the custom page"}, "title": {"type": "string", "maxLength": 50, "minLength": 3, "title": "Title", "description": "The text to display in the title of the custom page"}, "text": {"type": "string", "maxLength": 400, "minLength": 20, "title": "Text", "description": "The text to display in the body of the custom page"}, "error": {"type": "string", "maxLength": 400, "minLength": 10, "title": "Error", "description": "Error message"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Indicates whether the custom custom page is active or inactive"}}, "type": "object", "required": ["enabled"], "title": "CaptchaPageData"}
    ClientInfo: {"properties": {"id": {"anyOf": ["type": "integer", "type": "null"], "title": "Id", "description": "The client ID"}, "service": {"$ref": "#/components/schemas/Service", "description": "Information about the WAAP service status"}, "features": {"items": {"type": "string"}, "type": "array", "title": "Features", "description": "List of enabled features"}, "quotas": {"additionalProperties": {"$ref": "#/components/schemas/QuotaItem"}, "type": "object", "title": "Quotas", "description": "Quotas for the client", "examples": ["number-of-domains": {"allowed": 5, "current": 1}]}}, "type": "object", "required": ["id", "service", "features", "quotas"], "title": "ClientInfo", "description": "Represents the WAAP service information for a client"}
    CommonTag: {"properties": {"tag": {"type": "string", "title": "Tag", "description": "Tag name", "examples": ["injectionattack"]}, "display_name": {"type": "string", "title": "Display Name", "description": "The tag's display name", "examples": ["Injection Attack"]}, "description": {"type": "string", "title": "Description", "description": "Tag description information", "examples": ["Multiple injection attempts were detected."]}}, "type": "object", "required": ["tag", "display_name", "description"], "title": "CommonTag", "description": "Common tag details"}
    ContentTypeCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "content_type": {"items": {"type": "string", "maxLength": 50, "minLength": 1, "description": "Individual MIME type to match", "examples": ["application/xml"]}, "type": "array", "maxItems": 10, "minItems": 1, "title": "Content Type", "description": "The list of content types to match against"}}, "type": "object", "required": ["content_type"], "title": "ContentTypeCondition", "description": "Match the requested Content-Type"}
    CookieDisabledPageData: {"properties": {"header": {"type": "string", "maxLength": 62, "minLength": 3, "title": "Header", "description": "The text to display in the header of the custom page"}, "text": {"type": "string", "maxLength": 400, "minLength": 20, "title": "Text", "description": "The text to display in the body of the custom page"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Indicates whether the custom custom page is active or inactive"}}, "type": "object", "required": ["enabled"], "title": "CookieDisabledPageData"}
    CountryCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "country_code": {"items": {"type": "string", "pattern": "^\\w{2}$"}, "type": "array", "maxItems": 100, "minItems": 1, "title": "Country Code", "description": "A list of ISO 3166-1 alpha-2 formatted strings representing the countries to match against"}}, "type": "object", "required": ["country_code"], "title": "CountryCondition", "description": "Match the country that the request originated from"}
    CreateApiPath: {"properties": {"path": {"type": "string", "maxLength": 1024, "title": "Path", "description": "The API path, locations that are saved for resource IDs will be put in curly brackets", "examples": ["/api/v1/paths/{path_id}"]}, "method": {"$ref": "#/components/schemas/ApiPathMethod"}, "http_scheme": {"$ref": "#/components/schemas/ApiPathHttpScheme"}, "api_version": {"type": "string", "maxLength": 32, "title": "Api Version", "examples": ["v1"]}, "tags": {"items": {"type": "string", "maxLength": 50, "pattern": "^[a-zA-Z]+[ a-zA-Z0-9]*$", "description": "A user defined tag. Tags must start with a letter and can contain only letters, numbers and spaces."}, "type": "array", "maxItems": 5, "title": "Tags", "examples": [["sensitivedataurl", "highriskurl"]]}, "api_groups": {"items": {"type": "string"}, "type": "array", "title": "Api Groups", "examples": [["accounts", "internal"]]}}, "type": "object", "required": ["path", "method", "http_scheme"], "title": "CreateApiPath", "description": "Request model for creating an API path"}
    CreateInsightSilencePayload: {"properties": {"insight_type": {"type": "string", "maxLength": 64, "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$", "title": "Insight Type", "description": "The slug of the insight type"}, "labels": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Labels", "description": "A hash table of label names and values that apply to the insight silence"}, "comment": {"type": "string", "maxLength": 180, "title": "Comment", "description": "A comment explaining the reason for the silence"}, "author": {"type": "string", "maxLength": 180, "title": "Author", "description": "The author of the silence"}, "expire_at": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "title": "Expire At", "description": "The date and time the silence expires in ISO 8601 format"}}, "type": "object", "required": ["insight_type", "labels", "comment", "author"], "title": "CreateInsightSilencePayload"}
    CustomPagePreviewResponse: {"properties": {"html": {"type": "string", "title": "Html", "description": "HTML content of the custom page"}}, "type": "object", "required": ["html"], "title": "CustomPagePreviewResponse"}
    CustomPageSetCreate: {"properties": {"domains": {"anyOf": [{"items": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID"}, "type": "array"}, "type": "null"], "title": "Domains", "description": "List of domain IDs that are associated with this page set"}, "block": {"anyOf": ["$ref": "#/components/schemas/BlockPageData", "type": "null"]}, "block_csrf": {"anyOf": ["$ref": "#/components/schemas/BlockCsrfPageData", "type": "null"]}, "captcha": {"anyOf": ["$ref": "#/components/schemas/CaptchaPageData", "type": "null"]}, "cookie_disabled": {"anyOf": ["$ref": "#/components/schemas/CookieDisabledPageData", "type": "null"]}, "handshake": {"anyOf": ["$ref": "#/components/schemas/HandshakePageData", "type": "null"]}, "javascript_disabled": {"anyOf": ["$ref": "#/components/schemas/JavascriptDisabledPageData", "type": "null"]}, "name": {"type": "string", "maxLength": 50, "minLength": 1, "title": "Name", "description": "Name of the custom page set"}}, "additionalProperties": false, "type": "object", "required": ["name"], "title": "CustomPageSetCreate", "description": "Create a custom page set"}
    CustomPageSetResponse: {"properties": {"domains": {"anyOf": [{"items": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID"}, "type": "array"}, "type": "null"], "title": "Domains", "description": "List of domain IDs that are associated with this page set"}, "block": {"anyOf": ["$ref": "#/components/schemas/BlockPageData", "type": "null"]}, "block_csrf": {"anyOf": ["$ref": "#/components/schemas/BlockCsrfPageData", "type": "null"]}, "captcha": {"anyOf": ["$ref": "#/components/schemas/CaptchaPageData", "type": "null"]}, "cookie_disabled": {"anyOf": ["$ref": "#/components/schemas/CookieDisabledPageData", "type": "null"]}, "handshake": {"anyOf": ["$ref": "#/components/schemas/HandshakePageData", "type": "null"]}, "javascript_disabled": {"anyOf": ["$ref": "#/components/schemas/JavascriptDisabledPageData", "type": "null"]}, "name": {"type": "string", "maxLength": 50, "minLength": 1, "title": "Name", "description": "Name of the custom page set"}, "id": {"type": "integer", "title": "Id", "description": "The ID of the custom page set"}}, "additionalProperties": false, "type": "object", "required": ["name", "id"], "title": "CustomPageSetResponse"}
    CustomPageSetUpdate: {"properties": {"domains": {"anyOf": [{"items": {"type": "integer", "exclusiveMinimum": 0, "description": "The domain ID"}, "type": "array"}, "type": "null"], "title": "Domains", "description": "List of domain IDs that are associated with this page set"}, "block": {"anyOf": ["$ref": "#/components/schemas/BlockPageData", "type": "null"]}, "block_csrf": {"anyOf": ["$ref": "#/components/schemas/BlockCsrfPageData", "type": "null"]}, "captcha": {"anyOf": ["$ref": "#/components/schemas/CaptchaPageData", "type": "null"]}, "cookie_disabled": {"anyOf": ["$ref": "#/components/schemas/CookieDisabledPageData", "type": "null"]}, "handshake": {"anyOf": ["$ref": "#/components/schemas/HandshakePageData", "type": "null"]}, "javascript_disabled": {"anyOf": ["$ref": "#/components/schemas/JavascriptDisabledPageData", "type": "null"]}, "name": {"anyOf": [{"type": "string", "maxLength": 50, "minLength": 1}, "type": "null"], "title": "Name", "description": "Name of the custom page set"}}, "additionalProperties": false, "type": "object", "title": "CustomPageSetUpdate", "description": "Update a custom page set"}
    CustomRule: {"properties": {"name": {"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "title": "Name", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "description": {"type": "string", "maxLength": 100, "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"$ref": "#/components/schemas/CustomerRuleAction-Input", "description": "The action that the rule takes when triggered. Only one action can be set per rule."}, "conditions": {"items": {"$ref": "#/components/schemas/CustomRuleCondition-Input"}, "type": "array", "maxItems": 5, "minItems": 1, "title": "Conditions", "description": "The conditions required for the WAAP engine to trigger the rule. Rules may have between 1 and 5 conditions. All conditions must pass for the rule to trigger"}}, "type": "object", "required": ["name", "enabled", "action", "conditions"], "title": "CustomRule", "description": "A request to create a new WAAP rule"}
    CustomRuleCondition-Input: {"properties": {"ip": {"$ref": "#/components/schemas/IpCondition"}, "ip_range": {"$ref": "#/components/schemas/IpRangeCondition"}, "url": {"$ref": "#/components/schemas/UrlCondition"}, "user_agent": {"$ref": "#/components/schemas/UserAgentCondition"}, "header": {"$ref": "#/components/schemas/HeaderCondition"}, "header_exists": {"$ref": "#/components/schemas/HeaderExistsCondition"}, "response_header": {"$ref": "#/components/schemas/ResponseHeaderCondition"}, "response_header_exists": {"$ref": "#/components/schemas/ResponseHeaderExistsCondition"}, "http_method": {"$ref": "#/components/schemas/HttpMethodCondition"}, "file_extension": {"$ref": "#/components/schemas/FileExtensionCondition"}, "content_type": {"$ref": "#/components/schemas/ContentTypeCondition"}, "country": {"$ref": "#/components/schemas/CountryCondition"}, "organization": {"$ref": "#/components/schemas/OrganizationCondition"}, "request_rate": {"$ref": "#/components/schemas/RequestRateCondition"}, "owner_types": {"$ref": "#/components/schemas/OwnerTypesCondition"}, "tags": {"$ref": "#/components/schemas/TagsCondition"}, "session_request_count": {"$ref": "#/components/schemas/SessionRequestCountCondition"}, "user_defined_tags": {"$ref": "#/components/schemas/UserDefinedTagsCondition"}}, "additionalProperties": false, "type": "object", "title": "CustomRuleCondition", "description": "The criteria of an incoming web request and the models of the various values those criteria can take"}
    CustomRuleCondition-Output: {"properties": {"ip": {"$ref": "#/components/schemas/IpCondition"}, "ip_range": {"$ref": "#/components/schemas/IpRangeCondition"}, "url": {"$ref": "#/components/schemas/UrlCondition"}, "user_agent": {"$ref": "#/components/schemas/UserAgentCondition"}, "header": {"$ref": "#/components/schemas/HeaderCondition"}, "header_exists": {"$ref": "#/components/schemas/HeaderExistsCondition"}, "response_header": {"$ref": "#/components/schemas/ResponseHeaderCondition"}, "response_header_exists": {"$ref": "#/components/schemas/ResponseHeaderExistsCondition"}, "http_method": {"$ref": "#/components/schemas/HttpMethodCondition"}, "file_extension": {"$ref": "#/components/schemas/FileExtensionCondition"}, "content_type": {"$ref": "#/components/schemas/ContentTypeCondition"}, "country": {"$ref": "#/components/schemas/CountryCondition"}, "organization": {"$ref": "#/components/schemas/OrganizationCondition"}, "request_rate": {"$ref": "#/components/schemas/RequestRateCondition"}, "owner_types": {"$ref": "#/components/schemas/OwnerTypesCondition"}, "tags": {"$ref": "#/components/schemas/TagsCondition"}, "session_request_count": {"$ref": "#/components/schemas/SessionRequestCountCondition"}, "user_defined_tags": {"$ref": "#/components/schemas/UserDefinedTagsCondition"}}, "additionalProperties": false, "type": "object", "title": "CustomRuleCondition", "description": "The criteria of an incoming web request and the models of the various values those criteria can take"}
    CustomRuleResponse: {"properties": {"name": {"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "title": "Name", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "description": {"type": "string", "maxLength": 100, "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"$ref": "#/components/schemas/CustomerRuleAction-Output", "description": "The action that the rule takes when triggered. Only one action can be set per rule."}, "conditions": {"items": {"$ref": "#/components/schemas/CustomRuleCondition-Output"}, "type": "array", "maxItems": 5, "minItems": 1, "title": "Conditions", "description": "The conditions required for the WAAP engine to trigger the rule. Rules may have between 1 and 5 conditions. All conditions must pass for the rule to trigger"}, "id": {"type": "integer", "title": "Id", "description": "The unique identifier for the rule"}}, "type": "object", "required": ["name", "enabled", "action", "conditions", "id"], "title": "CustomRuleResponse", "description": "An WAAP rule applied to a domain"}
    CustomerRuleAction-Input: {"properties": {"allow": {"$ref": "#/components/schemas/RuleAllowAction"}, "block": {"$ref": "#/components/schemas/RuleBlockAction"}, "captcha": {"$ref": "#/components/schemas/RuleCaptchaAction"}, "handshake": {"$ref": "#/components/schemas/RuleHandshakeAction"}, "monitor": {"$ref": "#/components/schemas/RuleMonitorAction"}, "tag": {"$ref": "#/components/schemas/RuleTagAction"}}, "additionalProperties": false, "type": "object", "title": "CustomerRuleAction", "description": "The action that a WAAP rule takes when triggered."}
    CustomerRuleAction-Output: {"properties": {"allow": {"$ref": "#/components/schemas/RuleAllowAction"}, "block": {"$ref": "#/components/schemas/RuleBlockAction"}, "captcha": {"$ref": "#/components/schemas/RuleCaptchaAction"}, "handshake": {"$ref": "#/components/schemas/RuleHandshakeAction"}, "monitor": {"$ref": "#/components/schemas/RuleMonitorAction"}, "tag": {"$ref": "#/components/schemas/RuleTagAction"}}, "additionalProperties": false, "type": "object", "title": "CustomerRuleAction", "description": "The action that a WAAP rule takes when triggered."}
    CustomerRuleState: {"type": "string", "enum": ["enable", "disable"], "title": "CustomerRuleState"}
    DdosAttack: {"properties": {"start_time": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "title": "Start Time", "description": "Start time of DDoS attack"}, "end_time": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "title": "End Time", "description": "End time of DDoS attack"}}, "type": "object", "title": "DdosAttack"}
    DdosInfo: {"properties": {"type": {"type": "string", "enum": ["URL", "IP", "User-Agent"], "title": "Type"}, "identity": {"type": "string", "title": "Identity", "description": "The value for the grouped by type"}, "count": {"type": "integer", "title": "Count", "description": "The number of requests made"}}, "type": "object", "required": ["type", "identity", "count"], "title": "DdosInfo"}
    DetailedDomainResponse: {"properties": {"id": {"type": "integer", "exclusiveMinimum": 0, "title": "Id", "description": "The domain ID"}, "name": {"type": "string", "maxLength": 255, "title": "Name", "description": "The domain name"}, "custom_page_set": {"anyOf": [{"type": "integer", "description": "The ID of the custom page set"}, "type": "null"], "title": "Custom Page Set"}, "status": {"$ref": "#/components/schemas/DomainStatus"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At", "description": "The date and time the domain was created in ISO 8601 format"}, "quotas": {"anyOf": [{"additionalProperties": {"$ref": "#/components/schemas/QuotaItem"}, "type": "object"}, "type": "null"], "title": "Quotas", "description": "Domain level quotas", "examples": ["firewall-rules": {"allowed": 5, "current": 2}, "custom-rules": {"allowed": 10, "current": 1}]}}, "type": "object", "required": ["id", "name", "custom_page_set", "status", "created_at"], "title": "DetailedDomainResponse", "description": "Represents a WAAP domain, serving as a singular unit within the WAAP\nservice.\n\nEach domain functions autonomously, possessing its own set of rules and\nconfigurations to manage web application firewall settings and\nbehaviors."}
    DomainDdosSettings: {"properties": {"global_threshold": {"type": "integer", "maximum": 50000, "minimum": 250, "title": "Global Threshold", "description": "The global threshold is responsible for identifying DDoS attacks with a slow rise in traffic. If the threshold is met and the current number of requests is at least double that of the previous 10-second window, DDoS protection will activate. Default is 5000."}, "burst_threshold": {"type": "integer", "maximum": 10000, "minimum": 30, "title": "Burst Threshold", "description": "The burst threshold detects sudden rises in traffic. If it is met and the number of requests is at least five times the last 2-second interval, DDoS protection will activate. Default is 1000."}, "sub_second_threshold": {"type": "integer", "maximum": 1000, "minimum": 25, "title": "Sub Second Threshold", "description": "The sub-second threshold protects WAAP servers against attacks from traffic bursts. When this threshold is reached, the DDoS mode will activate on the affected WAAP server, not the whole WAAP cluster. Default is 50."}}, "type": "object", "title": "DomainDdosSettings", "description": "DDoS settings for a domain."}
    DomainInfo: {"properties": {"id": {"type": "integer", "title": "Id", "description": "The unique identifier for the domain"}, "name": {"type": "string", "title": "Name", "description": "The domain name"}}, "type": "object", "required": ["id", "name"], "title": "DomainInfo"}
    DomainPolicy: {"properties": {"id": {"type": "string", "title": "Id", "description": "Unique identifier for the security rule"}, "name": {"type": "string", "title": "Name", "description": "Name of the security rule"}, "description": {"type": "string", "title": "Description", "description": "Detailed description of the security rule"}, "action": {"$ref": "#/components/schemas/PolicyAction", "description": "Specifies the action taken by the WAAP upon rule activation"}, "mode": {"type": "boolean", "title": "Mode", "description": "Indicates if the security rule is active"}, "rule_set_id": {"type": "integer", "title": "Rule Set Id", "description": "Identifier of the rule set to which the rule belongs"}, "group": {"type": "string", "title": "Group", "description": "The rule set group name to which the rule belongs"}}, "type": "object", "required": ["id", "name", "description", "action", "mode", "rule_set_id", "group"], "title": "DomainPolicy", "description": "Represents a configurable WAAP security rule, also known as a policy."}
    DomainSettings: {"properties": {"ddos": {"$ref": "#/components/schemas/DomainDdosSettings"}, "api": {"$ref": "#/components/schemas/ApiSettings"}}, "type": "object", "required": ["ddos", "api"], "title": "DomainSettings", "description": "Settings for a domain."}
    DomainStatus: {"type": "string", "enum": ["active", "bypass", "monitor", "locked"], "title": "DomainStatus", "description": "The different statuses a domain can have"}
    DomainUpdateStatus: {"type": "string", "enum": ["active", "monitor"], "title": "DomainUpdateStatus", "description": "Domain statuses that can be used when updating a domain"}
    EventStatistics: {"properties": {"count": {"$ref": "#/components/schemas/waap_Count"}, "blocked": {"$ref": "#/components/schemas/Blocked"}}, "type": "object", "required": ["count", "blocked"], "title": "EventStatistics", "description": "A collection of event metrics over a time span"}
    FileExtensionCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "file_extension": {"items": {"type": "string", "maxLength": 10, "minLength": 1, "pattern": "[a-z0-9]+$", "description": "A file extension without the leading dot", "examples": ["pdf", "png"]}, "type": "array", "maxItems": 20, "minItems": 1, "title": "File Extension", "description": "The list of file extensions to match against"}}, "type": "object", "required": ["file_extension"], "title": "FileExtensionCondition", "description": "Match the incoming file extension"}
    FirewallRule: {"properties": {"name": {"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "title": "Name", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "description": {"type": "string", "maxLength": 100, "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"$ref": "#/components/schemas/FirewallRuleAction-Input", "description": "The action that the rule takes when triggered"}, "conditions": {"items": {"$ref": "#/components/schemas/FirewallRuleCondition"}, "type": "array", "maxItems": 1, "minItems": 1, "title": "Conditions", "description": "The condition required for the WAAP engine to trigger the rule."}}, "type": "object", "required": ["name", "enabled", "action", "conditions"], "title": "FirewallRule"}
    FirewallRuleAction-Input: {"properties": {"allow": {"anyOf": ["$ref": "#/components/schemas/RuleAllowAction", "type": "null"]}, "block": {"anyOf": ["$ref": "#/components/schemas/RuleBlockAction", "type": "null"]}}, "additionalProperties": false, "type": "object", "title": "FirewallRuleAction", "description": "The action that a firewall rule takes when triggered"}
    FirewallRuleAction-Output: {"properties": {"allow": {"anyOf": ["$ref": "#/components/schemas/RuleAllowAction", "type": "null"]}, "block": {"anyOf": ["$ref": "#/components/schemas/RuleBlockAction", "type": "null"]}}, "additionalProperties": false, "type": "object", "title": "FirewallRuleAction", "description": "The action that a firewall rule takes when triggered"}
    FirewallRuleActionType: {"type": "string", "enum": ["allow", "block"], "title": "FirewallRuleActionType"}
    FirewallRuleCondition: {"properties": {"ip": {"$ref": "#/components/schemas/IpCondition"}, "ip_range": {"$ref": "#/components/schemas/IpRangeCondition"}}, "additionalProperties": false, "type": "object", "title": "FirewallRuleCondition", "description": "The criteria of an incoming web request and the models of the various values those criteria can take"}
    FirewallRuleResponse: {"properties": {"name": {"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "title": "Name", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "description": {"type": "string", "maxLength": 100, "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"$ref": "#/components/schemas/FirewallRuleAction-Output", "description": "The action that the rule takes when triggered"}, "conditions": {"items": {"$ref": "#/components/schemas/FirewallRuleCondition"}, "type": "array", "maxItems": 1, "minItems": 1, "title": "Conditions", "description": "The condition required for the WAAP engine to trigger the rule."}, "id": {"type": "integer", "title": "Id", "description": "The unique identifier of the rule"}}, "type": "object", "required": ["name", "enabled", "action", "conditions", "id"], "title": "FirewallRuleResponse"}
    HTTPMethod: {"type": "string", "enum": ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"], "title": "HTTPMethod", "description": "HTTP methods and descriptions\n\nMethods from the following RFCs are all observed:\n\n \\* RFC 7231: Hypertext Transfer Protocol (HTTP/1.1), obsoletes 2616\n\\* RFC 5789: PATCH Method for HTTP"}
    HandshakePageData: {"properties": {"logo": {"type": "string", "title": "A base64 encoded image of the logo to present", "description": "Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included."}, "header": {"type": "string", "maxLength": 62, "minLength": 3, "title": "Header", "description": "The text to display in the header of the custom page"}, "title": {"type": "string", "maxLength": 50, "minLength": 3, "title": "Title", "description": "The text to display in the title of the custom page"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Indicates whether the custom custom page is active or inactive"}}, "type": "object", "required": ["enabled"], "title": "HandshakePageData"}
    HeaderCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "header": {"type": "string", "maxLength": 50, "minLength": 1, "pattern": "^[a-zA-Z0-9-]+$", "title": "Header", "description": "The request header name", "examples": ["Origin"]}, "value": {"type": "string", "maxLength": 100, "pattern": "^[a-zA-Z0-9-_ :;.\\/\\\"'?!(){}\\[\\]@<>=\\-\\+\\*#$&`|~^%]+$", "title": "Value", "description": "The request header value"}, "match_type": {"type": "string", "enum": ["Exact", "Contains"], "title": "Match Type", "description": "The type of matching condition for header and value.", "default": "Contains"}}, "type": "object", "required": ["header", "value"], "title": "HeaderCondition", "description": "Match an incoming request header"}
    HeaderExistsCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "header": {"type": "string", "maxLength": 50, "minLength": 1, "pattern": "^[a-zA-Z0-9-]+$", "title": "Header", "description": "The request header name", "examples": ["Origin"]}}, "type": "object", "required": ["header"], "title": "HeaderExistsCondition", "description": "Match when an incoming request header is present"}
    HttpMethodCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "http_method": {"$ref": "#/components/schemas/HTTPMethod", "description": "HTTP methods of a request", "examples": ["CONNECT"]}}, "type": "object", "required": ["http_method"], "title": "HttpMethodCondition", "description": "Match the incoming HTTP method"}
    IPReputationDeleteRequest: {"properties": {"ip": {"type": "string", "format": "ipvanyaddress", "title": "Ip", "description": "The IP address to delete tags for"}, "domain_id": {"type": "integer", "exclusiveMinimum": 0, "title": "Domain Id", "description": "The domain ID to delete tags for"}}, "additionalProperties": false, "type": "object", "required": ["ip", "domain_id"], "title": "IPReputationDeleteRequest", "description": "Request model for deleting local IP tags."}
    Insight: {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id", "description": "A generated unique identifier for the insight"}, "insight_type": {"type": "string", "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$", "title": "Insight Type", "description": "The slug of the insight type"}, "labels": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Labels", "description": "A hash table of label names and values that apply to the insight"}, "first_seen": {"type": "string", "format": "date-time", "title": "First Seen", "description": "The date and time the insight was first seen in ISO 8601 format"}, "last_seen": {"type": "string", "format": "date-time", "title": "Last Seen", "description": "The date and time the insight was last seen in ISO 8601 format"}, "last_status_change": {"type": "string", "format": "date-time", "title": "Last Status Change", "description": "The date and time the insight was last seen in ISO 8601 format"}, "status": {"$ref": "#/components/schemas/InsightStatus", "description": "The status of the insight"}, "description": {"type": "string", "maxLength": 450, "minLength": 3, "title": "Description", "description": "The description of the insight", "examples": ["A request originated from a high-risk IP: 1.2.3.4, but it was allowed by rule: 'my custom rule' the description of the insight"]}, "recommendation": {"type": "string", "maxLength": 450, "minLength": 3, "title": "Recommendation", "description": "The recommended action to perform to resolve the insight", "examples": ["disable or delete rule \"my-custom-rule\""]}}, "type": "object", "required": ["id", "insight_type", "labels", "first_seen", "last_seen", "last_status_change", "status", "description", "recommendation"], "title": "Insight"}
    InsightSilence: {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id", "description": "A generated unique identifier for the silence"}, "insight_type": {"type": "string", "title": "Insight Type", "description": "The slug of the insight type"}, "labels": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Labels", "description": "A hash table of label names and values that apply to the insight silence"}, "comment": {"type": "string", "title": "Comment", "description": "A comment explaining the reason for the silence"}, "author": {"type": "string", "title": "Author", "description": "The author of the silence"}, "expire_at": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "title": "Expire At", "description": "The date and time the silence expires in ISO 8601 format"}}, "type": "object", "required": ["id", "insight_type", "labels", "comment", "author", "expire_at"], "title": "InsightSilence"}
    InsightSilenceSortBy: {"type": "string", "enum": ["id", "-id", "insight_type", "-insight_type", "comment", "-comment", "author", "-author", "expire_at", "-expire_at"], "title": "InsightSilenceSortBy"}
    InsightSortBy: {"type": "string", "enum": ["id", "-id", "insight_type", "-insight_type", "first_seen", "-first_seen", "last_seen", "-last_seen", "last_status_change", "-last_status_change", "status", "-status"], "title": "InsightSortBy"}
    InsightStatus: {"type": "string", "enum": ["OPEN", "ACKED", "CLOSED"], "title": "InsightStatus", "description": "The different statuses an insight can have"}
    InsightType: {"properties": {"name": {"type": "string", "title": "Name", "description": "The name of the insight type"}, "description": {"type": "string", "title": "Description", "description": "The description of the insight type"}, "slug": {"type": "string", "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$", "title": "Slug", "description": "The slug of the insight type", "examples": ["high-risk-ip", "attack-on-disabled-policy"]}, "labels": {"items": {"type": "string"}, "type": "array", "title": "Labels", "description": "The labels of the insight type"}, "insight_template": {"type": "string", "title": "Insight Template", "description": "The insight template"}, "recommendation_template": {"type": "string", "title": "Recommendation Template", "description": "The recommendation template"}, "insight_grouping_dimensions": {"items": {"type": "string"}, "type": "array", "title": "Insight Grouping Dimensions", "description": "The grouping dimensions of the insight type"}, "insight_frequency": {"type": "integer", "title": "Insight Frequency", "description": "The frequency of the insight type"}}, "type": "object", "required": ["name", "description", "slug", "labels", "insight_template", "recommendation_template", "insight_grouping_dimensions", "insight_frequency"], "title": "InsightType"}
    IpCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "ip_address": {"type": "string", "format": "ipvanyaddress", "title": "Ip Address", "description": "A single IPv4 or IPv6 address"}}, "type": "object", "required": ["ip_address"], "title": "IpCondition", "description": "Match the incoming request against a single IP address"}
    IpCountryAttack: {"properties": {"country": {"type": "string", "pattern": "^\\w{2}$", "title": "Country", "description": "An ISO 3166-1 alpha-2 formatted string representing the country that was attacked"}, "count": {"type": "integer", "title": "Count", "description": "The number of attacks from the specified IP address to the country"}}, "type": "object", "required": ["country", "count"], "title": "IpCountryAttack"}
    IpDdosInfo: {"properties": {"botnet_client": {"type": "boolean", "title": "Botnet Client", "description": "Indicates if the IP is tagged as a botnet client"}, "time_series": {"items": {"$ref": "#/components/schemas/TimeSeriesItem"}, "type": "array", "title": "Time Series", "description": "The time series data for the DDoS attacks from the IP address"}}, "type": "object", "required": ["botnet_client", "time_series"], "title": "IpDdosInfo"}
    IpInfo: {"properties": {"whois": {"$ref": "#/components/schemas/WhoisInfo", "description": "The WHOIS information for the IP address"}, "risk_score": {"type": "string", "enum": ["NO_RISK", "LOW", "MEDIUM", "HIGH", "EXTREME", "NOT_ENOUGH_DATA"], "title": "Risk Score", "description": "The risk score of the IP address"}, "tags": {"items": {"type": "string"}, "type": "array", "title": "Tags", "description": "The tags associated with the IP address that affect the risk score"}}, "type": "object", "required": ["whois", "risk_score", "tags"], "title": "IpInfo"}
    IpInfoCounts: {"properties": {"total_requests": {"type": "integer", "title": "Total Requests", "description": "The total number of requests made by the IP address"}, "blocked_requests": {"type": "integer", "title": "Blocked Requests", "description": "The number of requests from the IP address that were blocked"}, "unique_sessions": {"type": "integer", "title": "Unique Sessions", "description": "The number of unique sessions from the IP address"}}, "type": "object", "required": ["total_requests", "blocked_requests", "unique_sessions"], "title": "IpInfoCounts"}
    IpRangeCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "lower_bound": {"type": "string", "format": "ipvanyaddress", "title": "Lower Bound", "description": "The lower bound IPv4 or IPv6 address to match against"}, "upper_bound": {"type": "string", "format": "ipvanyaddress", "title": "Upper Bound", "description": "The upper bound IPv4 or IPv6 address to match against"}}, "type": "object", "required": ["lower_bound", "upper_bound"], "title": "IpRangeCondition", "description": "Match the incoming request against an IP range"}
    JavascriptDisabledPageData: {"properties": {"header": {"type": "string", "maxLength": 62, "minLength": 3, "title": "Header", "description": "The text to display in the header of the custom page"}, "text": {"type": "string", "maxLength": 400, "minLength": 20, "title": "Text", "description": "The text to display in the body of the custom page"}, "enabled": {"type": "boolean", "title": "Enabled", "description": "Indicates whether the custom custom page is active or inactive"}}, "type": "object", "required": ["enabled"], "title": "JavascriptDisabledPageData"}
    LocalIpTagsRecord: {"properties": {"date": {"type": "integer", "title": "Date", "description": "The timestamp of the last request from the IP to the domain"}, "domain": {"$ref": "#/components/schemas/DomainInfo"}, "ip": {"type": "string", "title": "Ip", "description": "The IP address"}, "local_tags": {"items": {"type": "string"}, "type": "array", "title": "Local Tags", "description": "The tags associated with the IP in the context of the domain"}, "global_tags": {"items": {"type": "string"}, "type": "array", "title": "Global Tags", "description": "The tags associated with the IP globally"}}, "type": "object", "required": ["date", "domain", "ip", "local_tags", "global_tags"], "title": "LocalIpTagsRecord"}
    Network: {"properties": {"client_ip": {"type": "string", "title": "Client Ip", "description": "Client IP", "examples": ["116.83.107.125"]}, "country": {"type": "string", "title": "Country", "description": "Country code", "examples": ["IL"]}, "organization": {"$ref": "#/components/schemas/app__models__requests__Organization"}}, "type": "object", "required": ["client_ip", "country", "organization"], "title": "Network", "description": "Network details"}
    OrganizationCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "organization": {"type": "string", "maxLength": 100, "title": "Organization", "description": "The organization to match against", "examples": ["UptimeRobot s.r.o"]}}, "type": "object", "required": ["organization"], "title": "OrganizationCondition", "description": "Match the organization the request originated from, as determined by a WHOIS lookup of the requesting IP"}
    OwnerTypesCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "owner_types": {"items": {"type": "string", "enum": ["COMMERCIAL", "EDUCATIONAL", "GOVERNMENT", "HOSTING_SERVICES", "ISP", "MOBILE_NETWORK", "NETWORK", "RESERVED"]}, "type": "array", "minItems": 1, "title": "Owner Types", "description": "Match the type of organization that owns the IP address making an incoming request", "default": ["COMMERCIAL"]}}, "type": "object", "title": "OwnerTypesCondition", "description": "Match the type of organization that owns the IP address making an incoming request"}
    PageType: {"type": "string", "enum": ["block.html", "block_csrf.html", "captcha.html", "cookieDisabled.html", "handshake.html", "javascriptDisabled.html"], "title": "PageType", "description": "The type of the custom page"}
    PaginatedResponse_AdvancedRuleResponse_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/AdvancedRuleResponse"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[AdvancedRuleResponse]"}
    PaginatedResponse_ApiPathResponse_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/ApiPathResponse"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[ApiPathResponse]"}
    PaginatedResponse_ApiScanResult_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/ApiScanResult"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[ApiScanResult]"}
    PaginatedResponse_CustomPageSetResponse_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/CustomPageSetResponse"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[CustomPageSetResponse]"}
    PaginatedResponse_CustomRuleResponse_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/CustomRuleResponse"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[CustomRuleResponse]"}
    PaginatedResponse_DdosAttack_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/DdosAttack"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[DdosAttack]"}
    PaginatedResponse_DdosInfo_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/DdosInfo"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[DdosInfo]"}
    PaginatedResponse_FirewallRuleResponse_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/FirewallRuleResponse"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[FirewallRuleResponse]"}
    PaginatedResponse_InsightSilence_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/InsightSilence"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[InsightSilence]"}
    PaginatedResponse_InsightType_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/InsightType"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[InsightType]"}
    PaginatedResponse_Insight_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/Insight"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[Insight]"}
    PaginatedResponse_LocalIpTagsRecord_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/LocalIpTagsRecord"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[LocalIpTagsRecord]"}
    PaginatedResponse_Organization_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/app__models__organizations__Organization"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[Organization]"}
    PaginatedResponse_RequestSummary_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/RequestSummary"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[RequestSummary]"}
    PaginatedResponse_SummaryDomainResponse_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/SummaryDomainResponse"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[SummaryDomainResponse]"}
    PaginatedResponse_Tag_: {"properties": {"limit": {"type": "integer", "title": "Limit", "description": "Number of items requested in the response"}, "offset": {"type": "integer", "title": "Offset", "description": "Items response offset used"}, "count": {"type": "integer", "title": "Count", "description": "Number of items contain in the response"}, "results": {"items": {"$ref": "#/components/schemas/app__models__tags__Tag"}, "type": "array", "title": "Results", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["limit", "offset", "count", "results"], "title": "PaginatedResponse[Tag]"}
    PatternMatchedTag: {"properties": {"tag": {"type": "string", "title": "Tag", "description": "Tag name", "examples": ["sql"]}, "display_name": {"type": "string", "title": "Display Name", "description": "The tag's display name", "examples": ["SQL Injection"]}, "description": {"type": "string", "title": "Description", "description": "Tag description information", "examples": ["This client attempted insertion or “injection” of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data, etc."]}, "field": {"type": "string", "title": "Field", "description": "The entity to which the variable that triggered the tag belong to. For example: `request_headers`, uri, cookies etc.", "examples": ["uri"]}, "field_name": {"type": "string", "title": "Field Name", "description": "The name of the variable which holds the value that triggered the tag", "examples": ["q"]}, "pattern_name": {"type": "string", "title": "Pattern Name", "description": "The name of the detected regexp pattern", "examples": ["SQL Injection Prevention"]}, "pattern_value": {"type": "string", "title": "Pattern Value", "description": "The pattern which triggered the tag", "examples": ["select user from master.."]}, "execution_phase": {"type": "string", "title": "Execution Phase", "description": "The phase in which the tag was triggered: access -> Request, `header_filter` -> `response_header`, `body_filter` -> `response_body`", "examples": ["access"]}}, "type": "object", "required": ["tag", "display_name", "description", "field", "field_name", "pattern_name", "pattern_value", "execution_phase"], "title": "PatternMatchedTag", "description": "Pattern matched tag details"}
    PolicyAction: {"type": "string", "enum": ["Allow", "Block", "Captcha", "Gateway", "Handshake", "Monitor", "Composite"], "title": "PolicyAction", "description": "The action taken by the WAAP upon rule activation."}
    PolicyMode: {"properties": {"mode": {"type": "boolean", "title": "Mode", "description": "Indicates if the security rule is active"}}, "type": "object", "required": ["mode"], "title": "PolicyMode", "description": "Represents the mode of a security rule."}
    PreviewCustomPage: {"properties": {"logo": {"anyOf": [{"type": "string", "title": "A base64 encoded image of the logo to present", "description": "Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included."}, "type": "null"], "title": "Logo"}, "header": {"anyOf": [{"type": "string", "maxLength": 62, "minLength": 3, "description": "The text to display in the header of the custom page"}, "type": "null"], "title": "Header"}, "title": {"anyOf": [{"type": "string", "maxLength": 50, "minLength": 3, "description": "The text to display in the title of the custom page"}, "type": "null"], "title": "Title"}, "text": {"anyOf": [{"type": "string", "maxLength": 400, "minLength": 20, "description": "The text to display in the body of the custom page"}, "type": "null"], "title": "Text"}, "error": {"anyOf": [{"type": "string", "maxLength": 400, "minLength": 10, "description": "Error message"}, "type": "null"], "title": "Error"}}, "type": "object", "title": "PreviewCustomPage"}
    QuotaItem: {"properties": {"current": {"type": "integer", "title": "Current", "description": "The current number of this resource"}, "allowed": {"type": "integer", "title": "Allowed", "description": "The maximum allowed number of this resource"}}, "type": "object", "required": ["current", "allowed"], "title": "QuotaItem"}
    RequestDetails: {"properties": {"id": {"type": "string", "title": "Id", "description": "Request ID", "examples": ["96763b8fb655e9f18a2e04097b704e39-458959"]}, "path": {"type": "string", "title": "Path", "description": "Request path", "examples": ["/new_index"]}, "method": {"type": "string", "title": "Method", "description": "Request method", "examples": ["GET"]}, "action": {"type": "string", "title": "Action", "description": "Request action", "examples": ["block"]}, "rule_id": {"type": "string", "title": "Rule Id", "description": "ID of the triggered rule", "examples": ["86"]}, "rule_name": {"type": "string", "title": "Rule Name", "description": "Name of the triggered rule", "examples": ["SQL Injection"]}, "user_agent": {"$ref": "#/components/schemas/UserAgent", "description": "User agent"}, "network": {"$ref": "#/components/schemas/Network"}, "request_time": {"type": "string", "format": "date-time", "title": "Request Time", "description": "The time of the request", "examples": ["2025-08-28T07:13:59Z"]}, "reference_id": {"type": "string", "title": "Reference Id", "description": "Reference ID to identify user sanction", "examples": ["ad07c06f19054e484974fa22e9fb6bb1"]}, "content_type": {"type": "string", "title": "Content Type", "description": "Content type of request", "examples": ["text/html; charset=UTF-8"]}, "scheme": {"type": "string", "title": "Scheme", "description": "The HTTP scheme of the request that generated an event", "examples": ["HTTP"]}, "http_status_code": {"type": "integer", "title": "Http Status Code", "description": "Status code for http request", "examples": [200]}, "http_version": {"type": "string", "title": "Http Version", "description": "HTTP version of request", "examples": ["1.1"]}, "response_time": {"type": "string", "title": "Response Time", "description": "Time took to process all request", "examples": ["3"]}, "request_headers": {"additionalProperties": true, "type": "object", "title": "Request Headers", "description": "HTTP request headers", "examples": [{"ACCEPT": "*/*", "ACCEPT-ENCODING": "gzip, deflate", "CONNECTION": "keep-alive", "HOST": "oih.jung.fblcloud-qa.net", "USER-AGENT": "Firefox/44.3", "X-FORWARDED-FOR": "169.54.212.219", "X-FORWARDED-PORT": "80", "X-FORWARDED-PROTO": "http"}]}, "incident_id": {"type": "string", "title": "Incident Id", "description": "ID of challenge that was generated", "examples": ["9f06152824394345"]}, "request_type": {"type": "string", "title": "Request Type", "description": "The type of the request that generated an event", "examples": ["block"]}, "session_request_count": {"type": "string", "title": "Session Request Count", "description": "The number requests in session", "examples": ["1"]}, "domain": {"type": "string", "title": "Domain", "description": "Domain name", "examples": ["example.com"]}, "requested_domain": {"type": "string", "title": "Requested Domain", "description": "The real domain name", "examples": ["example.com"]}, "query_string": {"type": "string", "title": "Query String", "description": "The query string of the request", "examples": ["q=select%20user%20from%20master..a"]}, "result": {"type": "string", "enum": ["passed", "blocked", "suppressed", ""], "title": "Result", "description": "The result of a request", "examples": ["passed"]}, "traffic_types": {"items": {"type": "string"}, "type": "array", "title": "Traffic Types", "description": "List of traffic types", "examples": [["sanctioned", "policy_blocked"]]}, "pattern_matched_tags": {"items": {"$ref": "#/components/schemas/PatternMatchedTag"}, "type": "array", "title": "Pattern Matched Tags", "description": "List of shield tags"}, "common_tags": {"items": {"$ref": "#/components/schemas/CommonTag"}, "type": "array", "title": "Common Tags", "description": "List of common tags"}}, "type": "object", "required": ["id", "path", "method", "action", "rule_id", "rule_name", "user_agent", "network", "request_time", "reference_id", "content_type", "scheme", "http_status_code", "http_version", "response_time", "request_headers", "incident_id", "request_type", "session_request_count", "domain", "requested_domain",
        "query_string", "result", "traffic_types", "pattern_matched_tags", "common_tags"], "title": "RequestDetails", "description": "Request's details used when displaying a single request."}
    RequestRateCondition: {"properties": {"ips": {"items": {"type": "string", "format": "ipvanyaddress"}, "type": "array", "maxItems": 10, "title": "Ips", "description": "A list of source IPs that can trigger a request rate condition"}, "http_methods": {"items": {"$ref": "#/components/schemas/HTTPMethod"}, "type": "array", "title": "Http Methods", "description": "Possible HTTP request methods that can trigger a request rate condition"}, "path_pattern": {"type": "string", "maxLength": 50, "minLength": 1, "title": "Path Pattern", "description": "A regular expression matching the URL path of the incoming request", "examples": ["/", "/path/to"]}, "requests": {"type": "integer", "minimum": 20, "title": "Requests", "description": "The number of incoming requests over the given time that can trigger a request rate condition"}, "time": {"type": "integer", "maximum": 3600, "minimum": 1, "title": "Time", "description": "The number of seconds that the WAAP measures incoming requests over before triggering a request rate condition"}, "user_defined_tag": {"type": "string", "maxLength": 50, "minLength": 1, "pattern": "^[a-zA-Z]+[ a-zA-Z0-9]*$", "title": "User Defined Tag", "description": "A user-defined tag that can be included in incoming requests and used to trigger a request rate condition"}}, "additionalProperties": false, "type": "object", "required": ["path_pattern", "requests", "time"], "title": "RequestRateCondition", "description": "Match the rate at which requests come in that match certain conditions"}
    RequestSummary: {"properties": {"id": {"type": "string", "title": "Id", "description": "Request's unique id"}, "path": {"type": "string", "title": "Path", "description": "Request path"}, "client_ip": {"type": "string", "title": "Client Ip", "description": "Client's IP address."}, "method": {"type": "string", "title": "Method", "description": "HTTP method"}, "rule_name": {"type": "string", "title": "Rule Name", "description": "Name of the triggered rule"}, "country": {"type": "string", "title": "Country", "description": "Country code"}, "action": {"type": "string", "title": "Action", "description": "Action of the triggered rule"}, "rule_id": {"type": "string", "title": "Rule Id", "description": "The ID of the triggered rule."}, "domain": {"type": "string", "title": "Domain", "description": "Domain name"}, "user_agent": {"type": "string", "title": "User Agent", "description": "User agent"}, "user_agent_client": {"type": "string", "title": "User Agent Client", "description": "Client from parsed User agent header"}, "organization": {"type": "string", "title": "Organization", "description": "Organization"}, "request_time": {"type": "integer", "title": "Request Time", "description": "The UNIX timestamp in ms of the date a set of traffic counters was recorded"}, "reference_id": {"type": "string", "title": "Reference Id", "description": "The reference ID to a sanction that was given to a user."}, "status_code": {"type": "integer", "title": "Status Code", "description": "Status code for http request"}, "result": {"type": "string", "enum": ["passed", "blocked", "suppressed", ""], "title": "Result"}, "traffic_types": {"type": "string", "title": "Traffic Types", "description": "Comma separated list of traffic types."}}, "type": "object", "required": ["id", "path", "client_ip", "method", "rule_name", "country", "action", "rule_id", "domain", "user_agent", "user_agent_client", "organization", "request_time", "reference_id", "status_code", "result", "traffic_types"], "title": "RequestSummary", "description": "Request summary used when displaying a list of requests"}
    Resolution: {"type": "string", "enum": ["daily", "hourly", "minutely"], "title": "Resolution", "description": "Specifies the granularity of the result data."}
    ResponseHeaderCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "header": {"type": "string", "maxLength": 50, "minLength": 1, "pattern": "^[a-zA-Z0-9-]+$", "title": "Header", "description": "The response header name"}, "value": {"type": "string", "maxLength": 100, "pattern": "^[a-zA-Z0-9-_ :;.\\/\\\"'?!(){}\\[\\]@<>=\\-\\+\\*#$&`|~^%]+$", "title": "Value", "description": "The response header value"}, "match_type": {"type": "string", "enum": ["Exact", "Contains"], "title": "Match Type", "description": "The type of matching condition for header and value.", "default": "Contains"}}, "type": "object", "required": ["header", "value"], "title": "ResponseHeaderCondition", "description": "Match a response header"}
    ResponseHeaderExistsCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "header": {"type": "string", "maxLength": 50, "minLength": 1, "pattern": "^[a-zA-Z0-9-]+$", "title": "Header", "description": "The response header name"}}, "type": "object", "required": ["header"], "title": "ResponseHeaderExistsCondition", "description": "Match when a response header is present"}
    RuleActionType: {"type": "string", "enum": ["allow", "block", "captcha", "handshake", "monitor", "tag"], "title": "RuleActionType"}
    RuleAllowAction: {"properties": {}, "type": "object", "title": "RuleAllowAction", "description": "The WAAP allowed the request"}
    RuleBlockAction: {"properties": {"status_code": {"$ref": "#/components/schemas/RuleBlockStatusCode", "description": "A custom HTTP status code that the WAAP returns if a rule blocks a request"}, "action_duration": {"type": "string", "maxLength": 10, "minLength": 1, "pattern": "^[1-9][0-9]*[smhd]?$", "title": "Action Duration", "description": "How long a rule's block action will apply to subsequent requests. Can be specified in seconds or by using a numeral followed by 's', 'm', 'h', or 'd' to represent time format (seconds, minutes, hours, or days). Empty time intervals are not allowed.", "examples": ["12h", "60s", "30"]}}, "additionalProperties": false, "type": "object", "title": "RuleBlockAction", "description": "WAAP block action behavior could be configured with response status code and action duration."}
    RuleBlockStatusCode: {"type": "integer", "enum": [403, 405, 418, 429], "title": "RuleBlockStatusCode", "description": "Designates the HTTP status code to deliver when a request is blocked."}
    RuleBlockedRequests: {"properties": {"rule_name": {"type": "string", "title": "Rule Name", "description": "The name of the rule that blocked the request"}, "action": {"type": "string", "title": "Action", "description": "The action taken by the rule"}, "count": {"type": "integer", "title": "Count", "description": "The number of requests blocked by the rule"}}, "type": "object", "required": ["rule_name", "action", "count"], "title": "RuleBlockedRequests"}
    RuleCaptchaAction: {"properties": {}, "type": "object", "title": "RuleCaptchaAction", "description": "The WAAP presented the user with a captcha"}
    RuleHandshakeAction: {"properties": {}, "type": "object", "title": "RuleHandshakeAction", "description": "The WAAP performed automatic browser validation"}
    RuleMonitorAction: {"properties": {}, "type": "object", "title": "RuleMonitorAction", "description": "The WAAP monitored the request but took no action"}
    RuleSet: {"properties": {"id": {"type": "integer", "title": "Id", "description": "Identifier of the rule set."}, "name": {"type": "string", "title": "Name", "description": "Name of the rule set."}, "description": {"type": "string", "title": "Description", "description": "Detailed description of the rule set."}, "is_active": {"type": "boolean", "title": "Is Active", "description": "Indicates if the rule set is currently active."}, "tags": {"items": {"$ref": "#/components/schemas/app__models__policies__Tag"}, "type": "array", "title": "Tags", "description": "Collection of tags associated with the rule set."}, "resource_slug": {"anyOf": ["type": "string", "type": "null"], "title": "Resource Slug", "description": "The resource slug associated with the rule set."}, "rules": {"items": {"$ref": "#/components/schemas/DomainPolicy"}, "type": "array", "title": "Rules", "default": []}}, "type": "object", "required": ["id", "name", "description", "is_active", "tags"], "title": "RuleSet", "description": "Represents a custom rule set."}
    RuleTagAction: {"properties": {"tags": {"items": {"type": "string"}, "type": "array", "maxItems": 5, "minItems": 1, "title": "Tags", "description": "The list of user defined tags to tag the request with"}}, "type": "object", "required": ["tags"], "title": "RuleTagAction", "description": "WAAP tag action gets a list of tags to tag the request scope with"}
    RulesBulkDelete: {"properties": {"rule_ids": {"items": {"type": "integer"}, "type": "array", "minItems": 1, "title": "Rule Ids", "description": "The IDs of the rules to delete"}}, "type": "object", "required": ["rule_ids"], "title": "RulesBulkDelete", "description": "A request to delete a list of rules"}
    Service: {"properties": {"enabled": {"type": "boolean", "title": "Enabled", "description": "Whether the service is enabled"}}, "type": "object", "required": ["enabled"], "title": "Service"}
    SessionRequestCountCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "request_count": {"type": "integer", "exclusiveMinimum": 0, "title": "Request Count", "description": "The number of dynamic requests in the session"}}, "type": "object", "required": ["request_count"], "title": "SessionRequestCountCondition", "description": "Match the number of dynamic page requests made in a WAAP session"}
    StatisticItem: {"properties": {"date_time": {"type": "string", "format": "date-time", "title": "Date Time", "description": "The date and time for the statistic in ISO 8601 format"}, "value": {"type": "integer", "title": "Value", "description": "The value for the statistic. If there is no data for the given time, the value will be 0."}}, "type": "object", "required": ["date_time", "value"], "title": "StatisticItem", "description": "Response model for the statistics item"}
    StatisticsSeries: {"properties": {"total_bytes": {"anyOf": [{"items": {"$ref": "#/components/schemas/StatisticItem"}, "type": "array"}, "type": "null"], "title": "Total Bytes", "description": "Will be returned if `total_bytes` is requested in the metrics parameter"}, "total_requests": {"anyOf": [{"items": {"$ref": "#/components/schemas/StatisticItem"}, "type": "array"}, "type": "null"], "title": "Total Requests", "description": "Will be included if `total_requests` is requested in the metrics parameter"}}, "type": "object", "title": "StatisticsSeries", "description": "Response model for the statistics series"}
    SummaryDomainResponse: {"properties": {"id": {"type": "integer", "exclusiveMinimum": 0, "title": "Id", "description": "The domain ID"}, "name": {"type": "string", "maxLength": 255, "title": "Name", "description": "The domain name"}, "status": {"$ref": "#/components/schemas/DomainStatus"}, "custom_page_set": {"anyOf": [{"type": "integer", "description": "The ID of the custom page set"}, "type": "null"], "title": "Custom Page Set"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At", "description": "The date and time the domain was created in ISO 8601 format"}}, "type": "object", "required": ["id", "name", "status", "custom_page_set", "created_at"], "title": "SummaryDomainResponse", "description": "Represents a WAAP domain when getting a list of domains."}
    TagsCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "tags": {"items": {"type": "string"}, "type": "array", "maxItems": 5, "minItems": 1, "title": "Tags", "description": "A list of tags to match against the request tags"}}, "type": "object", "required": ["tags"], "title": "TagsCondition", "description": "Matches requests based on specified tags"}
    TaskResultId: {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id", "description": "The task ID"}}, "type": "object", "required": ["id"], "title": "TaskResultId", "description": "Response model for the task result ID"}
    TaskResultStatus: {"type": "string", "enum": ["SUCCESS", "FAILURE", "IN_PROGRESS"], "title": "TaskResultStatus", "description": "The different statuses a task result can have"}
    TimeSeriesAttack: {"properties": {"attack_type": {"type": "string", "title": "Attack Type", "description": "The type of attack"}, "values": {"items": {"$ref": "#/components/schemas/TimeSeriesItem"}, "type": "array", "title": "Values", "description": "The time series data"}}, "type": "object", "required": ["attack_type", "values"], "title": "TimeSeriesAttack"}
    TimeSeriesItem: {"properties": {"timestamp": {"type": "integer", "title": "Timestamp", "description": "The timestamp of the time series item as a POSIX timestamp"}, "count": {"type": "integer", "title": "Count", "description": "The number of attacks"}}, "type": "object", "required": ["timestamp", "count"], "title": "TimeSeriesItem"}
    TopSession: {"properties": {"session_id": {"type": "string", "format": "uuid", "title": "Session Id", "description": "The session ID"}, "duration": {"type": "number", "title": "Duration", "description": "The duration of the session in seconds"}, "requests": {"type": "integer", "title": "Requests", "description": "The number of requests in the session"}, "blocked": {"type": "integer", "title": "Blocked", "description": "The number of blocked requests in the session"}, "start_time": {"type": "string", "format": "date-time", "title": "Start Time", "description": "The start time of the session as a POSIX timestamp"}}, "type": "object", "required": ["session_id", "duration", "requests", "blocked", "start_time"], "title": "TopSession"}
    TopUrl: {"properties": {"url": {"type": "string", "title": "Url", "description": "The URL that was attacked"}, "count": {"type": "integer", "title": "Count", "description": "The number of attacks to the URL"}}, "type": "object", "required": ["url", "count"], "title": "TopUrl"}
    TopUserAgent: {"properties": {"user_agent": {"type": "string", "title": "User Agent", "description": "The user agent that was used"}, "count": {"type": "integer", "title": "Count", "description": "The number of requests made with the user agent"}}, "type": "object", "required": ["user_agent", "count"], "title": "TopUserAgent"}
    TrafficMetrics: {"properties": {"timestamp": {"type": "integer", "title": "Timestamp", "description": "UNIX timestamp indicating when the traffic data was recorded"}, "ajax": {"type": "integer", "title": "Ajax", "description": "Number of AJAX requests made", "default": 0}, "api": {"type": "integer", "title": "Api", "description": "Number of API requests made", "default": 0}, "ddosBlocked": {"type": "integer", "title": "Ddosblocked", "description": "Number of DDoS attack attempts successfully blocked", "default": 0}, "origin2xx": {"type": "integer", "title": "Origin2Xx", "description": "Number of successful HTTP 2xx responses from the origin server", "default": 0}, "origin3xx": {"type": "integer", "title": "Origin3Xx", "description": "Number of HTTP 3xx redirects issued by the origin server", "default": 0}, "originError4xx": {"type": "integer", "title": "Originerror4Xx", "description": "Number of HTTP 4xx errors from the origin server", "default": 0}, "originError5xx": {"type": "integer", "title": "Originerror5Xx", "description": "Number of HTTP 5xx errors from the origin server", "default": 0}, "monitored": {"type": "integer", "title": "Monitored", "description": "Number of requests triggering monitoring actions", "default": 0}, "uncategorized": {"type": "integer", "title": "Uncategorized", "description": "Requests resulting in neither blocks nor sanctions", "default": 0}, "static": {"type": "integer", "title": "Static", "description": "Number of static asset requests", "default": 0}, "responseTime": {"type": "integer", "title": "Responsetime", "description": "Average origin server response time in milliseconds", "default": 0}, "originTimeout": {"type": "integer", "title": "Origintimeout", "description": "Number of timeouts experienced at the origin server", "default": 0}, "customAllowed": {"type": "integer", "title": "Customallowed", "description": "Number of requests allowed through custom rules", "default": 0}, "total": {"type": "integer", "title": "Total", "description": "Total number of requests", "default": 0}, "passedToOrigin": {"type": "integer", "title": "Passedtoorigin", "description": "Number of requests served directly by the origin server", "default": 0}, "customBlocked": {"type": "integer", "title": "Customblocked", "description": "Number of requests blocked due to custom rules", "default": 0}, "policyAllowed": {"type": "integer", "title": "Policyallowed", "description": "Number of requests allowed by security policies", "default": 0}, "policyBlocked": {"type": "integer", "title": "Policyblocked", "description": "Number of requests blocked by security policies", "default": 0}}, "type": "object", "required": ["timestamp"], "title": "TrafficMetrics", "description": "Represents the traffic metrics for a domain at a given time window"}
    TrafficType: {"type": "string", "enum": ["policy_allowed", "policy_blocked", "custom_rule_allowed", "custom_blocked", "legit_requests", "sanctioned", "dynamic", "api", "static", "ajax", "redirects", "monitor", "err_40x", "err_50x", "passed_to_origin", "timeout", "other", "ddos", "legit", "monitored"], "title": "TrafficType"}
    UpdateAdvancedRule: {"properties": {"name": {"anyOf": [{"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "type": "null"], "title": "Name"}, "description": {"anyOf": [{"type": "string", "maxLength": 100}, "type": "null"], "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"anyOf": ["type": "boolean", "type": "null"], "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"anyOf": ["$ref": "#/components/schemas/CustomerRuleAction-Input", "type": "null"], "description": "The action that the rule takes when triggered"}, "source": {"anyOf": [{"type": "string", "minLength": 1}, "type": "null"], "title": "Source", "description": "A CEL syntax expression that contains the rule's conditions. Allowed objects are: request, whois, session, response, tags, `user_defined_tags`, `user_agent`, `client_data`.\n\nMore info can be found here: https://gcore.com/docs/waap/waap-rules/advanced-rules"}, "phase": {"anyOf": [{"type": "string", "enum": ["access", "header_filter", "body_filter"]}, "type": "null"], "title": "Phase", "description": "The WAAP request/response phase for applying the rule.\n\n\nThe \"access\" phase is responsible for modifying the request before it is sent to the origin server. \n\nThe \"`header_filter`\" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.\n\nThe \"`body_filter`\" phase is responsible for modifying the body of a response before it is sent back to the client."}}, "type": "object", "title": "UpdateAdvancedRule", "description": "A request to update an advanced WAAP rule"}
    UpdateApiDiscoverySettings: {"properties": {"descriptionFileLocation": {"anyOf": ["type": "string", "type": "null"], "title": "Descriptionfilelocation", "description": "The URL of the API description file. This will be periodically scanned if `descriptionFileScanEnabled` is enabled. Supported formats are YAML and JSON, and it must adhere to OpenAPI versions 2, 3, or 3.1."}, "descriptionFileScanEnabled": {"anyOf": ["type": "boolean", "type": "null"], "title": "Descriptionfilescanenabled", "description": "Indicates if periodic scan of the description file is enabled"}, "descriptionFileScanIntervalHours": {"anyOf": [{"type": "integer", "maximum": 24, "minimum": 1}, "type": "null"], "title": "Descriptionfilescanintervalhours", "description": "The interval in hours for scanning the description file"}, "trafficScanEnabled": {"anyOf": ["type": "boolean", "type": "null"], "title": "Trafficscanenabled", "description": "Indicates if traffic scan is enabled"}, "trafficScanIntervalHours": {"anyOf": [{"type": "integer", "maximum": 24, "minimum": 1}, "type": "null"], "title": "Trafficscanintervalhours", "description": "The interval in hours for scanning the traffic"}}, "type": "object", "title": "UpdateApiDiscoverySettings", "description": "Request model for updating the API discovery settings"}
    UpdateApiPath: {"properties": {"path": {"type": "string", "maxLength": 1024, "title": "Path", "description": "The updated API path. When updating the path, variables can be renamed, path parts can be converted to variables and vice versa.", "examples": ["/api/v1/paths/{path_id}"]}, "tags": {"items": {"type": "string", "maxLength": 50, "pattern": "^[a-zA-Z]+[ a-zA-Z0-9]*$", "description": "A user defined tag. Tags must start with a letter and can contain only letters, numbers and spaces."}, "type": "array", "maxItems": 5, "title": "Tags", "examples": [["sensitivedataurl", "highriskurl"]]}, "api_groups": {"items": {"type": "string"}, "type": "array", "title": "Api Groups", "examples": [["accounts", "internal"]]}, "status": {"$ref": "#/components/schemas/ApiPathStatus"}}, "type": "object", "title": "UpdateApiPath", "description": "Request model for updating an API path"}
    UpdateApiSettings: {"properties": {"is_api": {"type": "boolean", "title": "Is Api", "description": "Indicates if the domain is an API domain. All requests to an API domain are treated as API requests. If this is set to true then the `api_urls` field is ignored."}, "api_urls": {"items": {"type": "string"}, "type": "array", "title": "Api Urls", "description": "The API URLs for a domain. If your domain has a common base URL for all API paths, it can be set here", "examples": [["api/v1/.*", "v2/.*"]]}}, "additionalProperties": false, "type": "object", "title": "UpdateApiSettings", "description": "Editable API settings of a domain"}
    UpdateCustomRule: {"properties": {"name": {"anyOf": [{"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "type": "null"], "title": "Name"}, "description": {"anyOf": [{"type": "string", "maxLength": 100}, "type": "null"], "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"anyOf": ["type": "boolean", "type": "null"], "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"anyOf": ["$ref": "#/components/schemas/CustomerRuleAction-Input", "type": "null"], "description": "The action that the rule takes when triggered"}, "conditions": {"anyOf": [{"items": {"$ref": "#/components/schemas/CustomRuleCondition-Input"}, "type": "array", "maxItems": 5, "minItems": 1}, "type": "null"], "title": "Conditions", "description": "The conditions required for the WAAP engine to trigger the rule. Rules may have between 1 and 5 conditions. All conditions must pass for the rule to trigger"}}, "type": "object", "title": "UpdateCustomRule", "description": "A request to update a WAAP rule"}
    UpdateDomain: {"properties": {"status": {"$ref": "#/components/schemas/DomainUpdateStatus", "description": "The current status of the domain"}}, "additionalProperties": false, "type": "object", "required": ["status"], "title": "UpdateDomain"}
    UpdateDomainDdosSettings: {"properties": {"global_threshold": {"type": "integer", "maximum": 50000, "minimum": 250, "title": "Global Threshold", "description": "The global threshold is responsible for identifying DDoS attacks with a slow rise in traffic. If the threshold is met and the current number of requests is at least double that of the previous 10-second window, DDoS protection will activate. Default is 5000."}, "burst_threshold": {"type": "integer", "maximum": 10000, "minimum": 30, "title": "Burst Threshold", "description": "The burst threshold detects sudden rises in traffic. If it is met and the number of requests is at least five times the last 2-second interval, DDoS protection will activate. Default is 1000."}}, "additionalProperties": false, "type": "object", "title": "UpdateDomainDdosSettings", "description": "Editable DDoS settings for a domain."}
    UpdateDomainSettings: {"properties": {"ddos": {"$ref": "#/components/schemas/UpdateDomainDdosSettings"}, "api": {"$ref": "#/components/schemas/UpdateApiSettings"}}, "additionalProperties": false, "type": "object", "title": "UpdateDomainSettings", "description": "Represents the editable settings for a domain."}
    UpdateFirewallRule: {"properties": {"name": {"anyOf": [{"type": "string", "maxLength": 100, "minLength": 1, "pattern": "^[A-Za-z0-9\\s.:'\";<>?&|\\\\]+$", "description": "The name assigned to the rule", "examples": ["Block foobar bot"]}, "type": "null"], "title": "Name"}, "description": {"anyOf": [{"type": "string", "maxLength": 100}, "type": "null"], "title": "Description", "description": "The description assigned to the rule"}, "enabled": {"anyOf": ["type": "boolean", "type": "null"], "title": "Enabled", "description": "Whether or not the rule is enabled"}, "action": {"anyOf": ["$ref": "#/components/schemas/FirewallRuleAction-Input", "type": "null"], "description": "The action that the rule takes when triggered"}, "conditions": {"anyOf": [{"items": {"$ref": "#/components/schemas/FirewallRuleCondition"}, "type": "array", "maxItems": 1, "minItems": 1}, "type": "null"], "title": "Conditions", "description": "The condition required for the WAAP engine to trigger the rule."}}, "type": "object", "title": "UpdateFirewallRule"}
    UpdateInsightPayload: {"properties": {"status": {"$ref": "#/components/schemas/InsightStatus", "description": "The status of the insight"}}, "type": "object", "required": ["status"], "title": "UpdateInsightPayload"}
    UpdateInsightSilencePayload: {"properties": {"labels": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Labels", "description": "A hash table of label names and values that apply to the insight silence"}, "comment": {"type": "string", "maxLength": 180, "title": "Comment", "description": "A comment explaining the reason for the silence"}, "author": {"type": "string", "maxLength": 180, "title": "Author", "description": "The author of the silence"}, "expire_at": {"anyOf": [{"type": "string", "format": "date-time"}, "type": "null"], "title": "Expire At", "description": "The date and time the silence expires in ISO 8601 format"}}, "type": "object", "required": ["comment", "author", "expire_at"], "title": "UpdateInsightSilencePayload"}
    UrlCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "match_type": {"type": "string", "enum": ["Exact", "Contains", "Regex"], "title": "Match Type", "description": "The type of matching condition.", "default": "Contains"}, "url": {"type": "string", "maxLength": 100, "minLength": 1, "title": "Url", "description": "The pattern to match against the request URL.\nConstraints depend on `match_type`:\n\n- **Exact/Contains**: plain text matching (e.g., `/admin`, must comply with `^[\\w!\\$~:#\\[\\]@\\(\\)\\\\*\\+,=\\/\\-\\.\\%]+$`).\n- **Regex**: a valid regular expression (e.g., `^/upload(/\\d+)?/\\w+`). Lookahead/lookbehind constructs are forbidden.", "examples": ["/wp-admin/"]}}, "type": "object", "required": ["url"], "title": "UrlCondition", "description": "Match the incoming request URL"}
    UserAgent: {"properties": {"full_string": {"type": "string", "title": "Full String", "description": "User agent", "examples": ["Mozilla/5.0 (X11; U; Linux x86_64; en-US) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.1.1599.114 Safari/537.36 Puffin/4.5.0IT"]}, "client": {"type": "string", "title": "Client", "description": "Client from User agent header", "examples": ["Firefox"]}, "client_version": {"type": "string", "title": "Client Version", "description": "User agent client version", "examples": ["44.3"]}, "base_browser": {"type": "string", "title": "Base Browser", "description": "User agent browser", "examples": ["Chrome"]}, "base_browser_version": {"type": "string", "title": "Base Browser Version", "description": "User agent browser version", "examples": ["47.0.2526.83"]}, "os": {"type": "string", "title": "Os", "description": "User agent os", "examples": ["Android"]}, "device": {"type": "string", "title": "Device", "description": "User agent device", "examples": ["Amazon Kindle Fire HDX 7"]}, "device_type": {"type": "string", "title": "Device Type", "description": "User agent device type", "examples": ["mobile"]}, "cpu": {"type": "string", "title": "Cpu", "description": "User agent cpu", "examples": ["intel"]}, "rendering_engine": {"type": "string", "title": "Rendering Engine", "description": "User agent engine", "examples": ["AppleWebKit"]}, "client_type": {"type": "string", "title": "Client Type", "description": "User agent client type", "examples": ["Custom Browser"]}}, "type": "object", "required": ["full_string", "client", "client_version", "base_browser", "base_browser_version", "os", "device", "device_type", "cpu", "rendering_engine", "client_type"], "title": "UserAgent", "description": "User agent details"}
    UserAgentCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "user_agent": {"type": "string", "maxLength": 300, "title": "User Agent", "description": "The user agent value to match", "examples": ["curl/"]}, "match_type": {"type": "string", "enum": ["Exact", "Contains"], "title": "Match Type", "description": "The type of matching condition.", "default": "Contains"}}, "type": "object", "required": ["user_agent"], "title": "UserAgentCondition", "description": "Match the user agent making the request"}
    UserDefinedTagsCondition: {"properties": {"negation": {"type": "boolean", "title": "Negation", "description": "Whether or not to apply a boolean NOT operation to the rule's condition", "default": false}, "tags": {"items": {"type": "string", "maxLength": 50, "minLength": 1, "pattern": "^[a-zA-Z]+[ a-zA-Z0-9]*$", "description": "A user-defined tag assigned to the request"}, "type": "array", "maxItems": 10, "minItems": 1, "title": "Tags", "description": "A list of user-defined tags to match against the request tags"}}, "type": "object", "required": ["tags"], "title": "UserDefinedTagsCondition", "description": "Matches requests based on user-defined tags"}
    WhoisInfo: {"properties": {"org_id": {"anyOf": ["type": "string", "type": "null"], "title": "Org Id", "description": "The organization ID"}, "org_name": {"anyOf": ["type": "string", "type": "null"], "title": "Org Name", "description": "The organization name"}, "net_name": {"anyOf": ["type": "string", "type": "null"], "title": "Net Name", "description": "The network name"}, "net_type": {"anyOf": ["type": "string", "type": "null"], "title": "Net Type", "description": "The network type"}, "net_range": {"anyOf": ["type": "string", "type": "null"], "title": "Net Range", "description": "The network range"}, "net_description": {"anyOf": ["type": "string", "type": "null"], "title": "Net Description", "description": "The network description"}, "cidr": {"anyOf": ["type": "integer", "type": "null"], "title": "Cidr", "description": "The CIDR"}, "owner_type": {"anyOf": ["type": "string", "type": "null"], "title": "Owner Type", "description": "The owner type"}, "country": {"anyOf": [{"type": "string", "pattern": "^\\w{2}$"}, "type": "null"], "title": "Country", "description": "The country"}, "state": {"anyOf": ["type": "string", "type": "null"], "title": "State", "description": "The state"}, "abuse_mail": {"anyOf": ["type": "string", "type": "null"], "title": "Abuse Mail", "description": "The abuse mail"}, "rir": {"anyOf": ["type": "string", "type": "null"], "title": "Rir", "description": "The RIR"}}, "type": "object", "title": "WhoisInfo"}
    app__models__organizations__Organization: {"properties": {"id": {"type": "integer", "title": "Id", "description": "The ID of an organization"}, "name": {"type": "string", "title": "Name", "description": "The name of an organization"}}, "type": "object", "required": ["id", "name"], "title": "Organization", "description": "Represents an IP range owner organization"}
    app__models__policies__Tag: {"properties": {"id": {"type": "integer", "title": "Id", "description": "Identifier of the tag."}, "name": {"type": "string", "title": "Name", "description": "Name of the tag."}, "description": {"type": "string", "title": "Description", "description": "Detailed description of the tag."}}, "type": "object", "required": ["id", "name", "description"], "title": "Tag", "description": "A single tag associated with a rule set."}
    app__models__requests__Organization: {"properties": {"name": {"type": "string", "title": "Name", "description": "Organization name", "examples": ["InfoWeb(Fujitsu Ltd"]}, "subnet": {"type": "string", "title": "Subnet", "description": "Network range", "examples": ["116.83.0.0-116.83.127.255"]}}, "type": "object", "required": ["name", "subnet"], "title": "Organization", "description": "Organization details"}
    app__models__tags__Tag: {"properties": {"name": {"type": "string", "title": "Name", "description": "The name of a tag that should be used in a WAAP rule condition"}, "readable_name": {"type": "string", "title": "Readable Name", "description": "The display name of the tag"}, "description": {"type": "string", "title": "Description", "description": "A tag's human readable description"}}, "type": "object", "required": ["name", "readable_name", "description"], "title": "Tag", "description": "Tags provide shortcuts for the rules used in WAAP policies for the creation of more complex WAAP rules."}
    waap_Count: {"properties": {"action": {"items": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array"}, "type": "array", "title": "Action", "description": "A collection of event counts per action. The first item is the action's abbreviation/full action name, and the second item is the number of events"}, "country": {"items": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array"}, "type": "array", "title": "Country", "description": "A collection of event counts per country of origin. The first item is the country's ISO 3166-1 alpha-2, and the second item is the number of events"}, "org": {"items": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array"}, "type": "array", "title": "Org", "description": "A collection of event counts per organization that owns the event's client IP. The first item is the organization's name, and the second item is the number of events"}, "rule_name": {"items": {"items": {"anyOf": ["type": "string", "type": "integer"]}, "type": "array"}, "type": "array", "title": "Rule Name", "description": "A collection of event counts per rule that triggered the event. The first item is the rule's name, and the second item is the number of events"}}, "type": "object", "required": ["action", "country", "org", "rule_name"], "title": "Count", "description": "A collection of total numbers of events per criteria"}
  securitySchemes:
    APIKey:
      description: "API key for authentication. Make sure to include the word `apikey`, followed by a single space and then your token.\nExample: `apikey 1234$abcdef`"
      type: apiKey
      in: header
      name: Authorization
