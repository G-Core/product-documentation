"openapi": "3.1.0"
"info": {"title": "Gcore OpenAPI â€“ FastEdge API", "description": "This OpenAPI is an aggregated OpenAPI specification that unifies all Gcore products into a single file. It covers Cloud, CDN, DNS, WAAP, DDoS Protection, Object Storage, Streaming, and FastEdge services.", "version": "2025-10-27T08:11:36.627211+00:00"}
"servers": ["url": "https://api.gcore.com"]
paths:
  "/fastedge/v1/apps":
    "get": {"operationId": "listApps", "parameters": [{"description": "Name of the app", "in": "query", "name": "name", "required": false, "schema": {"type": "string"}}, {"description": "API type:  \nwasi-http - WASI with HTTP entry point  \nproxy-wasm - Proxy-Wasm app, callable from CDN", "in": "query", "name": "api_type", "required": false, "schema": {"enum": ["wasi-http", "proxy-wasm"], "type": "string"}}, {"description": "Status code:  \n0 - draft (inactive)  \n1 - enabled  \n2 - disabled  \n3 - hourly call limit exceeded  \n4 - daily call limit exceeded  \n5 - suspended", "in": "query", "name": "status", "required": false, "schema": {"type": "integer"}}, {"description": "Template ID", "in": "query", "name": "template", "required": false, "schema": {"format": "int64", "type": "integer"}}, {"description": "Binary ID", "in": "query", "name": "binary", "required": false, "schema": {"format": "int64", "type": "integer"}}, {"description": "Plan ID", "in": "query", "name": "plan", "required": false, "schema": {"format": "int64", "type": "integer"}}, {"description": "Limit for pagination", "in": "query", "name": "limit", "schema": {"type": "integer", "x-stainless-skip": ["terraform"]}}, {"description": "Offset for pagination", "in": "query", "name": "offset", "schema": {"type": "integer"}}, {"description": "Ordering", "in": "query", "name": "ordering", "schema": {"enum": ["name", "-name", "status", "-status", "id", "-id", "template", "-template", "binary", "-binary", "plan", "-plan"], "type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"properties": {"apps": {"items": {"$ref": "#/components/schemas/app_short"}, "type": "array"}, "count": {"description": "Total number of apps", "type": "integer"}}, "required": ["apps"], "type": "object"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}}, "summary": "List client's apps", "tags": ["Apps"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.fastedge.apps.list()\npage = page.apps[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Fastedge.Apps.List(context.TODO(), fastedge.AppListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
    "post": {"operationId": "addApp", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/app"}}}, "description": "App details", "required": false}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/app_short"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "429": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Limit exceeded"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Add a new app", "tags": ["Apps"], "x-codegen-request-body-name": "app", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\napp_short = client.fastedge.apps.create()\nprint(app_short.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  appShort, err := client.Fastedge.Apps.New(context.TODO(), fastedge.AppNewParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", appShort.ID)\n}\n"}]}
  "/fastedge/v1/apps/{id}":
    "delete": {"operationId": "delApp", "parameters": [{"description": "ID of the app", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "responses": {"204": {"description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "503": {"content": {"text/plain": {"schema": {"type": "string"}}}, "description": "Service unavailable"}}, "summary": "Delete app", "tags": ["Apps"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.fastedge.apps.delete(\n    0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Fastedge.Apps.Delete(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "get": {"operationId": "getApp", "parameters": [{"description": "ID of the app", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/app"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}}, "summary": "Get app details", "tags": ["Apps"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\napp = client.fastedge.apps.get(\n    0,\n)\nprint(app.plan_id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  app, err := client.Fastedge.Apps.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", app.PlanID)\n}\n"}]}
    "patch": {"operationId": "patchApp", "parameters": [{"description": "ID of the app", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/app"}}}, "description": "App details", "required": false}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/app_short"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "500": {"content": {"text/plain": {"schema": {"type": "string"}}}, "description": "Error occurred"}, "503": {"content": {"text/plain": {"schema": {"type": "string"}}}, "description": "Service unavailable"}}, "summary": "Update app", "tags": ["Apps"], "x-codegen-request-body-name": "app", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\napp_short = client.fastedge.apps.update(\n    id=0,\n)\nprint(app_short.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  appShort, err := client.Fastedge.Apps.Update(\n    context.TODO(),\n    0,\n    fastedge.AppUpdateParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", appShort.ID)\n}\n"}]}
    "put": {"operationId": "updateApp", "parameters": [{"description": "ID of the app", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"allOf": ["$ref": "#/components/schemas/app", {"required": ["binary", "status"], "type": "object"}]}}}, "description": "App details", "required": false}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/app_short"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Update an app", "tags": ["Apps"], "x-codegen-request-body-name": "app", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\napp_short = client.fastedge.apps.replace(\n    id=0,\n)\nprint(app_short.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  appShort, err := client.Fastedge.Apps.Replace(\n    context.TODO(),\n    0,\n    fastedge.AppReplaceParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", appShort.ID)\n}\n"}]}
  "/fastedge/v1/apps/{id}/logs":
    "get": {"description": "List logs for the app", "operationId": "listLogs", "parameters": [{"description": "ID of the app", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}, {"description": "Reporting period start time, RFC3339 format. Default 1 hour ago.", "in": "query", "name": "from", "schema": {"example": "2023-12-31 23:59:59+00:00", "format": "date-time", "type": "string"}}, {"description": "Reporting period end time, RFC3339 format. Default current time in UTC.", "in": "query", "name": "to", "schema": {"example": "2024-01-31 23:59:59+00:00", "format": "date-time", "type": "string"}}, {"description": "Edge name", "in": "query", "name": "edge", "schema": {"format": "string", "type": "string"}}, {"description": "Sort order (default desc)", "in": "query", "name": "sort", "schema": {"enum": ["desc", "asc"], "format": "string", "type": "string"}}, {"description": "Limit for pagination", "in": "query", "name": "limit", "schema": {"format": "int32", "type": "integer", "x-stainless-skip": ["terraform"]}}, {"description": "Offset for pagination", "in": "query", "name": "offset", "schema": {"format": "int32", "type": "integer"}}, {"description": "Search string", "example": "upstream timeout", "in": "query", "name": "search", "schema": {"format": "string", "type": "string"}}, {"description": "Search by client IP", "example": "8.8.4.4", "in": "query", "name": "client_ip", "schema": {"format": "ipv4", "type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"properties": {"logs": {"items": {"$ref": "#/components/schemas/log"}, "type": "array"}, "offset": {"description": "Current request offset", "format": "int32", "type": "integer"}, "total_count": {"description": "Number of total logs available", "format": "int32", "type": "integer"}}, "type": "object"}}}, "description": "A paged array of logs"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "List application logs", "tags": ["Apps"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.fastedge.apps.logs.list(\n    id=0,\n)\npage = page.logs[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Fastedge.Apps.Logs.List(\n    context.TODO(),\n    0,\n    fastedge.AppLogListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/fastedge/v1/apps/by-name/{name}":
    "get": {"deprecated": true, "operationId": "getAppIdByName", "parameters": [{"description": "Name of the app", "in": "path", "name": "name", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"format": "int64", "type": "integer"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}}, "summary": "Get app id by app name", "tags": ["Apps"]}
  "/fastedge/v1/binaries":
    "get": {"operationId": "listBinaries", "responses": {"200": {"content": {"application/json": {"schema": {"properties": {"binaries": {"items": {"$ref": "#/components/schemas/binary_short"}, "type": "array"}}, "required": ["binaries"], "type": "object"}}}, "description": "Ok"}}, "summary": "List binaries", "tags": ["Binaries"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nbinaries = client.fastedge.binaries.list()\nprint(binaries.binaries)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  binaries, err := client.Fastedge.Binaries.List(context.TODO())\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", binaries.Binaries)\n}\n"}]}
  "/fastedge/v1/binaries/{id}":
    "delete": {"operationId": "delBinary", "parameters": [{"description": "Binary ID", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "responses": {"204": {"description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "409": {"description": "Binary referenced"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Delete a binary", "tags": ["Binaries"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.fastedge.binaries.delete(\n    0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Fastedge.Binaries.Delete(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "get": {"operationId": "getBinary", "parameters": [{"description": "Binary ID", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/binary"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}}, "summary": "Get binary", "tags": ["Binaries"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nbinary = client.fastedge.binaries.get(\n    0,\n)\nprint(binary.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  binary, err := client.Fastedge.Binaries.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", binary.ID)\n}\n"}]}
  "/fastedge/v1/binaries/raw":
    "post": {"operationId": "storeBinary", "requestBody": {"content": {"application/octet-stream": {"schema": {"format": "binary", "type": "string"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/binary_short"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "429": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Limit exceeded"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Store compiled WASM binary", "tags": ["Binaries"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nbinary_short = client.fastedge.binaries.create(\n    b\"raw file contents\",\n)\nprint(binary_short.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"bytes\"\n  \"context\"\n  \"fmt\"\n  \"io\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  binaryShort, err := client.Fastedge.Binaries.New(context.TODO(), io.Reader(bytes.NewBuffer([]byte(\"some file contents\"))))\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", binaryShort.ID)\n}\n"}]}
  "/fastedge/v1/kv":
    "get": {"operationId": "listStores", "parameters": [{"description": "App ID", "in": "query", "name": "app_id", "schema": {"format": "int64", "type": "integer"}}], "responses": {"200": {"content": {"application/json": {"schema": {"properties": {"count": {"description": "Total number of stores", "type": "integer"}, "stores": {"items": {"$ref": "#/components/schemas/kv_store_short"}, "type": "array"}}, "required": ["count"], "type": "object"}}}, "description": "Ok"}, "404": {"description": "Not found"}}, "summary": "List available stores", "tags": ["KV Storage"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nkv_stores = client.fastedge.kv_stores.list()\nprint(kv_stores.count)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  kvStores, err := client.Fastedge.KvStores.List(context.TODO(), fastedge.KvStoreListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", kvStores.Count)\n}\n"}]}
    "post": {"operationId": "addStore", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/kv_store"}}}, "description": "Key-value pair details", "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/kv_store"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Add a new KV store", "tags": ["KV Storage"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nkv_store = client.fastedge.kv_stores.create()\nprint(kv_store.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  kvStore, err := client.Fastedge.KvStores.New(context.TODO(), fastedge.KvStoreNewParams{\n    KvStore: fastedge.KvStoreParam{\n\n    },\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", kvStore.ID)\n}\n"}]}
  "/fastedge/v1/kv/{id}":
    "delete": {"operationId": "delStore", "parameters": [{"description": "Id of the store", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "responses": {"204": {"description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "409": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/conflictError"}}}, "description": "Binary referenced"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Delete a store", "tags": ["KV Storage"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.fastedge.kv_stores.delete(\n    0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Fastedge.KvStores.Delete(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "get": {"operationId": "getStore", "parameters": [{"description": "Id of the store", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "responses": {"200": {"content": {"application/json": {"schema": {"allOf": ["$ref": "#/components/schemas/kv_store", "$ref": "#/components/schemas/kv_store_stats"]}}}, "description": "Ok"}, "404": {"description": "Not found"}}, "summary": "Get store by id", "tags": ["KV Storage"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nkv_store = client.fastedge.kv_stores.get(\n    0,\n)\nprint(kv_store)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  kvStore, err := client.Fastedge.KvStores.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", kvStore)\n}\n"}]}
    "put": {"description": "Update a store", "operationId": "updateStore", "parameters": [{"description": "Id of the store", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/kv_store"}}}, "description": "Store details"}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/kv_store"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Update a store", "tags": ["KV Storage"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nkv_store = client.fastedge.kv_stores.replace(\n    id=0,\n)\nprint(kv_store.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  kvStore, err := client.Fastedge.KvStores.Replace(\n    context.TODO(),\n    0,\n    fastedge.KvStoreReplaceParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", kvStore.ID)\n}\n"}]}
  "/fastedge/v1/me":
    "get": {"operationId": "getClientMe", "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/client"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}}, "summary": "Get status and limits for the client", "tags": ["FastEdge Clients"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient = client.fastedge.get_account_overview()\nprint(client.plan_id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  client, err := client.Fastedge.GetAccountOverview(context.TODO())\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", client.PlanID)\n}\n"}]}
  "/fastedge/v1/secrets":
    "get": {"operationId": "listSecrets", "parameters": [{"description": "App ID", "in": "query", "name": "app_id", "schema": {"format": "int64", "type": "integer"}}, {"description": "Secret name", "in": "query", "name": "secret_name", "schema": {"type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"properties": {"secrets": {"items": {"$ref": "#/components/schemas/secret_short"}, "type": "array"}}, "required": ["secrets"], "type": "object"}}}, "description": "Ok"}, "404": {"description": "Not found"}}, "summary": "List available secrets", "tags": ["FastEdge Secrets"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nsecrets = client.fastedge.secrets.list()\nprint(secrets.secrets)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  secrets, err := client.Fastedge.Secrets.List(context.TODO(), fastedge.SecretListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", secrets.Secrets)\n}\n"}]}
    "post": {"operationId": "addSecret", "requestBody": {"content": {"application/json": {"schema": {"allOf": ["$ref": "#/components/schemas/secret", "required": ["name"]]}}}, "description": "Secret details", "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"allOf": ["$ref": "#/components/schemas/secret", {"properties": {"id": {"description": "The unique identifier of the secret.", "format": "int64", "type": "integer"}}, "type": "object"}]}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Add a new secret", "tags": ["FastEdge Secrets"], "x-codegen-request-body-name": "secret", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nsecret = client.fastedge.secrets.create(\n    name=\"name\",\n)\nprint(secret)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  secret, err := client.Fastedge.Secrets.New(context.TODO(), fastedge.SecretNewParams{\n    Secret: fastedge.SecretParam{\n      Name: gcore.String(\"name\"),\n    },\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", secret)\n}\n"}]}
  "/fastedge/v1/secrets/{id}":
    "delete": {"operationId": "deleteSecret", "parameters": [{"description": "Id of the secret", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}, {"description": "Force delete secret even if it is used in slots", "in": "query", "name": "force", "schema": {"type": "boolean"}}], "responses": {"204": {"description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "409": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/conflictError"}}}, "description": "Entity referenced"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Delete a secret", "tags": ["FastEdge Secrets"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.fastedge.secrets.delete(\n    id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Fastedge.Secrets.Delete(\n    context.TODO(),\n    0,\n    fastedge.SecretDeleteParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "get": {"operationId": "getSecret", "parameters": [{"description": "Id of the secret", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/secret"}}}, "description": "Ok"}, "404": {"description": "Not found"}}, "summary": "Get secret by id", "tags": ["FastEdge Secrets"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nsecret = client.fastedge.secrets.get(\n    0,\n)\nprint(secret.app_count)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  secret, err := client.Fastedge.Secrets.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", secret.AppCount)\n}\n"}]}
    "patch": {"description": "Update a secret", "operationId": "patchSecret", "parameters": [{"description": "Id of the secret", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/secret"}}}, "description": "Secret details", "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/secret"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "409": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/conflictError"}}}, "description": "Entity referenced"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Update a secret", "tags": ["FastEdge Secrets"], "x-codegen-request-body-name": "secret", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nsecret = client.fastedge.secrets.update(\n    id=0,\n)\nprint(secret.app_count)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  secret, err := client.Fastedge.Secrets.Update(\n    context.TODO(),\n    0,\n    fastedge.SecretUpdateParams{\n      Secret: fastedge.SecretParam{\n\n      },\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", secret.AppCount)\n}\n"}]}
    "put": {"description": "Update a secret", "operationId": "updateSecret", "parameters": [{"description": "Id of the secret", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"allOf": ["$ref": "#/components/schemas/secret", "required": ["name"]]}}}, "description": "Secret details", "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/secret"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "409": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/conflictError"}}}, "description": "Entity referenced"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Update a secret", "tags": ["FastEdge Secrets"], "x-codegen-request-body-name": "secret", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nsecret = client.fastedge.secrets.replace(\n    id=0,\n    name=\"name\",\n)\nprint(secret.app_count)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  secret, err := client.Fastedge.Secrets.Replace(\n    context.TODO(),\n    0,\n    fastedge.SecretReplaceParams{\n      Secret: fastedge.SecretParam{\n        Name: gcore.String(\"name\"),\n      },\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", secret.AppCount)\n}\n"}]}
  "/fastedge/v1/stats/app_duration":
    "get": {"operationId": "StatsDuration", "parameters": [{"description": "App ID", "in": "query", "name": "id", "schema": {"format": "int64", "type": "integer"}}, {"description": "Reporting period start time, RFC3339 format", "in": "query", "name": "from", "required": true, "schema": {"format": "date-time", "type": "string"}}, {"description": "Reporting period end time (not included into reporting period), RFC3339 format", "in": "query", "name": "to", "required": true, "schema": {"format": "date-time", "type": "string"}}, {"description": "Reporting granularity, in seconds", "in": "query", "name": "step", "required": true, "schema": {"default": 60, "type": "integer"}}, {"description": "Network name", "in": "query", "name": "network", "schema": {"format": "string", "type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"properties": {"stats": {"items": {"$ref": "#/components/schemas/duration_stats"}, "type": "array"}}, "required": ["stats"], "type": "object"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}}, "summary": "Execution duration statistics", "tags": ["Stats"], "x-codeSamples": [{"lang": "Python", "source": "from datetime import datetime\nfrom gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nresponse = client.fastedge.statistics.get_duration_series(\n    from_=datetime.fromisoformat(\"2019-12-27T18:11:19.117\"),\n    step=0,\n    to=datetime.fromisoformat(\"2019-12-27T18:11:19.117\"),\n)\nprint(response.stats)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"time\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  response, err := client.Fastedge.Statistics.GetDurationSeries(context.TODO(), fastedge.StatisticGetDurationSeriesParams{\n    From: time.Now(),\n    Step: 0,\n    To: time.Now(),\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", response.Stats)\n}\n"}]}
  "/fastedge/v1/stats/calls":
    "get": {"operationId": "StatsCalls", "parameters": [{"description": "Reporting period start time, RFC3339 format", "in": "query", "name": "from", "required": true, "schema": {"format": "date-time", "type": "string"}}, {"description": "Reporting period end time (not included into reporting period), RFC3339 format", "in": "query", "name": "to", "required": true, "schema": {"format": "date-time", "type": "string"}}, {"description": "Reporting granularity, in seconds", "in": "query", "name": "step", "required": true, "schema": {"default": 60, "type": "integer"}}, {"description": "App ID", "in": "query", "name": "id", "schema": {"format": "int64", "type": "integer"}}, {"description": "Network name", "in": "query", "name": "network", "schema": {"format": "string", "type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"properties": {"stats": {"items": {"$ref": "#/components/schemas/call_stats"}, "type": "array"}}, "required": ["stats"], "type": "object"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}}, "summary": "Call statistics", "tags": ["Stats"], "x-codeSamples": [{"lang": "Python", "source": "from datetime import datetime\nfrom gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nresponse = client.fastedge.statistics.get_call_series(\n    from_=datetime.fromisoformat(\"2019-12-27T18:11:19.117\"),\n    step=0,\n    to=datetime.fromisoformat(\"2019-12-27T18:11:19.117\"),\n)\nprint(response.stats)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"time\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  response, err := client.Fastedge.Statistics.GetCallSeries(context.TODO(), fastedge.StatisticGetCallSeriesParams{\n    From: time.Now(),\n    Step: 0,\n    To: time.Now(),\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", response.Stats)\n}\n"}]}
  "/fastedge/v1/template":
    "get": {"operationId": "listTemplates", "parameters": [{"description": "API type:  \nwasi-http - WASI with HTTP entry point  \nproxy-wasm - Proxy-Wasm app, callable from CDN", "in": "query", "name": "api_type", "required": false, "schema": {"enum": ["wasi-http", "proxy-wasm"], "type": "string"}}, {"description": "Only my templates", "in": "query", "name": "only_mine", "required": false, "schema": {"default": false, "type": "boolean"}}, {"description": "Limit for pagination", "in": "query", "name": "limit", "schema": {"type": "integer", "x-stainless-skip": ["terraform"]}}, {"description": "Offset for pagination", "in": "query", "name": "offset", "schema": {"type": "integer"}}], "responses": {"200": {"content": {"application/json": {"schema": {"properties": {"count": {"description": "Total number of templates", "type": "integer"}, "templates": {"items": {"$ref": "#/components/schemas/template_short"}, "type": "array"}}, "required": ["templates"], "type": "object"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}}, "summary": "List app templates", "tags": ["FastEdge Templates"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.fastedge.templates.list()\npage = page.templates[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Fastedge.Templates.List(context.TODO(), fastedge.TemplateListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
    "post": {"operationId": "addTemplate", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/template"}}}, "description": "Template details", "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/template_short"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Add template", "tags": ["FastEdge Templates"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\ntemplate_short = client.fastedge.templates.create(\n    binary_id=0,\n    name=\"name\",\n    owned=True,\n    params=[{\n        \"data_type\": \"string\",\n        \"mandatory\": True,\n        \"name\": \"name\",\n    }],\n)\nprint(template_short.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  templateShort, err := client.Fastedge.Templates.New(context.TODO(), fastedge.TemplateNewParams{\n    Template: fastedge.TemplateParam{\n      BinaryID: 0,\n      Name: \"name\",\n      Owned: true,\n      Params: []fastedge.TemplateParameter{fastedge.TemplateParameter{\n        DataType: fastedge.TemplateParameterDataTypeString,\n        Mandatory: true,\n        Name: \"name\",\n      }},\n    },\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", templateShort.ID)\n}\n"}]}
  "/fastedge/v1/template/{id}":
    "delete": {"operationId": "delTemplate", "parameters": [{"description": "ID of the template", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}, {"description": "Force template deletion even if it is shared to groups", "in": "query", "name": "force", "schema": {"type": "boolean"}}], "responses": {"204": {"description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Delete template", "tags": ["FastEdge Templates"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.fastedge.templates.delete(\n    id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Fastedge.Templates.Delete(\n    context.TODO(),\n    0,\n    fastedge.TemplateDeleteParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "get": {"operationId": "getTemplate", "parameters": [{"description": "ID of the template", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/template"}}}, "description": "Ok"}, "404": {"description": "Not found"}}, "summary": "Get template details", "tags": ["FastEdge Templates"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\ntemplate = client.fastedge.templates.get(\n    0,\n)\nprint(template.binary_id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  template, err := client.Fastedge.Templates.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", template.BinaryID)\n}\n"}]}
    "put": {"operationId": "updateTemplate", "parameters": [{"description": "ID of the template", "in": "path", "name": "id", "required": true, "schema": {"format": "int64", "type": "integer"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/template"}}}, "description": "Template details", "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/template_short"}}}, "description": "Ok"}, "400": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Bad request"}, "404": {"description": "Not found"}, "503": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/error"}}}, "description": "Service unavailable"}}, "summary": "Update template", "tags": ["FastEdge Templates"], "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\ntemplate_short = client.fastedge.templates.replace(\n    id=0,\n    binary_id=0,\n    name=\"name\",\n    owned=True,\n    params=[{\n        \"data_type\": \"string\",\n        \"mandatory\": True,\n        \"name\": \"name\",\n    }],\n)\nprint(template_short.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/fastedge\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  templateShort, err := client.Fastedge.Templates.Replace(\n    context.TODO(),\n    0,\n    fastedge.TemplateReplaceParams{\n      Template: fastedge.TemplateParam{\n        BinaryID: 0,\n        Name: \"name\",\n        Owned: true,\n        Params: []fastedge.TemplateParameter{fastedge.TemplateParameter{\n          DataType: fastedge.TemplateParameterDataTypeString,\n          Mandatory: true,\n          Name: \"name\",\n        }},\n      },\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", templateShort.ID)\n}\n"}]}
tags:
- {"description": "Application templates", "name": "FastEdge Templates", "x-displayName": "Templates"}
- {"description": "Client-level settings and limits", "name": "FastEdge Clients", "x-displayName": "Clients"}
- {"description": "Apps are descriptions of edge apps, that reference the binary and may contain app-specific settings, such as environment variables.", "name": "Apps", "x-displayName": "Apps"}
- {"description": "Binaries are WebAssembly executables that are actually executed when app is ran.", "name": "Binaries", "x-displayName": "Binaries"}
- {"description": "Statistics of edge app use", "name": "Stats", "x-displayName": "Stats"}
- {"description": "Secret values that can be used in apps", "name": "FastEdge Secrets", "x-displayName": "Secrets"}
- {"description": "Key-value storage for apps", "name": "KV Storage", "x-displayName": "KV Storage"}
x-tagGroups:
- {"name": "FastEdge API", "tags": ["FastEdge Templates", "FastEdge Clients", "Apps", "Binaries", "Stats", "FastEdge Secrets", "KV Storage"]}
security: ["APIKey": []]
components:
  schemas:
    app: {"type": "object", "properties": {"name": {"type": "string", "description": "App name"}, "url": {"type": "string", "readOnly": true, "description": "App URL"}, "binary": {"type": "integer", "format": "int64", "description": "Binary ID"}, "template": {"type": "integer", "format": "int64", "description": "Template ID"}, "template_name": {"readOnly": true, "type": "string", "description": "Template name"}, "status": {"type": "integer", "description": "Status code:  \n0 - draft (inactive)  \n1 - enabled  \n2 - disabled  \n3 - hourly call limit exceeded  \n4 - daily call limit exceeded  \n5 - suspended"}, "plan_id": {"readOnly": true, "type": "integer", "format": "int64", "description": "Plan ID"}, "plan": {"readOnly": true, "type": "string", "description": "Plan name"}, "env": {"type": "object", "description": "Environment variables", "additionalProperties": {"type": "string"}, "example": {"var1": "value1", "var2": "value2"}}, "rsp_headers": {"type": "object", "description": "Extra headers to add to the response", "additionalProperties": {"type": "string"}, "example": {"header1": "value1", "header2": "value2"}}, "log": {"type": "string", "description": "Logging channel (by default - kafka, which allows exploring logs with API)", "nullable": true, "enum": ["kafka", "none"]}, "debug": {"type": "boolean", "writeOnly": true, "description": "Switch on logging for 30 minutes (switched off by default)", "default": false}, "debug_until": {"type": "string", "format": "date-time", "readOnly": true, "description": "When debugging finishes"}, "comment": {"type": "string", "description": "App description"}, "api_type": {"readOnly": true, "type": "string", "description": "Wasm API type"}, "networks": {"readOnly": true, "description": "Networks", "type": "array", "items": {"type": "string"}}, "secrets": {"type": "object", "description": "Application secrets", "additionalProperties": {"$ref": "#/components/schemas/app_secret_short"}}, "stores": {"type": "object", "description": "KV stores for the app", "additionalProperties": {"type": "integer", "format": "int64"}, "example": {"country_allow": 1, "ip_block": 2}}}}
    app_secret_short: {"type": "object", "description": "Application secret short description", "required": ["id"], "properties": {"id": {"type": "integer", "format": "int64", "description": "The unique identifier of the secret."}, "name": {"type": "string", "readOnly": true, "description": "The unique name of the secret."}, "comment": {"type": "string", "readOnly": true, "description": "A description or comment about the secret."}}}
    app_short: {"required": ["id", "name", "status", "binary", "api_type", "plan_id"], "type": "object", "properties": {"id": {"type": "integer", "format": "int64", "description": "App ID"}, "name": {"type": "string", "description": "App name"}, "url": {"type": "string", "description": "App URL"}, "status": {"type": "integer", "description": "Status code:  \n0 - draft (inactive)  \n1 - enabled  \n2 - disabled  \n3 - hourly call limit exceeded  \n4 - daily call limit exceeded  \n5 - suspended"}, "binary": {"type": "integer", "format": "int64", "description": "Binary ID"}, "comment": {"type": "string", "description": "Description of the binary"}, "api_type": {"type": "string", "description": "Wasm API type"}, "debug_until": {"type": "string", "format": "date-time", "description": "When debugging finishes"}, "debug": {"default": false, "description": "Switch on logging for 30 minutes (switched off by default)", "type": "boolean", "writeOnly": true}, "template": {"type": "integer", "format": "int64", "description": "Template ID"}, "template_name": {"type": "string", "description": "Template name"}, "networks": {"description": "Networks", "type": "array", "items": {"type": "string"}}, "upgradeable_to": {"type": "integer", "format": "int64", "description": "ID of the binary the app can be upgraded to"}, "plan_id": {"type": "integer", "format": "int64", "description": "Application plan ID"}, "plan": {"type": "string", "description": "Application plan name"}}}
    binary: {"required": ["id", "status", "source", "api_type"], "type": "object", "properties": {"id": {"type": "integer", "format": "int64", "description": "Binary ID"}, "status": {"type": "integer", "description": "Status code:  \n0 - pending  \n1 - compiled  \n2 - compilation failed (errors available)  \n3 - compilation failed (errors not available)  \n4 - resulting binary exceeded the limit  \n5 - unsupported source language"}, "source": {"type": "integer", "description": "Source language:  \n0 - unknown  \n1 - Rust  \n2 - JavaScript"}, "unref_since": {"type": "string", "description": "Not used since (UTC)"}, "api_type": {"type": "string", "description": "Wasm API type"}, "checksum": {"type": "string", "description": "MD5 hash of the binary"}}}
    binary_short: {"required": ["id", "status", "api_type"], "type": "object", "properties": {"id": {"type": "integer", "format": "int64", "description": "Binary ID"}, "status": {"type": "integer", "description": "Status code:  \n0 - pending  \n1 - compiled  \n2 - compilation failed (errors available)  \n3 - compilation failed (errors not available)  \n4 - resulting binary exceeded the limit  \n5 - unsupported source language"}, "unref_since": {"type": "string", "description": "Not used since (UTC)"}, "api_type": {"type": "string", "description": "Wasm API type"}, "checksum": {"type": "string", "description": "MD5 hash of the binary"}}}
    byod: {"type": "object", "description": "BYOD (Bring Your Own Data) settings", "required": ["url", "prefix"], "properties": {"url": {"type": "string", "description": "URL to connect to"}, "prefix": {"type": "string", "description": "Key prefix"}}}
    call_stats: {"type": "object", "description": "Edge app call statistics", "required": ["time", "count_by_status"], "properties": {"time": {"type": "string", "format": "date-time", "description": "Beginning ot reporting slot"}, "count_by_status": {"type": "array", "description": "Count by status", "items": {"$ref": "#/components/schemas/count_by_status"}}}}
    client: {"required": ["status", "hourly_limit", "hourly_consumption", "daily_limit", "daily_consumption", "app_limit", "app_count", "monthly_consumption", "networks", "plan_id"], "type": "object", "properties": {"status": {"type": "integer", "description": "Status code:  \n1 - enabled  \n2 - disabled  \n3 - hourly call limit exceeded  \n4 - daily call limit exceeded  \n5 - suspended"}, "hourly_limit": {"type": "integer", "description": "Max allowed calls for all apps during an hour"}, "hourly_consumption": {"type": "integer", "description": "Actual number of calls for all apps during the current hour"}, "daily_limit": {"type": "integer", "description": "Max allowed calls for all apps during a day (UTC)"}, "daily_consumption": {"type": "integer", "description": "Actual number of calls for all apps during the current day (UTC)"}, "app_limit": {"type": "integer", "description": "Max allowed number of apps"}, "app_count": {"type": "integer", "description": "Actual allowed number of apps"}, "monthly_consumption": {"type": "integer", "description": "Actual number of calls for all apps during the current calendar month (UTC)"}, "networks": {"type": "array", "description": "List of enabled networks", "items": {"$ref": "#/components/schemas/network"}}, "plan_id": {"type": "integer", "format": "int64", "description": "Plan ID"}, "plan": {"readOnly": true, "type": "string", "description": "Plan name"}}}
    conflictError: {"type": "object", "required": ["error", "conflicting_ids"], "properties": {"error": {"type": "string", "description": "Error message"}, "conflicting_ids": {"type": "array", "items": {"type": "integer", "format": "int64"}, "description": "List of conflicting entity IDs"}}}
    count_by_status: {"type": "object", "required": ["status", "count"], "properties": {"status": {"type": "integer", "description": "HTTP status"}, "count": {"type": "integer", "description": "Number of app calls"}}}
    duration_stats: {"type": "object", "description": "Edge app execution duration statistics", "required": ["time", "min", "max", "avg", "median", "perc75", "perc90"], "properties": {"time": {"type": "string", "format": "date-time", "description": "Beginning ot reporting slot"}, "min": {"type": "integer", "format": "int64", "description": "Min duration in usec"}, "max": {"type": "integer", "format": "int64", "description": "Max duration in usec"}, "avg": {"type": "integer", "format": "int64", "description": "Average duration in usec"}, "median": {"type": "integer", "format": "int64", "description": "Median (50% percentile) duration in usec"}, "perc75": {"type": "integer", "format": "int64", "description": "75% percentile duration in usec"}, "perc90": {"type": "integer", "format": "int64", "description": "90% percentile duration in usec"}}}
    error: {"type": "object", "required": ["error"], "properties": {"error": {"type": "string", "description": "Error message"}}}
    kv_store: {"type": "object", "properties": {"id": {"type": "integer", "format": "int64", "description": "The unique identifier of the store", "readOnly": true, "x-go-type-skip-optional-pointer": true}, "comment": {"type": "string", "description": "A description of the store"}, "updated": {"type": "string", "format": "date-time", "description": "Last update time", "readOnly": true, "x-go-type-skip-optional-pointer": true}, "app_count": {"type": "integer", "description": "The number of applications that use this store", "readOnly": true, "x-go-type-skip-optional-pointer": true}, "byod": {"type": "object", "$ref": "#/components/schemas/byod"}}}
    kv_store_short: {"type": "object", "properties": {"id": {"type": "integer", "format": "int64", "description": "The unique identifier of the store", "readOnly": true, "x-go-type-skip-optional-pointer": true}, "comment": {"type": "string", "description": "A description of the store"}, "updated": {"type": "string", "format": "date-time", "description": "Last update time", "readOnly": true, "x-go-type-skip-optional-pointer": true}}}
    kv_store_stats: {"type": "object", "properties": {"stats": {"type": "object", "description": "Store statistics", "readOnly": true, "required": ["kv_count", "zset_count", "cf_count", "size"], "properties": {"kv_count": {"type": "integer", "description": "Total number of KV entries"}, "zset_count": {"type": "integer", "description": "Total number of sorted set entries"}, "cf_count": {"type": "integer", "description": "Total number of Cuckoo filter entries"}, "size": {"type": "integer", "format": "int64", "description": "Total store size in bytes"}}}}}
    log: {"type": "object", "properties": {"id": {"type": "string", "title": "Id of the log", "description": "Id of the log"}, "app_name": {"type": "string", "title": "Name of the application", "description": "Name of the application"}, "timestamp": {"type": "string", "format": "date-time", "title": "Timstamp of a log in RFC3339 format", "description": "Timestamp of a log in RFC3339 format"}, "log": {"type": "string", "title": "Log message", "description": "Log message"}, "edge": {"type": "string", "title": "Edge name", "description": "Edge name"}, "client_ip": {"type": "string", "title": "Client IP", "description": "Client IP"}}}
    network: {"type": "object", "required": ["name", "is_default"], "properties": {"name": {"type": "string", "description": "Network name"}, "is_default": {"type": "boolean", "description": "Is network is default"}}}
    secret: {"type": "object", "properties": {"name": {"type": "string", "description": "The unique name of the secret."}, "comment": {"type": "string", "description": "A description or comment about the secret."}, "app_count": {"type": "integer", "format": "int", "description": "The number of applications that use this secret.", "readOnly": true}, "secret_slots": {"type": "array", "description": "A list of secret slots associated with this secret.", "items": {"$ref": "#/components/schemas/secret_slot"}}}}
    secret_short: {"type": "object", "properties": {"id": {"type": "integer", "format": "int64", "description": "The unique identifier of the secret."}, "name": {"type": "string", "description": "The unique name of the secret."}, "comment": {"type": "string", "description": "A description or comment about the secret."}, "app_count": {"type": "integer", "format": "int", "description": "The number of applications that use this secret.", "readOnly": true}}, "required": ["name"]}
    secret_slot: {"type": "object", "properties": {"slot": {"type": "integer", "format": "int64", "description": "Secret slot ID."}, "value": {"type": "string", "description": "The value of the secret.", "writeOnly": true}, "checksum": {"type": "string", "description": "A checksum of the secret value for integrity verification.", "readOnly": true}}, "required": ["slot"]}
    template: {"type": "object", "required": ["binary_id", "name", "params", "api_type", "owned"], "properties": {"binary_id": {"type": "integer", "format": "int64", "description": "Binary ID"}, "name": {"type": "string", "description": "Name of the template"}, "short_descr": {"type": "string", "description": "Short description of the template"}, "long_descr": {"type": "string", "description": "Long description of the template"}, "api_type": {"readOnly": true, "type": "string", "description": "Wasm API type"}, "owned": {"type": "boolean", "description": "Is the template owned by user?"}, "params": {"type": "array", "description": "Parameters", "items": {"$ref": "#/components/schemas/template_param"}}}}
    template_param: {"type": "object", "required": ["name", "data_type", "mandatory"], "properties": {"name": {"type": "string", "description": "Parameter name"}, "data_type": {"type": "string", "description": "Parameter type", "enum": ["string", "number", "date", "time", "secret"]}, "mandatory": {"type": "boolean", "description": "Is this field mandatory?", "default": false}, "descr": {"type": "string", "description": "Parameter description"}}}
    template_short: {"type": "object", "required": ["id", "name", "api_type", "owned"], "properties": {"id": {"type": "integer", "format": "int64", "description": "Template ID"}, "name": {"type": "string", "description": "Name of the template"}, "short_descr": {"type": "string", "description": "Short description of the template"}, "long_descr": {"type": "string", "description": "Long description of the template"}, "api_type": {"type": "string", "description": "Wasm API type"}, "owned": {"type": "boolean", "description": "Is the template owned by user?"}}}
  securitySchemes:
    APIKey:
      description: "API key for authentication. Make sure to include the word `apikey`, followed by a single space and then your token.\nExample: `apikey 1234$abcdef`"
      type: apiKey
      in: header
      name: Authorization
