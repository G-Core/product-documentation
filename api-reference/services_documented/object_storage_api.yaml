"openapi": "3.1.0"
"info": {"title": "Gcore OpenAPI â€“ Object Storage API", "description": "This OpenAPI is an aggregated OpenAPI specification that unifies all Gcore products into a single file. It covers Cloud, CDN, DNS, WAAP, DDoS Protection, Object Storage, Streaming, and FastEdge services.", "version": "2025-10-22T08:47:09.023432+00:00"}
"servers": ["url": "https://api.gcore.com"]
paths:
  "/storage/notifications/v1/event":
    "put": {"tags": ["Notifications"], "summary": "Update event", "description": "Modify an existing notification event threshold. Update the limits for storage usage, file quantity, traffic, or request alerts.", "operationId": "eventUpdateHttp", "parameters": [{"name": "client_id", "in": "query", "description": "Client ID", "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventResponse"}}}, "required": true}, "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "401": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body"}
    "post": {"tags": ["Notifications"], "summary": "Create event", "description": "Create a single notification event threshold. Configure alerts for when storage usage, file count, traffic, or requests exceed specified limits for a storage or bucket.", "operationId": "eventCreateHttp", "parameters": [{"name": "client_id", "in": "query", "description": "Client ID", "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventResponse"}}}, "required": true}, "responses": {"200": {"description": "EventResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventResponse"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "401": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body"}
    "delete": {"tags": ["Notifications"], "summary": "Delete event", "description": "Remove a notification event threshold. This will stop alerts for the specified storage usage, file count, traffic, or request limit.", "operationId": "eventDeleteHttp", "parameters": [{"name": "client_id", "in": "query", "description": "Client ID", "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventResponse"}}}, "required": true}, "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "401": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body"}
  "/storage/notifications/v1/events":
    "get": {"tags": ["Notifications"], "summary": "List events", "description": "Returns configured notification events for the client. Shows all active thresholds for storage usage, file count, traffic, and request limits.", "operationId": "eventsGetHttp", "responses": {"200": {"description": "EventsResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventsResponse"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "401": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}}
    "post": {"tags": ["Notifications"], "summary": "Update events", "description": "Configure multiple notification events at once. Only specified events will be updated - other events remain unchanged. Use this to set thresholds for storage usage alerts, file quantity limits, traffic warnings, and request quotas.", "operationId": "eventsCreateHttp", "responses": {"200": {"description": "EventsResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventsResponse"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "401": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}}
  "/storage/notifications/v1/events/configurator":
    "get": {"tags": ["Notifications"], "summary": "Get event types", "description": "Returns available notification event types and their field structures. Use this to understand what event types you can configure (`reaching_used_space`, `reaching_files_quantity`, `reaching_used_traffic`, `reaching_used_requests`) and their required fields.", "operationId": "eventsMetaHttp", "responses": {"200": {"description": "EventsMetaResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventsMetaResponse"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "401": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}}
  "/storage/provisioning/v1/key":
    "get": {"tags": ["SSHKeys"], "summary": "List SSH keys", "description": "Returns all SSH public keys for SFTP storage access. These keys enable passwordless authentication to SFTP storages.", "operationId": "keyListHttpV1", "parameters": [{"name": "offset", "in": "query", "description": "Number of records to skip before beginning to write in response.", "schema": {"minimum": 0, "type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"maximum": 1000, "minimum": 1, "type": "integer", "format": "uint64", "default": 10, "x-stainless-skip": ["terraform"]}}, {"name": "order_by", "in": "query", "description": "Field name to sort by", "schema": {"type": "string"}}, {"name": "order_direction", "in": "query", "description": "Ascending or descending order", "schema": {"type": "string", "enum": ["asc", "desc"]}}, {"name": "id", "in": "query", "schema": {"type": "string"}}, {"name": "name", "in": "query", "schema": {"type": "string"}}, {"name": "created", "in": "query", "schema": {"type": "string"}}], "responses": {"200": {"description": "KeyListEndpointRes", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/KeyListEndpointRes"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true}
    "put": {"tags": ["SSHKeys"], "summary": "Create SSH key", "description": "Creates an SSH public key for SFTP storage access. These keys are used for passwordless authentication to SFTP storages and are not used for S3-compatible storage.\nDeprecated, use POST /provisioning/v1/key instead.", "operationId": "keyCreateHttp", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"key": {"type": "string"}, "name": {"type": "string"}}}}}, "required": false}, "responses": {"200": {"description": "Key", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Key"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true, "x-codegen-request-body-name": "Body"}
    "post": {"tags": ["SSHKeys"], "summary": "Create SSH key", "description": "Creates an SSH public key for SFTP storage access. These keys are used for passwordless authentication to SFTP storages and are not used for S3-compatible storage.", "operationId": "keyCreateHttpPost", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"key": {"type": "string"}, "name": {"type": "string"}}}}}, "required": false}, "responses": {"200": {"description": "Key", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Key"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body"}
  "/storage/provisioning/v1/key/{key_id}":
    "delete": {"tags": ["SSHKeys"], "summary": "Delete SSH key", "description": "Removes an SSH public key. This will revoke SFTP access for any storages using this key.", "operationId": "keyDeleteHttp", "parameters": [{"name": "key_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}}
  "/storage/provisioning/v1/location":
    "get": {"tags": ["Storage Locations"], "summary": "List locations", "description": "Returns available storage locations where you can create storages. Each location represents a geographic region with specific data center facilities.", "operationId": "locationListHttp", "responses": {"200": {"description": "clientLocationRes", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/clientLocationRes"}}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true}
  "/storage/provisioning/v1/storage":
    "get": {"tags": ["Storage"], "summary": "List storages", "description": "Returns a paginated list of all storages with optional filtering by name, location, type, and status.\n\nNote: This version is deprecated. Please use /provisioning/v3/storage which returns a wrapped response with count and results.", "operationId": "storageListHttpV1", "parameters": [{"name": "offset", "in": "query", "description": "Number of records to skip before beginning to write in response.", "schema": {"minimum": 0, "type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"maximum": 1000, "minimum": 1, "type": "integer", "format": "uint64", "default": 10, "x-stainless-skip": ["terraform"]}}, {"name": "order_by", "in": "query", "description": "Field name to sort by", "schema": {"type": "string"}}, {"name": "order_direction", "in": "query", "description": "Ascending or descending order", "schema": {"type": "string", "enum": ["asc", "desc"]}}, {"name": "id", "in": "query", "description": "Filter by storage ID", "schema": {"type": "string"}}, {"name": "name", "in": "query", "description": "Filter by storage name (exact match)", "schema": {"type": "string"}}, {"name": "location", "in": "query", "description": "Filter by storage location/region", "schema": {"type": "string"}}, {"name": "type", "in": "query", "description": "Filter by storage type", "schema": {"type": "string", "enum": ["s3", "sftp"]}}, {"name": "status", "in": "query", "description": "Filter by storage status", "schema": {"type": "string", "enum": ["active", "suspended", "deleted", "pending"]}}, {"name": "show_deleted", "in": "query", "description": "Include deleted storages in the response", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "StorageListEndpointRes", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageListEndpointRes"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true}
    "put": {"tags": ["Storage"], "summary": "Create storage", "description": "Creates a new storage instance (S3 or SFTP) in the specified location and returns the storage details including credentials.\n\nNote: Prefer POST /provisioning/v2/storage that uses correct HTTP method for generating resources.", "operationId": "storageCreateHttp", "requestBody": {"content": {"application/json": {"schema": {"required": ["location", "name", "type"], "type": "object", "properties": {"generate_sftp_password": {"type": "boolean", "description": "Automatically generate a secure password for SFTP storage access. Only applicable when type is `sftp`. When `true`, a random password will be generated and returned in the response.", "example": true}, "location": {"type": "string", "description": "Geographic location where the storage will be provisioned. Each location represents a specific data center region.", "example": "s-ed1", "enum": ["s-ed1", "s-drc2", "s-sgc1", "s-nhn2", "s-darz", "s-ws1", "ams", "sin", "fra", "mia"]}, "name": {"maxLength": 256, "pattern": "^[a-zA-Z0-9_-]+$", "type": "string", "description": "Unique storage name identifier. Must contain only letters, numbers, dashes, and underscores. Cannot be empty and must be less than 256 characters.", "example": "my-storage-prod"}, "sftp_password": {"type": "string", "description": "Custom password for SFTP storage access. Only applicable when type is `sftp`. If not provided and `generate_sftp_password` is `false`, no password authentication will be available."}, "type": {"type": "string", "description": "Storage protocol type. Choose 's3' for S3-compatible object storage with API access, or `sftp` for SFTP file transfer protocol.", "example": "s3", "enum": ["sftp", "s3"]}}}}}, "required": false}, "responses": {"200": {"description": "Storage", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/storage_Storage"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true, "x-codegen-request-body-name": "Body"}
  "/storage/provisioning/v1/storage/{storage_id}":
    "get": {"tags": ["Storage"], "summary": "Get storage", "description": "Retrieves detailed information about a specific storage including its configuration, credentials, and current status.", "operationId": "storageGetHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"200": {"description": "Storage", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/storage_Storage"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nstorage = client.storage.get(\n    0,\n)\nprint(storage.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  storage, err := client.Storage.Get(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", storage.ID)\n}\n"}]}
    "post": {"tags": ["Storage"], "summary": "Update storage", "description": "Updates storage configuration such as expiration date and server alias.\nNote: Prefer PATCH /provisioning/v2/storage/{`storage_id`} that uses correct HTTP method for updating the storage.", "operationId": "storageUpdateHttp", "parameters": [{"name": "storage_id", "in": "path", "description": "The unique identifier of the storage to update", "required": true, "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"expires": {"type": "string", "description": "Duration when the storage should expire in format like \"2 years 6 months 2 weeks 3 days 5 hours 10 minutes 15 seconds\". Leave empty to remove expiration.", "example": "2 years 6 months 2 weeks 3 days 5 hours 10 minutes 15 seconds"}, "server_alias": {"type": "string", "description": "Custom domain alias for accessing the storage. Leave empty to remove alias.", "example": "my-storage.company.com"}}}}}, "required": false}, "responses": {"200": {"description": "Storage", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/storage_Storage"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true, "x-codegen-request-body-name": "Body"}
    "delete": {"tags": ["Storage"], "summary": "Delete storage", "description": "Permanently deletes a storage and all its data. This action cannot be undone.", "operationId": "storageDeleteHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.delete(\n    0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Delete(context.TODO(), 0)\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/credentials":
    "post": {"tags": ["Storage"], "summary": "Reset storage credentials", "description": "Generates new access credentials for the storage (S3 keys for S3 storage, SFTP password for SFTP storage).", "operationId": "storageUpdateCredentialsHttp", "parameters": [{"name": "storage_id", "in": "path", "description": "The unique identifier of the storage to reset credentials for", "required": true, "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"delete_sftp_password": {"type": "boolean", "description": "Remove the SFTP password, disabling password authentication. Only applicable to SFTP storage type.", "example": false}, "generate_s3_keys": {"type": "boolean", "description": "Generate new S3 access and secret keys for S3 storage. Only applicable to S3 storage type.", "example": true}, "generate_sftp_password": {"type": "boolean", "description": "Generate a new random password for SFTP access. Only applicable to SFTP storage type.", "example": true}, "reset_sftp_keys": {"type": "boolean", "description": "Reset/remove all SSH keys associated with the SFTP storage. Only applicable to SFTP storage type.", "example": false}, "sftp_password": {"type": "string", "description": "Set a custom password for SFTP access. Only applicable to SFTP storage type.", "example": "MyNewSecurePassword123"}}}}}, "required": false}, "responses": {"200": {"description": "Storage", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/storage_Storage"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nstorage = client.storage.credentials.recreate(\n    storage_id=0,\n)\nprint(storage.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  storage, err := client.Storage.Credentials.Recreate(\n    context.TODO(),\n    0,\n    storage.CredentialRecreateParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", storage.ID)\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/key/{key_id}/link":
    "post": {"tags": ["Storage"], "summary": "Link SSH key to SFTP storage", "description": "Associates an SSH public key with an SFTP storage, enabling passwordless authentication. Only works with SFTP storage types - not applicable to S3-compatible storage.", "operationId": "keyLinkHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "key_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.link_ssh_key(\n    key_id=0,\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.LinkSSHKey(\n    context.TODO(),\n    0,\n    storage.StorageLinkSSHKeyParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/key/{key_id}/unlink":
    "post": {"tags": ["Storage"], "summary": "Unlink SSH key from SFTP storage", "description": "Removes SSH key association from an SFTP storage, disabling passwordless authentication for that key. The key itself remains available for other storages.", "operationId": "keyUnlinkHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "key_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.unlink_ssh_key(\n    key_id=0,\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.UnlinkSSHKey(\n    context.TODO(),\n    0,\n    storage.StorageUnlinkSSHKeyParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/restore":
    "post": {"tags": ["Storage"], "summary": "Restore deleted storage", "description": "Restores a previously deleted S3 storage if it was deleted within the last 2 weeks. SFTP storages cannot be restored.", "operationId": "storageRestoreHttp", "parameters": [{"name": "client_id", "in": "query", "schema": {"type": "integer", "format": "int64"}}, {"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.restore(\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Restore(\n    context.TODO(),\n    0,\n    storage.StorageRestoreParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/s3/bucket/{bucket_name}":
    "post": {"tags": ["Storage"], "summary": "Create S3 bucket", "description": "Creates a new bucket within an S3 storage. Only applicable to S3-compatible storages.", "operationId": "storageBucketCreateHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.buckets.create(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Buckets.New(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketNewParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "delete": {"tags": ["Storage"], "summary": "Delete S3 bucket", "description": "Removes a bucket from an S3 storage. All objects in the bucket will be automatically deleted before the bucket is removed.", "operationId": "storageBucketRemoveHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.buckets.delete(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Buckets.Delete(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketDeleteParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/s3/bucket/{bucket_name}/cors":
    "get": {"tags": ["Storage"], "summary": "Get S3 bucket CORS", "description": "Retrieves the current Cross-Origin Resource Sharing (CORS) configuration for an S3 bucket, showing which domains are allowed to access the bucket from web browsers.", "operationId": "getStorageBucketCORSHttp", "parameters": [{"name": "storage_id", "in": "path", "description": "Unique identifier for the storage instance", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "description": "Name of the S3 bucket to retrieve CORS configuration from", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "StorageGetBucketCorsEndpointRes", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageGetBucketCorsEndpointRes"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nbucket_cors = client.storage.buckets.cors.get(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)\nprint(bucket_cors.allowed_origins)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  bucketCors, err := client.Storage.Buckets.Cors.Get(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketCorGetParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", bucketCors.AllowedOrigins)\n}\n"}]}
    "post": {"tags": ["Storage"], "summary": "Create S3 bucket CORS", "description": "Configures Cross-Origin Resource Sharing (CORS) rules for an S3 bucket, allowing web applications from specified domains to access bucket resources directly from browsers.", "operationId": "storageBucketCORSCreateHttp", "parameters": [{"name": "storage_id", "in": "path", "description": "Unique identifier for the storage instance", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "description": "Name of the S3 bucket to configure CORS for", "required": true, "schema": {"type": "string"}}], "requestBody": {"description": "CORS configuration for the bucket", "content": {"application/json": {"schema": {"type": "object", "properties": {"allowedOrigins": {"type": "array", "description": "List of allowed origins for CORS requests", "example": ["https://example.com", "https://app.example.com", "*"], "items": {"type": "string"}}}}}}, "required": true}, "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.buckets.cors.create(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Buckets.Cors.New(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketCorNewParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/s3/bucket/{bucket_name}/lifecycle":
    "post": {"tags": ["Storage"], "summary": "Configure S3 bucket automatic cleanup", "description": "Sets up automatic object expiration for an S3 bucket. All objects in the bucket will be automatically deleted after the specified number of days to help manage storage costs and meet compliance requirements. This applies a global lifecycle rule to the entire bucket - all existing and future objects will be subject to the expiration policy.", "operationId": "storageBucketLifecycleCreateHttp", "parameters": [{"name": "storage_id", "in": "path", "description": "Unique identifier for the storage instance", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "description": "Name of the S3 bucket to configure lifecycle policy for", "required": true, "schema": {"type": "string"}}], "requestBody": {"description": "Lifecycle configuration for automatic object cleanup", "content": {"application/json": {"schema": {"type": "object", "properties": {"expiration_days": {"type": "integer", "description": "Number of days after which objects will be automatically deleted from the bucket.\nMust be a positive integer. Common values: 30 for monthly cleanup, 365 for yearly retention.", "format": "int64", "example": 30}}}}}, "required": true}, "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.buckets.lifecycle.create(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Buckets.Lifecycle.New(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketLifecycleNewParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "delete": {"tags": ["Storage"], "summary": "Delete S3 bucket lifecycle", "description": "Removes all lifecycle rules from an S3 bucket, disabling automatic object expiration. Objects will no longer be automatically deleted based on age.", "operationId": "storageBucketLifecycleDeleteHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.buckets.lifecycle.delete(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Buckets.Lifecycle.Delete(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketLifecycleDeleteParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/s3/bucket/{bucket_name}/policy":
    "get": {"tags": ["Storage"], "summary": "Check S3 bucket public access status", "description": "Returns whether the S3 bucket is currently configured for public read access. Shows if anonymous users can download objects from the bucket via HTTP requests.", "operationId": "storageBucketPolicyGetHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "BucketPolicyStatusResponse returns a boolean indicating public access status", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BucketPolicyStatus"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npolicy = client.storage.buckets.policy.get(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)\nprint(policy)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  policy, err := client.Storage.Buckets.Policy.Get(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketPolicyGetParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", policy)\n}\n"}]}
    "post": {"tags": ["Storage"], "summary": "Make S3 bucket public", "description": "Applies a public read policy to the S3 bucket, allowing anonymous users to download/access all objects in the bucket via HTTP GET requests. This makes the bucket suitable for static website hosting, public file sharing, or CDN integration. Only grants read access - users cannot upload, modify, or delete objects without proper authentication.", "operationId": "storageBucketPolicyCreateHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.buckets.policy.create(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Buckets.Policy.New(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketPolicyNewParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
    "delete": {"tags": ["Storage"], "summary": "Make S3 bucket private", "description": "Removes the public read policy from an S3 bucket, making all objects private and accessible only with proper authentication credentials. After this operation, anonymous users will no longer be able to access bucket contents via HTTP requests.", "operationId": "storageBucketPolicyDeleteHttp", "parameters": [{"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bucket_name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "A SuccessResponse is a response that shows that operations was completed successfully", "content": {}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nclient.storage.buckets.policy.delete(\n    bucket_name=\"bucket_name\",\n    storage_id=0,\n)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  err := client.Storage.Buckets.Policy.Delete(\n    context.TODO(),\n    \"bucket_name\",\n    storage.BucketPolicyDeleteParams{\n      StorageID: 0,\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n}\n"}]}
  "/storage/provisioning/v1/storage/{storage_id}/s3/buckets":
    "get": {"tags": ["Storage"], "summary": "List S3 buckets", "description": "Returns a paginated list of all buckets within an S3 storage.\n\nNote: Prefer /provisioning/v2/storage/{`storage_id`}/s3/buckets which returns a wrapped response with count and results.", "operationId": "storageListBucketsHttp", "parameters": [{"name": "offset", "in": "query", "description": "Number of records to skip before beginning to write in response.", "schema": {"minimum": 0, "type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"maximum": 1000, "minimum": 1, "type": "integer", "format": "uint64", "default": 10, "x-stainless-skip": ["terraform"]}}, {"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"200": {"description": "StorageListBucketsEndpointRes", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageListBucketsEndpointRes"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true}
  "/storage/provisioning/v2/key":
    "get": {"tags": ["SSHKeys"], "summary": "List SSH keys", "description": "Returns all SSH public keys for SFTP storage access. These keys enable passwordless authentication to SFTP storages and are not used for S3-compatible storage.\nDeprecated, use /provisioning/v3/key instead", "operationId": "keyListHttpV2", "parameters": [{"name": "offset", "in": "query", "description": "Number of records to skip before beginning to write in response.", "schema": {"minimum": 0, "type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"maximum": 1000, "minimum": 1, "type": "integer", "format": "uint64", "default": 10, "x-stainless-skip": ["terraform"]}}, {"name": "order_by", "in": "query", "description": "Field name to sort by", "schema": {"type": "string"}}, {"name": "order_direction", "in": "query", "description": "Ascending or descending order", "schema": {"type": "string", "enum": ["asc", "desc"]}}, {"name": "id", "in": "query", "schema": {"type": "string"}}, {"name": "name", "in": "query", "schema": {"type": "string"}}, {"name": "created", "in": "query", "schema": {"type": "string"}}], "responses": {"200": {"description": "KeyListEndpointRes", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/KeyListEndpointRes"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true}
  "/storage/provisioning/v2/locations":
    "get": {"tags": ["Storage Locations"], "summary": "List locations", "description": "Returns available storage locations where you can create storages. Each location represents a geographic region with specific data center facilities.", "operationId": "locationListHttpV2", "parameters": [{"name": "offset", "in": "query", "schema": {"minimum": 0, "type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "schema": {"maximum": 1000, "minimum": 1, "type": "integer", "format": "uint64", "default": 10, "x-stainless-skip": ["terraform"]}}], "responses": {"200": {"description": "LocationListEndpointResV2", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationListEndpointResV2"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.storage.locations.list()\npage = page.results[0]\nprint(page.address)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Storage.Locations.List(context.TODO(), storage.LocationListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/storage/provisioning/v2/storage":
    "get": {"tags": ["Storage"], "summary": "List storages", "description": "Returns a paginated list of all storages with optional filtering by name, location, type, and status. Enhanced version with additional metadata.\n\nNote: Prefer /provisioning/v3/storage for a simpler wrapped response ({count, results}).", "operationId": "storageListHttpV2", "parameters": [{"name": "offset", "in": "query", "description": "Number of records to skip before beginning to write in response.", "schema": {"minimum": 0, "type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"maximum": 1000, "minimum": 1, "type": "integer", "format": "uint64", "default": 10, "x-stainless-skip": ["terraform"]}}, {"name": "order_by", "in": "query", "description": "Field name to sort by", "schema": {"type": "string"}}, {"name": "order_direction", "in": "query", "description": "Ascending or descending order", "schema": {"type": "string", "enum": ["asc", "desc"]}}, {"name": "id", "in": "query", "description": "Filter by storage ID", "schema": {"type": "string"}}, {"name": "name", "in": "query", "description": "Filter by storage name (exact match)", "schema": {"type": "string"}}, {"name": "location", "in": "query", "description": "Filter by storage location/region", "schema": {"type": "string"}}, {"name": "type", "in": "query", "description": "Filter by storage type", "schema": {"type": "string", "enum": ["s3", "sftp"]}}, {"name": "status", "in": "query", "description": "Filter by storage status", "schema": {"type": "string", "enum": ["active", "suspended", "deleted", "pending"]}}, {"name": "show_deleted", "in": "query", "description": "Include deleted storages in the response", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "StorageListEndpointRes", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageListEndpointRes"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "deprecated": true}
    "post": {"tags": ["Storage"], "summary": "Create storage", "description": "Creates a new storage instance (S3 or SFTP) in the specified location and returns the storage details including credentials.", "operationId": "storageCreateHttpV2", "requestBody": {"content": {"application/json": {"schema": {"required": ["location", "name", "type"], "type": "object", "properties": {"generate_sftp_password": {"type": "boolean", "description": "Automatically generate a secure password for SFTP storage access. Only applicable when type is `sftp`. When `true`, a random password will be generated and returned in the response.", "example": true}, "location": {"type": "string", "description": "Geographic location where the storage will be provisioned. Each location represents a specific data center region.", "example": "s-ed1", "enum": ["s-ed1", "s-drc2", "s-sgc1", "s-nhn2", "s-darz", "s-ws1", "ams", "sin", "fra", "mia"]}, "name": {"maxLength": 256, "pattern": "^[a-zA-Z0-9_-]+$", "type": "string", "description": "Unique storage name identifier. Must contain only letters, numbers, dashes, and underscores. Cannot be empty and must be less than 256 characters.", "example": "my-storage-prod"}, "sftp_password": {"type": "string", "description": "Custom password for SFTP storage access. Only applicable when type is `sftp`. If not provided and `generate_sftp_password` is `false`, no password authentication will be available."}, "type": {"type": "string", "description": "Storage protocol type. Choose 's3' for S3-compatible object storage with API access, or `sftp` for SFTP file transfer protocol.", "example": "s3", "enum": ["sftp", "s3"]}}}}}, "required": false}, "responses": {"200": {"description": "Storage", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/storage_Storage"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}, "409": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nstorage = client.storage.create(\n    location=\"s-ed1\",\n    name=\"my-storage-prod\",\n    type=\"s3\",\n)\nprint(storage.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  storage, err := client.Storage.New(context.TODO(), storage.StorageNewParams{\n    Location: storage.StorageNewParamsLocationSEd1,\n    Name: \"my-storage-prod\",\n    Type: storage.StorageNewParamsTypeS3,\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", storage.ID)\n}\n"}]}
  "/storage/provisioning/v2/storage/{storage_id}":
    "patch": {"tags": ["Storage"], "summary": "Update storage", "description": "Updates storage configuration such as expiration date and server alias. Used for SFTP storages.", "operationId": "storageUpdateHttpV2", "parameters": [{"name": "storage_id", "in": "path", "description": "The unique identifier of the storage to update", "required": true, "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"expires": {"type": "string", "description": "Duration when the storage should expire in format like \"1 years 6 months 2 weeks 3 days 5 hours 10 minutes 15 seconds\". Set empty to remove expiration.", "example": "1 years 6 months"}, "server_alias": {"type": "string", "description": "Custom domain alias for accessing the storage. Set empty to remove alias.", "example": "my-storage.company.com"}}}}}, "required": false}, "responses": {"200": {"description": "Storage", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/storage_Storage"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nstorage = client.storage.update(\n    storage_id=0,\n)\nprint(storage.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  storage, err := client.Storage.Update(\n    context.TODO(),\n    0,\n    storage.StorageUpdateParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", storage.ID)\n}\n"}]}
  "/storage/provisioning/v2/storage/{storage_id}/s3/buckets":
    "get": {"tags": ["Storage"], "summary": "List S3 buckets", "description": "Returns the list of buckets for the storage in a wrapped response.\n\nResponse format:\ncount: total number of buckets (independent of pagination)\nresults: current page of buckets according to limit/offset", "operationId": "storageListBucketsHttpV2", "parameters": [{"name": "offset", "in": "query", "description": "Number of records to skip before beginning to write in response.", "schema": {"minimum": 0, "type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"maximum": 1000, "minimum": 1, "type": "integer", "format": "uint64", "default": 10, "x-stainless-skip": ["terraform"]}}, {"name": "storage_id", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"200": {"description": "StorageListBucketsEndpointResV2", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageListBucketsEndpointResV2"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.storage.buckets.list(\n    storage_id=0,\n)\npage = page.results[0]\nprint(page.name)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Storage.Buckets.List(\n    context.TODO(),\n    0,\n    storage.BucketListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/storage/provisioning/v3/key":
    "get": {"tags": ["SSHKeys"], "summary": "List SSH keys", "description": "Returns all SSH public keys for SFTP storage access. These keys enable passwordless authentication to SFTP storages and are not used for S3-compatible storage.", "operationId": "keyListHttpV3", "responses": {"200": {"description": "KeyListEndpointResV3", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/KeyListEndpointResV3"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}}
  "/storage/provisioning/v3/storage":
    "get": {"tags": ["Storage"], "summary": "List storages", "description": "Returns storages with the same filtering and pagination as v2, but in a simplified response shape for easier client consumption.\n\nResponse format:\ncount: total number of storages matching the filter (independent of pagination)\nresults: the current page of storages according to limit/offset", "operationId": "storageListHttpV3", "parameters": [{"name": "order_by", "in": "query", "description": "Field name to sort by", "schema": {"type": "string"}}, {"name": "order_direction", "in": "query", "description": "Ascending or descending order", "schema": {"type": "string", "enum": ["asc", "desc"]}}, {"name": "id", "in": "query", "description": "Filter by storage ID", "schema": {"type": "string"}}, {"name": "name", "in": "query", "description": "Filter by storage name (exact match)", "schema": {"type": "string"}}, {"name": "location", "in": "query", "description": "Filter by storage location/region", "schema": {"type": "string"}}, {"name": "type", "in": "query", "description": "Filter by storage type", "schema": {"type": "string", "enum": ["s3", "sftp"]}}, {"name": "offset", "in": "query", "description": "Number of records to skip before beginning to write in response.", "schema": {"minimum": 0, "type": "integer", "format": "uint64"}}, {"name": "limit", "in": "query", "description": "Max number of records in response", "schema": {"maximum": 1000, "minimum": 1, "type": "integer", "format": "uint64", "default": 10, "x-stainless-skip": ["terraform"]}}, {"name": "status", "in": "query", "description": "Filter by storage status", "schema": {"type": "string", "enum": ["active", "suspended", "deleted", "pending"]}}, {"name": "show_deleted", "in": "query", "description": "Include deleted storages in the response", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "StorageListEndpointResV3", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageListEndpointResV3"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\npage = client.storage.list()\npage = page.results[0]\nprint(page.id)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Storage.List(context.TODO(), storage.StorageListParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n"}]}
  "/storage/stats/v1/storage/usage/series":
    "post": {"tags": ["Storage Statistics"], "summary": "Storage usage series", "description": "Consumption statistics is updated in near real-time as a standard practice.\nHowever, the frequency of updates can vary, but they are typically available within a 60 minutes period.\nExceptions, such as maintenance periods, may delay data beyond 60 minutes until servers resume and backfill missing statistics.   \n  \nShows storage usage data in series format filtered by clients, storages and interval.", "operationId": "storageUsageSeriesHttpPost", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"from": {"type": "string", "description": "a From date filter", "example": "2006-01-02"}, "granularity": {"type": "string", "description": "a Granularity is period of time for grouping data\nValid values are: 1h, 12h, 24h", "example": "12h"}, "locations": {"type": "array", "description": "a Locations list of filter", "example": ["s-ed1", "s-drc2", "s-sgc1"], "items": {"type": "string"}}, "source": {"type": "integer", "description": "a Source is deprecated parameter", "format": "uint8"}, "storages": {"type": "array", "description": "a Storages list of filter", "example": ["123-myStorage"], "items": {"type": "string"}}, "to": {"type": "string", "description": "a To date filter", "example": "2006-01-02"}, "ts_string": {"type": "boolean", "description": "a TsString is configurator of response time format\nswitch response from unix time format to RFC3339 (2006-01-02T15:04:05Z07:00)"}}}}}, "required": false}, "responses": {"200": {"description": "StorageUsageSeriesEndpointRes", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageUsageSeriesEndpointRes"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nresponse = client.storage.statistics.get_usage_series()\nprint(response.data)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  response, err := client.Storage.Statistics.GetUsageSeries(context.TODO(), storage.StatisticGetUsageSeriesParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", response.Data)\n}\n"}]}
  "/storage/stats/v1/storage/usage/total":
    "post": {"tags": ["Storage Statistics"], "summary": "Storage usage total", "description": "Consumption statistics is updated in near real-time as a standard practice.\nHowever, the frequency of updates can vary, but they are typically available within a 60 minutes period.\nExceptions, such as maintenance periods, may delay data beyond 60 minutes until servers resume and backfill missing statistics.   \n  \nShows storage total usage data in filtered by storages, locations and interval.", "operationId": "storageUsageTotalHttpPost", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"from": {"type": "string", "description": "a From date filter", "example": "2006-01-02"}, "locations": {"type": "array", "description": "a Locations list of filter", "example": ["s-ed1", "s-drc2", "s-sgc1"], "items": {"type": "string"}}, "storages": {"type": "array", "description": "a Storages list of filter", "example": ["123-myStorage"], "items": {"type": "string"}}, "to": {"type": "string", "description": "a To date filter", "example": "2006-01-02"}}}}}, "required": false}, "responses": {"200": {"description": "StorageUsageTotalEndpointRes", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageUsageTotalEndpointRes"}}}}, "400": {"description": "ErrResponse", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrResponse"}}}}}, "x-codegen-request-body-name": "Body", "x-codeSamples": [{"lang": "Python", "source": "from gcore import Gcore\n\nclient = Gcore(\n    api_key=\"My API Key\",\n)\nusage_total = client.storage.statistics.get_usage_aggregated()\nprint(usage_total.data)"}, {"lang": "Go", "source": "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/G-Core/gcore-go\"\n  \"github.com/G-Core/gcore-go/option\"\n  \"github.com/G-Core/gcore-go/storage\"\n)\n\nfunc main() {\n  client := gcore.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  usageTotal, err := client.Storage.Statistics.GetUsageAggregated(context.TODO(), storage.StatisticGetUsageAggregatedParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", usageTotal.Data)\n}\n"}]}
tags:
- {"name": "Notifications", "x-displayName": "Notifications"}
- {"name": "SSHKeys", "x-displayName": "SSHKeys"}
- {"name": "Storage Locations", "x-displayName": "Storage Locations"}
- {"name": "Storage", "x-displayName": "Storage"}
- {"name": "Storage Statistics", "x-displayName": "Storage Statistics"}
x-tagGroups:
- {"name": "Object Storage API", "tags": ["Notifications", "SSHKeys", "Storage Locations", "Storage", "Storage Statistics"]}
security: ["APIKey": []]
components:
  schemas:
    BucketDto: {"required": ["name"], "type": "object", "properties": {"lifecycle": {"type": "integer", "description": "Lifecycle policy expiration days (optional)", "format": "int64", "example": 30}, "name": {"type": "string", "example": "my-bucket"}}, "description": "BucketDto for response"}
    BucketDtoV2: {"required": ["name"], "type": "object", "properties": {"lifecycle": {"type": "integer", "description": "Lifecycle policy expiration days (zero if not set)", "format": "int64", "example": 30}, "name": {"type": "string", "description": "Name of the S3 bucket", "example": "my-bucket"}}, "description": "BucketDtoV2 for response"}
    BucketPolicyStatus: {"type": "boolean", "description": "BucketPolicyStatus model for the boolean response"}
    ClientStats: {"type": "object", "properties": {"file_quantity_sum_max": {"type": "integer", "description": "a FileQuantitySumMax is max sum of files quantity for grouped period", "format": "uint64"}, "id": {"type": "integer", "description": "an ID of client", "format": "int64"}, "locations": {"type": "object", "additionalProperties": {"$ref": "#/components/schemas/LocationStats"}, "description": "a Locations grouped data"}, "requests_in_sum": {"type": "integer", "description": "a RequestsInSum is sum of incoming requests for grouped period", "format": "uint64"}, "requests_out_edges_sum": {"type": "integer", "description": "a RequestsOutEdgesSum is sum of out edges requests for grouped period", "format": "uint64"}, "requests_out_wo_edges_sum": {"type": "integer", "description": "a RequestsOutWoEdgesSum is sum of out no edges requests for grouped period", "format": "uint64"}, "requests_sum": {"type": "integer", "description": "a RequestsSum is sum of all requests for grouped period", "format": "uint64"}, "size_sum_bytes_hour": {"type": "integer", "description": "a SizeSumBytesHour is sum of bytes hour for grouped period", "format": "uint64"}, "size_sum_max": {"type": "integer", "description": "a SizeSumMax is max sum of all files sizes for grouped period", "format": "uint64"}, "size_sum_mean": {"type": "integer", "description": "a SizeSumMean is mean sum of all files sizes for grouped period", "format": "uint64"}, "traffic_in_sum": {"type": "integer", "description": "a TrafficInSum is sum of incoming traffic for grouped period", "format": "uint64"}, "traffic_out_edges_sum": {"type": "integer", "description": "a TrafficOutEdgesSum is sum of out edges traffic for grouped period", "format": "uint64"}, "traffic_out_wo_edges_sum": {"type": "integer", "description": "a TrafficOutWoEdgesSum is sum of out no edges traffic for grouped period", "format": "uint64"}, "traffic_sum": {"type": "integer", "description": "a TrafficSum is sum of all traffic for grouped period", "format": "uint64"}}}
    Credentials: {"type": "object", "properties": {"keys": {"type": "array", "description": "SSH public keys associated with SFTP storage for passwordless authentication", "items": {"$ref": "#/components/schemas/Key"}}, "s3": {"$ref": "#/components/schemas/S3Credentials"}, "sftp_password": {"type": "string", "description": "Generated or user-provided password for SFTP access (only present for SFTP storage type)", "example": "Xy9$mN2p!qR8"}}}
    DataMeta: {"type": "object", "properties": {"ToMeta": {"type": "object", "additionalProperties": {"type": "object"}}}, "description": "Provide meta info through layers"}
    ErrResponse: {"type": "object", "properties": {"error": {"type": "string"}}}
    EventDescription: {"type": "object", "properties": {"fields": {"type": "array", "description": "Fields description", "items": {"$ref": "#/components/schemas/EventField"}}, "name": {"type": "string", "description": "Name of event for root prop of request structure", "example": "reaching_files_quantity"}}, "description": "EventDescription to form structure of request"}
    EventField: {"type": "object", "properties": {"name": {"type": "string", "description": "Name of field in root event structure", "example": "storage_name"}, "type": {"type": "string", "description": "Type of field", "example": "number, bool, text"}}, "description": "EventField details"}
    EventResponse: {"required": ["name"], "type": "object", "properties": {"bucket_name": {"type": "string"}, "bytes": {"type": "integer", "description": "Bytes as limit", "format": "uint64", "example": 500}, "count": {"type": "integer", "description": "Count as limit", "format": "uint64", "example": 5}, "name": {"type": "string", "description": "name of type notification", "example": "reaching_used_space, reaching_files_quantity, reaching_used_traffic, reaching_used_requests"}, "storage_name": {"type": "string"}, "uuid": {"type": "string"}}, "description": "Event for storage notification"}
    EventsMetaResponse: {"type": "object", "properties": {"structure": {"type": "array", "description": "Structure of request body", "items": {"$ref": "#/components/schemas/EventDescription"}}}, "description": "EventsMeta describe how to form POST/PATCH request"}
    EventsResponse: {"type": "object", "properties": {"reaching_files_quantity": {"type": "array", "items": {"$ref": "#/components/schemas/LimitByCount"}}, "reaching_used_requests": {"type": "array", "items": {"$ref": "#/components/schemas/LimitByCount"}}, "reaching_used_space": {"type": "array", "items": {"$ref": "#/components/schemas/LimitByBytes"}}, "reaching_used_traffic": {"type": "array", "items": {"$ref": "#/components/schemas/LimitByBytes"}}}, "description": "Events for storage notification"}
    Key: {"type": "object", "properties": {"created_at": {"type": "string", "description": "ISO 8601 timestamp when the SSH key was created", "example": "2025-08-05 09:15:00+00:00"}, "id": {"type": "integer", "description": "Unique identifier for the SSH key", "format": "int64", "example": 123}, "name": {"type": "string", "description": "User-defined name for the SSH key", "example": "my-production-key"}}}
    KeyListEndpointRes: {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Key"}}, "meta": {"$ref": "#/components/schemas/DataMeta"}}}
    KeyListEndpointResV3: {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Key"}}, "total_count": {"type": "integer", "format": "int64"}}}
    LimitByBytes: {"type": "object", "properties": {"bucket_name": {"type": "string"}, "bytes": {"type": "integer", "format": "uint64"}, "storage_name": {"type": "string"}, "uuid": {"type": "string"}}, "description": "LimitByBytes input"}
    LimitByCount: {"type": "object", "properties": {"bucket_name": {"type": "string"}, "count": {"type": "integer", "format": "uint64"}, "storage_name": {"type": "string"}, "uuid": {"type": "string"}}, "description": "LimitByCount input"}
    LocationListEndpointResV2: {"required": ["count", "results"], "type": "object", "properties": {"count": {"type": "integer", "description": "Total number of locations available", "format": "int64", "example": 1}, "results": {"type": "array", "description": "The list of locations", "items": {"$ref": "#/components/schemas/LocationV2"}}}, "description": "LocationListEndpointResV2 response for v2"}
    LocationStats: {"type": "object", "properties": {"file_quantity_sum_max": {"type": "integer", "description": "a FileQuantitySumMax is max sum of files quantity for grouped period", "format": "uint64"}, "name": {"type": "string", "description": "a Name of location"}, "requests_in_sum": {"type": "integer", "description": "a RequestsInSum is sum of incoming requests for grouped period", "format": "uint64"}, "requests_out_edges_sum": {"type": "integer", "description": "a RequestsOutEdgesSum is sum of out edges requests for grouped period", "format": "uint64"}, "requests_out_wo_edges_sum": {"type": "integer", "description": "a RequestsOutWoEdgesSum is sum of out no edges requests for grouped period", "format": "uint64"}, "requests_sum": {"type": "integer", "description": "a RequestsSum is sum of all requests for grouped period", "format": "uint64"}, "size_sum_bytes_hour": {"type": "integer", "description": "a SizeSumBytesHour is sum of bytes hour for grouped period", "format": "uint64"}, "size_sum_max": {"type": "integer", "description": "a SizeSumMax is max sum of all files sizes for grouped period", "format": "uint64"}, "size_sum_mean": {"type": "integer", "description": "a SizeSumMean is mean sum of all files sizes for grouped period", "format": "uint64"}, "storages": {"type": "object", "additionalProperties": {"$ref": "#/components/schemas/StorageStats"}, "description": "a Storages grouped data"}, "traffic_in_sum": {"type": "integer", "description": "a TrafficInSum is sum of incoming traffic for grouped period", "format": "uint64"}, "traffic_out_edges_sum": {"type": "integer", "description": "a TrafficOutEdgesSum is sum of out edges traffic for grouped period", "format": "uint64"}, "traffic_out_wo_edges_sum": {"type": "integer", "description": "a TrafficOutWoEdgesSum is sum of out no edges traffic for grouped period", "format": "uint64"}, "traffic_sum": {"type": "integer", "description": "a TrafficSum is sum of all traffic for grouped period", "format": "uint64"}}}
    LocationV2: {"required": ["address", "allow_for_new_storage", "name", "title", "type"], "type": "object", "properties": {"address": {"type": "string", "description": "Full hostname/address for accessing the storage endpoint in this location", "example": "s-ed1.cloud.example.com"}, "allow_for_new_storage": {"type": "string", "description": "Indicates whether new storage can be created in this location", "example": "allow", "enum": ["deny", "allow"]}, "name": {"type": "string", "description": "Location code (region identifier)", "example": "s-ed1"}, "title": {"type": "string", "description": "Human-readable title for the location", "example": "S3 Luxembourg"}, "type": {"type": "string", "description": "Storage protocol type supported in this location", "example": "s3", "enum": ["s3", "sftp"]}}, "description": "LocationV2 represents location data for v2 API where title is a string"}
    S3Credentials: {"type": "object", "properties": {"access_key": {"type": "string", "description": "S3-compatible access key identifier for authentication", "example": "AKIAIOSFODNN7EXAMPLE"}, "secret_key": {"type": "string", "description": "S3-compatible secret key for authentication (keep secure)", "example": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"}}}
    StatsMetrics: {"type": "object", "properties": {"file_quantity_sum_max": {"type": "integer", "description": "a FileQuantitySumMax is max sum of files quantity for grouped period", "format": "uint64"}, "requests_in_sum": {"type": "integer", "description": "a RequestsInSum is sum of incoming requests for grouped period", "format": "uint64"}, "requests_out_edges_sum": {"type": "integer", "description": "a RequestsOutEdgesSum is sum of out edges requests for grouped period", "format": "uint64"}, "requests_out_wo_edges_sum": {"type": "integer", "description": "a RequestsOutWoEdgesSum is sum of out no edges requests for grouped period", "format": "uint64"}, "requests_sum": {"type": "integer", "description": "a RequestsSum is sum of all requests for grouped period", "format": "uint64"}, "size_sum_bytes_hour": {"type": "integer", "description": "a SizeSumBytesHour is sum of bytes hour for grouped period", "format": "uint64"}, "size_sum_max": {"type": "integer", "description": "a SizeSumMax is max sum of all files sizes for grouped period", "format": "uint64"}, "size_sum_mean": {"type": "integer", "description": "a SizeSumMean is mean sum of all files sizes for grouped period", "format": "uint64"}, "traffic_in_sum": {"type": "integer", "description": "a TrafficInSum is sum of incoming traffic for grouped period", "format": "uint64"}, "traffic_out_edges_sum": {"type": "integer", "description": "a TrafficOutEdgesSum is sum of out edges traffic for grouped period", "format": "uint64"}, "traffic_out_wo_edges_sum": {"type": "integer", "description": "a TrafficOutWoEdgesSum is sum of out no edges traffic for grouped period", "format": "uint64"}, "traffic_sum": {"type": "integer", "description": "a TrafficSum is sum of all traffic for grouped period", "format": "uint64"}}}
    StorageGetBucketCorsEndpointRes: {"type": "object", "properties": {"allowedOrigins": {"type": "array", "description": "List of allowed origins for Cross-Origin Resource Sharing (CORS) requests.\nContains domains/URLs that are permitted to make cross-origin requests to this bucket.", "example": ["https://example.com", "https://app.example.com", "*"], "items": {"type": "string"}}}, "description": "StorageGetBucketCorsEndpointRes output"}
    StorageListBucketsEndpointRes: {"type": "object", "properties": {"data": {"type": "array", "description": "List of S3 buckets in the storage", "example": ["name": "my-bucket", "name": "another-bucket"], "items": {"$ref": "#/components/schemas/BucketDto"}}, "total_count": {"type": "integer", "description": "Total number of buckets found", "format": "int64", "example": 2}}, "description": "StorageListBucketsEndpointRes output"}
    StorageListBucketsEndpointResV2: {"required": ["count", "results"], "type": "object", "properties": {"count": {"type": "integer", "description": "Total number of buckets", "format": "int64", "example": 1}, "results": {"type": "array", "description": "Current page of bucket results", "items": {"$ref": "#/components/schemas/BucketDtoV2"}}}, "description": "StorageListBucketsEndpointResV2 output"}
    StorageListEndpointRes: {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/storage_Storage"}}, "meta": {"$ref": "#/components/schemas/DataMeta"}}}
    StorageListEndpointResV3: {"required": ["count", "results"], "type": "object", "properties": {"count": {"type": "integer", "description": "Total number of storages matching the filter", "format": "int64", "example": 1}, "results": {"type": "array", "description": "The list of storages", "items": {"$ref": "#/components/schemas/storage_Storage"}}}, "description": "StorageListEndpointResV3 wraps storages with total count"}
    StorageStats: {"type": "object", "properties": {"buckets_series": {"type": "object", "additionalProperties": {"type": "array", "items": {"type": "array", "items": {"type": "object"}}}, "description": "a BucketsSeries is max bucket files count for grouped period {name:[[timestamp, count]]}"}, "file_quantity_sum_max": {"type": "integer", "description": "a FileQuantitySumMax is max sum of files quantity for grouped period", "format": "uint64"}, "name": {"type": "string", "description": "a Name of storage"}, "requests_in_series": {"type": "array", "description": "a RequestsInSeries is sum of incoming requests for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "requests_in_sum": {"type": "integer", "description": "a RequestsInSum is sum of incoming requests for grouped period", "format": "uint64"}, "requests_out_edges_series": {"type": "array", "description": "a RequestsOutWoEdgesSeries is sum of out requests (only edges) for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "requests_out_edges_sum": {"type": "integer", "description": "a RequestsOutEdgesSum is sum of out edges requests for grouped period", "format": "uint64"}, "requests_out_wo_edges_series": {"type": "array", "description": "a RequestsOutWoEdgesSeries is sum of out requests (without edges) for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "requests_out_wo_edges_sum": {"type": "integer", "description": "a RequestsOutWoEdgesSum is sum of out no edges requests for grouped period", "format": "uint64"}, "requests_series": {"type": "array", "description": "a RequestsSeries is sum of out requests for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "requests_sum": {"type": "integer", "description": "a RequestsSum is sum of all requests for grouped period", "format": "uint64"}, "size_bytes_hour_series": {"type": "array", "description": "a SizeBytesHourSeries is value that displays how many bytes were stored per hour [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "size_max_series": {"type": "array", "description": "a SizeMaxSeries is max of files size for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "size_mean_series": {"type": "array", "description": "a SizeMeanSeries is mean of files size for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "size_sum_bytes_hour": {"type": "integer", "description": "a SizeSumBytesHour is sum of bytes hour for grouped period", "format": "uint64"}, "size_sum_max": {"type": "integer", "description": "a SizeSumMax is max sum of all files sizes for grouped period", "format": "uint64"}, "size_sum_mean": {"type": "integer", "description": "a SizeSumMean is mean sum of all files sizes for grouped period", "format": "uint64"}, "traffic_in_series": {"type": "array", "description": "a TrafficInSeries is sum of incoming traffic bytes for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "traffic_in_sum": {"type": "integer", "description": "a TrafficInSum is sum of incoming traffic for grouped period", "format": "uint64"}, "traffic_out_edges_series": {"type": "array", "description": "a TrafficOutWoEdgesSeries is sum of out traffic bytes (only edges) for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "traffic_out_edges_sum": {"type": "integer", "description": "a TrafficOutEdgesSum is sum of out edges traffic for grouped period", "format": "uint64"}, "traffic_out_wo_edges_series": {"type": "array", "description": "a TrafficOutWoEdgesSeries is sum of out traffic bytes (without edges) for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "traffic_out_wo_edges_sum": {"type": "integer", "description": "a TrafficOutWoEdgesSum is sum of out no edges traffic for grouped period", "format": "uint64"},
        "traffic_series": {"type": "array", "description": "a TrafficSeries is sum of traffic bytes for grouped period [[timestamp, count]]", "items": {"type": "array", "items": {"type": "object"}}}, "traffic_sum": {"type": "integer", "description": "a TrafficSum is sum of all traffic for grouped period", "format": "uint64"}}}
    StorageStatsTotalElement: {"type": "object", "properties": {"metrics": {"$ref": "#/components/schemas/StatsMetrics"}}, "description": "StorageStatsTotalElement for response"}
    StorageUsageSeriesEndpointRes: {"type": "object", "properties": {"data": {"$ref": "#/components/schemas/StorageUsageSeriesServiceRes"}}}
    StorageUsageSeriesServiceRes: {"type": "object", "properties": {"clients": {"type": "object", "additionalProperties": {"$ref": "#/components/schemas/ClientStats"}, "description": "a Clients grouped data"}}}
    StorageUsageTotalEndpointRes: {"type": "object", "properties": {"data": {"$ref": "#/components/schemas/StorageUsageTotalRes"}}}
    StorageUsageTotalRes: {"type": "array", "description": "StorageUsageTotalRes for response", "items": {"$ref": "#/components/schemas/StorageStatsTotalElement"}}
    clientLocationRes: {"required": ["address", "allow_for_new_storage", "id", "name", "type"], "type": "object", "properties": {"address": {"type": "string", "description": "Full hostname/address for accessing the storage endpoint", "example": "s-ed1.cloud.example.com"}, "allow_for_new_storage": {"type": "string", "description": "Indicates whether new storage can be created in this location: `allow` enables storage creation, `deny` prevents it", "example": "allow", "enum": ["deny", "allow"]}, "id": {"type": "integer", "format": "int64", "example": 1}, "name": {"type": "string", "example": "s-ed1", "enum": ["s-ed1", "s-drc2", "s-sgc1", "s-nhn2", "s-darz", "s-ws1", "ams", "sin", "fra", "mia"]}, "type": {"type": "string", "enum": ["s3", "sftp"]}}}
    storage_Storage: {"required": ["address", "client_id", "created_at", "id", "location", "name", "provisioning_status", "reseller_id", "type"], "type": "object", "properties": {"address": {"type": "string", "description": "Full hostname/address for accessing the storage endpoint", "example": "s-ed1.cloud.example.com"}, "can_restore": {"type": "boolean", "description": "Whether this storage can be restored if deleted (S3 storages only, within 2 weeks)", "example": true}, "client_id": {"type": "integer", "description": "Client identifier who owns this storage", "format": "int64", "example": 1}, "created_at": {"type": "string", "description": "ISO 8601 timestamp when the storage was created", "example": "2025-08-05 09:17:02.095832+00:00"}, "credentials": {"$ref": "#/components/schemas/Credentials"}, "custom_config_file": {"type": "boolean", "description": "Whether custom configuration file is used for this storage", "example": false}, "deleted_at": {"type": "string", "description": "ISO 8601 timestamp when the storage was deleted (only present for deleted storages)", "example": "2025-08-05 10:30:15.123456+00:00"}, "disable_http": {"type": "boolean", "description": "Whether HTTP access is disabled for this storage (HTTPS only)", "example": false}, "expires": {"type": "string", "description": "ISO 8601 timestamp when the storage will expire (if set)", "example": "2026-08-05 09:17:02.095832+00:00"}, "id": {"type": "integer", "description": "Unique identifier for the storage instance", "format": "int64", "example": 1}, "location": {"type": "string", "description": "Geographic location code where the storage is provisioned", "example": "s-ed1", "enum": ["s-ed1", "s-drc2", "s-sgc1", "s-nhn2", "s-darz", "s-ws1", "ams", "sin", "fra", "mia"]}, "name": {"type": "string", "description": "User-defined name for the storage instance", "example": "1-my-storage-prod"}, "provisioning_status": {"type": "string", "description": "Current provisioning status of the storage instance", "example": "ok", "enum": ["creating", "ok", "updating", "deleting", "deleted"]}, "reseller_id": {"type": "integer", "description": "Reseller technical client ID associated with the client", "format": "int64", "example": 1}, "rewrite_rules": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Custom URL rewrite rules for the storage (admin-configurable)"}, "server_alias": {"type": "string", "description": "Custom domain alias for accessing the storage", "example": "my-storage.example.com"}, "type": {"type": "string", "description": "Storage protocol type - either S3-compatible object storage or SFTP file transfer", "example": "s3", "enum": ["sftp", "s3"]}}}
  securitySchemes:
    APIKey:
      description: "API key for authentication. Make sure to include the word `apikey`, followed by a single space and then your token.\nExample: `apikey 1234$abcdef`"
      type: apiKey
      in: header
      name: Authorization
